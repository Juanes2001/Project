
Examen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f8  08009880  08009880  00019880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a078  0800a078  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a078  0800a078  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a078  0800a078  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a078  0800a078  0001a078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a07c  0800a07c  0001a07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  200001d4  0800a254  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  0800a254  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007bdd  00000000  00000000  000201fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001735  00000000  00000000  00027ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000468  00000000  00000000  00029510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003c8  00000000  00000000  00029978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010d5e  00000000  00000000  00029d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005d86  00000000  00000000  0003aa9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057c79  00000000  00000000  00040824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009849d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d8  00000000  00000000  000984f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009864 	.word	0x08009864

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08009864 	.word	0x08009864

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	4605      	mov	r5, r0
 8000cbc:	460c      	mov	r4, r1
 8000cbe:	4628      	mov	r0, r5
 8000cc0:	4621      	mov	r1, r4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f7ff ff21 	bl	8000b0c <__aeabi_dcmplt>
 8000cca:	b928      	cbnz	r0, 8000cd8 <__aeabi_d2lz+0x20>
 8000ccc:	4628      	mov	r0, r5
 8000cce:	4621      	mov	r1, r4
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f000 b80a 	b.w	8000cec <__aeabi_d2ulz>
 8000cd8:	4628      	mov	r0, r5
 8000cda:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000cde:	f000 f805 	bl	8000cec <__aeabi_d2ulz>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
 8000cea:	bf00      	nop

08000cec <__aeabi_d2ulz>:
 8000cec:	b5d0      	push	{r4, r6, r7, lr}
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__aeabi_d2ulz+0x34>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4606      	mov	r6, r0
 8000cf4:	460f      	mov	r7, r1
 8000cf6:	f7ff fc97 	bl	8000628 <__aeabi_dmul>
 8000cfa:	f7ff ff6d 	bl	8000bd8 <__aeabi_d2uiz>
 8000cfe:	4604      	mov	r4, r0
 8000d00:	f7ff fc18 	bl	8000534 <__aeabi_ui2d>
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <__aeabi_d2ulz+0x38>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f7ff fc8e 	bl	8000628 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4630      	mov	r0, r6
 8000d12:	4639      	mov	r1, r7
 8000d14:	f7ff fad0 	bl	80002b8 <__aeabi_dsub>
 8000d18:	f7ff ff5e 	bl	8000bd8 <__aeabi_d2uiz>
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d20:	3df00000 	.word	0x3df00000
 8000d24:	41f00000 	.word	0x41f00000

08000d28 <main>:
//ADDRESS OLED

#define ADDRESS 0b0111100

//Este es el corazon del programa donde se ejecuta todo
int main(void){
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af02      	add	r7, sp, #8

	inSystem();
 8000d2e:	f000 fad3 	bl	80012d8 <inSystem>

	while(1){



		x = adcData[0]-2000;
 8000d32:	4b8f      	ldr	r3, [pc, #572]	; (8000f70 <main+0x248>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	4b8c      	ldr	r3, [pc, #560]	; (8000f74 <main+0x24c>)
 8000d42:	801a      	strh	r2, [r3, #0]
		y = adcData[1]-2000;
 8000d44:	4b8a      	ldr	r3, [pc, #552]	; (8000f70 <main+0x248>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	4b89      	ldr	r3, [pc, #548]	; (8000f78 <main+0x250>)
 8000d54:	801a      	strh	r2, [r3, #0]
		vectorArcUp = (180*atan2(y,x))/M_PI;
 8000d56:	4b88      	ldr	r3, [pc, #544]	; (8000f78 <main+0x250>)
 8000d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fbf9 	bl	8000554 <__aeabi_i2d>
 8000d62:	4604      	mov	r4, r0
 8000d64:	460d      	mov	r5, r1
 8000d66:	4b83      	ldr	r3, [pc, #524]	; (8000f74 <main+0x24c>)
 8000d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fbf1 	bl	8000554 <__aeabi_i2d>
 8000d72:	4602      	mov	r2, r0
 8000d74:	460b      	mov	r3, r1
 8000d76:	4620      	mov	r0, r4
 8000d78:	4629      	mov	r1, r5
 8000d7a:	f008 fb0f 	bl	800939c <atan2>
 8000d7e:	f04f 0200 	mov.w	r2, #0
 8000d82:	4b7e      	ldr	r3, [pc, #504]	; (8000f7c <main+0x254>)
 8000d84:	f7ff fc50 	bl	8000628 <__aeabi_dmul>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	4619      	mov	r1, r3
 8000d90:	a375      	add	r3, pc, #468	; (adr r3, 8000f68 <main+0x240>)
 8000d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d96:	f7ff fd71 	bl	800087c <__aeabi_ddiv>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	4610      	mov	r0, r2
 8000da0:	4619      	mov	r1, r3
 8000da2:	f7ff ff19 	bl	8000bd8 <__aeabi_d2uiz>
 8000da6:	4603      	mov	r3, r0
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	4b75      	ldr	r3, [pc, #468]	; (8000f80 <main+0x258>)
 8000dac:	801a      	strh	r2, [r3, #0]
		vectorArcDown =180+(180*atan2(-y,-x))/M_PI;
 8000dae:	4b72      	ldr	r3, [pc, #456]	; (8000f78 <main+0x250>)
 8000db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db4:	425b      	negs	r3, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fbcc 	bl	8000554 <__aeabi_i2d>
 8000dbc:	4604      	mov	r4, r0
 8000dbe:	460d      	mov	r5, r1
 8000dc0:	4b6c      	ldr	r3, [pc, #432]	; (8000f74 <main+0x24c>)
 8000dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fbc3 	bl	8000554 <__aeabi_i2d>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	4629      	mov	r1, r5
 8000dd6:	f008 fae1 	bl	800939c <atan2>
 8000dda:	f04f 0200 	mov.w	r2, #0
 8000dde:	4b67      	ldr	r3, [pc, #412]	; (8000f7c <main+0x254>)
 8000de0:	f7ff fc22 	bl	8000628 <__aeabi_dmul>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	4610      	mov	r0, r2
 8000dea:	4619      	mov	r1, r3
 8000dec:	a35e      	add	r3, pc, #376	; (adr r3, 8000f68 <main+0x240>)
 8000dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df2:	f7ff fd43 	bl	800087c <__aeabi_ddiv>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f04f 0200 	mov.w	r2, #0
 8000e02:	4b5e      	ldr	r3, [pc, #376]	; (8000f7c <main+0x254>)
 8000e04:	f7ff fa5a 	bl	80002bc <__adddf3>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f7ff fee2 	bl	8000bd8 <__aeabi_d2uiz>
 8000e14:	4603      	mov	r3, r0
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	4b5a      	ldr	r3, [pc, #360]	; (8000f84 <main+0x25c>)
 8000e1a:	801a      	strh	r2, [r3, #0]


		duttyUpR = (100*(vectorArcDown + 120))/120;
 8000e1c:	4b59      	ldr	r3, [pc, #356]	; (8000f84 <main+0x25c>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	3378      	adds	r3, #120	; 0x78
 8000e22:	2264      	movs	r2, #100	; 0x64
 8000e24:	fb02 f303 	mul.w	r3, r2, r3
 8000e28:	4a57      	ldr	r2, [pc, #348]	; (8000f88 <main+0x260>)
 8000e2a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e2e:	441a      	add	r2, r3
 8000e30:	1192      	asrs	r2, r2, #6
 8000e32:	17db      	asrs	r3, r3, #31
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b54      	ldr	r3, [pc, #336]	; (8000f8c <main+0x264>)
 8000e3a:	701a      	strb	r2, [r3, #0]
		duttyUpG =  (100*vectorArcUp)/120;
 8000e3c:	4b50      	ldr	r3, [pc, #320]	; (8000f80 <main+0x258>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	2364      	movs	r3, #100	; 0x64
 8000e44:	fb03 f302 	mul.w	r3, r3, r2
 8000e48:	4a4f      	ldr	r2, [pc, #316]	; (8000f88 <main+0x260>)
 8000e4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e4e:	441a      	add	r2, r3
 8000e50:	1192      	asrs	r2, r2, #6
 8000e52:	17db      	asrs	r3, r3, #31
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b4d      	ldr	r3, [pc, #308]	; (8000f90 <main+0x268>)
 8000e5a:	701a      	strb	r2, [r3, #0]
		duttyUpB1 = (100*(vectorArcUp-120))/120;
 8000e5c:	4b48      	ldr	r3, [pc, #288]	; (8000f80 <main+0x258>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	3b78      	subs	r3, #120	; 0x78
 8000e62:	2264      	movs	r2, #100	; 0x64
 8000e64:	fb02 f303 	mul.w	r3, r2, r3
 8000e68:	4a47      	ldr	r2, [pc, #284]	; (8000f88 <main+0x260>)
 8000e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6e:	441a      	add	r2, r3
 8000e70:	1192      	asrs	r2, r2, #6
 8000e72:	17db      	asrs	r3, r3, #31
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	4b46      	ldr	r3, [pc, #280]	; (8000f94 <main+0x26c>)
 8000e7a:	701a      	strb	r2, [r3, #0]
		duttyUpB2 = (100*(vectorArcDown-120))/120;
 8000e7c:	4b41      	ldr	r3, [pc, #260]	; (8000f84 <main+0x25c>)
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	3b78      	subs	r3, #120	; 0x78
 8000e82:	2264      	movs	r2, #100	; 0x64
 8000e84:	fb02 f303 	mul.w	r3, r2, r3
 8000e88:	4a3f      	ldr	r2, [pc, #252]	; (8000f88 <main+0x260>)
 8000e8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e8e:	441a      	add	r2, r3
 8000e90:	1192      	asrs	r2, r2, #6
 8000e92:	17db      	asrs	r3, r3, #31
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b3f      	ldr	r3, [pc, #252]	; (8000f98 <main+0x270>)
 8000e9a:	701a      	strb	r2, [r3, #0]
		duttyDownR = 100-(100*vectorArcUp)/120;
 8000e9c:	4b38      	ldr	r3, [pc, #224]	; (8000f80 <main+0x258>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	2364      	movs	r3, #100	; 0x64
 8000ea4:	fb03 f302 	mul.w	r3, r3, r2
 8000ea8:	4a37      	ldr	r2, [pc, #220]	; (8000f88 <main+0x260>)
 8000eaa:	fb82 1203 	smull	r1, r2, r2, r3
 8000eae:	441a      	add	r2, r3
 8000eb0:	1192      	asrs	r2, r2, #6
 8000eb2:	17db      	asrs	r3, r3, #31
 8000eb4:	1a9b      	subs	r3, r3, r2
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	3364      	adds	r3, #100	; 0x64
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b37      	ldr	r3, [pc, #220]	; (8000f9c <main+0x274>)
 8000ebe:	701a      	strb	r2, [r3, #0]
		duttyDownG1 = 100-(100*(vectorArcUp-120))/120;
 8000ec0:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <main+0x258>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	3b78      	subs	r3, #120	; 0x78
 8000ec6:	2264      	movs	r2, #100	; 0x64
 8000ec8:	fb02 f303 	mul.w	r3, r2, r3
 8000ecc:	4a2e      	ldr	r2, [pc, #184]	; (8000f88 <main+0x260>)
 8000ece:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed2:	441a      	add	r2, r3
 8000ed4:	1192      	asrs	r2, r2, #6
 8000ed6:	17db      	asrs	r3, r3, #31
 8000ed8:	1a9b      	subs	r3, r3, r2
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	3364      	adds	r3, #100	; 0x64
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <main+0x278>)
 8000ee2:	701a      	strb	r2, [r3, #0]
		duttyDownG2 = 100-(100*(vectorArcDown-120))/120;
 8000ee4:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <main+0x25c>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	3b78      	subs	r3, #120	; 0x78
 8000eea:	2264      	movs	r2, #100	; 0x64
 8000eec:	fb02 f303 	mul.w	r3, r2, r3
 8000ef0:	4a25      	ldr	r2, [pc, #148]	; (8000f88 <main+0x260>)
 8000ef2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef6:	441a      	add	r2, r3
 8000ef8:	1192      	asrs	r2, r2, #6
 8000efa:	17db      	asrs	r3, r3, #31
 8000efc:	1a9b      	subs	r3, r3, r2
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	3364      	adds	r3, #100	; 0x64
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <main+0x27c>)
 8000f06:	701a      	strb	r2, [r3, #0]
		duttyDownB = 100-(100*(vectorArcDown+120))/120;
 8000f08:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <main+0x25c>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	3378      	adds	r3, #120	; 0x78
 8000f0e:	2264      	movs	r2, #100	; 0x64
 8000f10:	fb02 f303 	mul.w	r3, r2, r3
 8000f14:	4a1c      	ldr	r2, [pc, #112]	; (8000f88 <main+0x260>)
 8000f16:	fb82 1203 	smull	r1, r2, r2, r3
 8000f1a:	441a      	add	r2, r3
 8000f1c:	1192      	asrs	r2, r2, #6
 8000f1e:	17db      	asrs	r3, r3, #31
 8000f20:	1a9b      	subs	r3, r3, r2
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	3364      	adds	r3, #100	; 0x64
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <main+0x280>)
 8000f2a:	701a      	strb	r2, [r3, #0]


		if (setScrollUP){
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <main+0x284>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d041      	beq.n	8000fb8 <main+0x290>
			counter++;
 8000f34:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <main+0x288>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <main+0x288>)
 8000f3e:	701a      	strb	r2, [r3, #0]
			setLineAddress(&handlerI2C1, counter);
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <main+0x288>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	481b      	ldr	r0, [pc, #108]	; (8000fb4 <main+0x28c>)
 8000f48:	f001 fe5b 	bl	8002c02 <setLineAddress>
			if (counter == 64){
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <main+0x288>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b40      	cmp	r3, #64	; 0x40
 8000f52:	d102      	bne.n	8000f5a <main+0x232>
				counter = 0;
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <main+0x288>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
			}
			setScrollUP=RESET;
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <main+0x284>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	e047      	b.n	8000ff2 <main+0x2ca>
 8000f62:	bf00      	nop
 8000f64:	f3af 8000 	nop.w
 8000f68:	54442d18 	.word	0x54442d18
 8000f6c:	400921fb 	.word	0x400921fb
 8000f70:	2000047c 	.word	0x2000047c
 8000f74:	20000380 	.word	0x20000380
 8000f78:	20000382 	.word	0x20000382
 8000f7c:	40668000 	.word	0x40668000
 8000f80:	2000037c 	.word	0x2000037c
 8000f84:	2000037e 	.word	0x2000037e
 8000f88:	88888889 	.word	0x88888889
 8000f8c:	20000373 	.word	0x20000373
 8000f90:	20000374 	.word	0x20000374
 8000f94:	20000375 	.word	0x20000375
 8000f98:	20000376 	.word	0x20000376
 8000f9c:	20000377 	.word	0x20000377
 8000fa0:	20000378 	.word	0x20000378
 8000fa4:	20000379 	.word	0x20000379
 8000fa8:	2000037a 	.word	0x2000037a
 8000fac:	20000395 	.word	0x20000395
 8000fb0:	2000036e 	.word	0x2000036e
 8000fb4:	20000354 	.word	0x20000354
		}else if (setScrollDOWN){
 8000fb8:	4b63      	ldr	r3, [pc, #396]	; (8001148 <main+0x420>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d018      	beq.n	8000ff2 <main+0x2ca>
			setLineAddress(&handlerI2C1, 64-counter);
 8000fc0:	4b62      	ldr	r3, [pc, #392]	; (800114c <main+0x424>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4860      	ldr	r0, [pc, #384]	; (8001150 <main+0x428>)
 8000fce:	f001 fe18 	bl	8002c02 <setLineAddress>
			counter++;
 8000fd2:	4b5e      	ldr	r3, [pc, #376]	; (800114c <main+0x424>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b5c      	ldr	r3, [pc, #368]	; (800114c <main+0x424>)
 8000fdc:	701a      	strb	r2, [r3, #0]
			if (counter == 63){
 8000fde:	4b5b      	ldr	r3, [pc, #364]	; (800114c <main+0x424>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b3f      	cmp	r3, #63	; 0x3f
 8000fe4:	d102      	bne.n	8000fec <main+0x2c4>
				counter = 0;
 8000fe6:	4b59      	ldr	r3, [pc, #356]	; (800114c <main+0x424>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
			}
			setScrollUP=RESET;
 8000fec:	4b59      	ldr	r3, [pc, #356]	; (8001154 <main+0x42c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]

		}


		if (adcFlag){
 8000ff2:	4b59      	ldr	r3, [pc, #356]	; (8001158 <main+0x430>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 80f0 	beq.w	80011dc <main+0x4b4>


			if (((x>-50) & (x<50)) & ((y>-50) & (y<50)) ){
 8000ffc:	4b57      	ldr	r3, [pc, #348]	; (800115c <main+0x434>)
 8000ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001002:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8001006:	bfac      	ite	ge
 8001008:	2301      	movge	r3, #1
 800100a:	2300      	movlt	r3, #0
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4b53      	ldr	r3, [pc, #332]	; (800115c <main+0x434>)
 8001010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001014:	2b31      	cmp	r3, #49	; 0x31
 8001016:	bfd4      	ite	le
 8001018:	2301      	movle	r3, #1
 800101a:	2300      	movgt	r3, #0
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4013      	ands	r3, r2
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4619      	mov	r1, r3
 8001024:	4b4e      	ldr	r3, [pc, #312]	; (8001160 <main+0x438>)
 8001026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102a:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800102e:	bfac      	ite	ge
 8001030:	2301      	movge	r3, #1
 8001032:	2300      	movlt	r3, #0
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b4a      	ldr	r3, [pc, #296]	; (8001160 <main+0x438>)
 8001038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103c:	2b31      	cmp	r3, #49	; 0x31
 800103e:	bfd4      	ite	le
 8001040:	2301      	movle	r3, #1
 8001042:	2300      	movgt	r3, #0
 8001044:	b2db      	uxtb	r3, r3
 8001046:	4013      	ands	r3, r2
 8001048:	b2db      	uxtb	r3, r3
 800104a:	400b      	ands	r3, r1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <main+0x342>
				updateDuttyCycle(&handlerPwmR, 100);
 8001050:	2164      	movs	r1, #100	; 0x64
 8001052:	4844      	ldr	r0, [pc, #272]	; (8001164 <main+0x43c>)
 8001054:	f002 fb90 	bl	8003778 <updateDuttyCycle>
				updateDuttyCycle(&handlerPwmG, 100);
 8001058:	2164      	movs	r1, #100	; 0x64
 800105a:	4843      	ldr	r0, [pc, #268]	; (8001168 <main+0x440>)
 800105c:	f002 fb8c 	bl	8003778 <updateDuttyCycle>
				updateDuttyCycle(&handlerPwmB, 100);
 8001060:	2164      	movs	r1, #100	; 0x64
 8001062:	4842      	ldr	r0, [pc, #264]	; (800116c <main+0x444>)
 8001064:	f002 fb88 	bl	8003778 <updateDuttyCycle>
 8001068:	e0b8      	b.n	80011dc <main+0x4b4>


			}else{
				if ((vectorArcUp > 0) & (vectorArcUp < 120) ){
 800106a:	4b41      	ldr	r3, [pc, #260]	; (8001170 <main+0x448>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	bf14      	ite	ne
 8001072:	2301      	movne	r3, #1
 8001074:	2300      	moveq	r3, #0
 8001076:	b2da      	uxtb	r2, r3
 8001078:	4b3d      	ldr	r3, [pc, #244]	; (8001170 <main+0x448>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	2b77      	cmp	r3, #119	; 0x77
 800107e:	bf94      	ite	ls
 8001080:	2301      	movls	r3, #1
 8001082:	2300      	movhi	r3, #0
 8001084:	b2db      	uxtb	r3, r3
 8001086:	4013      	ands	r3, r2
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d012      	beq.n	80010b4 <main+0x38c>
					updateDuttyCycle(&handlerPwmR, duttyDownR);
 800108e:	4b39      	ldr	r3, [pc, #228]	; (8001174 <main+0x44c>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b29b      	uxth	r3, r3
 8001094:	4619      	mov	r1, r3
 8001096:	4833      	ldr	r0, [pc, #204]	; (8001164 <main+0x43c>)
 8001098:	f002 fb6e 	bl	8003778 <updateDuttyCycle>
					updateDuttyCycle(&handlerPwmG, duttyUpG);
 800109c:	4b36      	ldr	r3, [pc, #216]	; (8001178 <main+0x450>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	4619      	mov	r1, r3
 80010a4:	4830      	ldr	r0, [pc, #192]	; (8001168 <main+0x440>)
 80010a6:	f002 fb67 	bl	8003778 <updateDuttyCycle>
					updateDuttyCycle(&handlerPwmB, 0);
 80010aa:	2100      	movs	r1, #0
 80010ac:	482f      	ldr	r0, [pc, #188]	; (800116c <main+0x444>)
 80010ae:	f002 fb63 	bl	8003778 <updateDuttyCycle>
 80010b2:	e093      	b.n	80011dc <main+0x4b4>
				}else if ((vectorArcUp > 120) & (vectorArcUp < 180) ){
 80010b4:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <main+0x448>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	2b78      	cmp	r3, #120	; 0x78
 80010ba:	bf8c      	ite	hi
 80010bc:	2301      	movhi	r3, #1
 80010be:	2300      	movls	r3, #0
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <main+0x448>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	2bb3      	cmp	r3, #179	; 0xb3
 80010c8:	bf94      	ite	ls
 80010ca:	2301      	movls	r3, #1
 80010cc:	2300      	movhi	r3, #0
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	4013      	ands	r3, r2
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d012      	beq.n	80010fe <main+0x3d6>
					updateDuttyCycle(&handlerPwmR, 0);
 80010d8:	2100      	movs	r1, #0
 80010da:	4822      	ldr	r0, [pc, #136]	; (8001164 <main+0x43c>)
 80010dc:	f002 fb4c 	bl	8003778 <updateDuttyCycle>
					updateDuttyCycle(&handlerPwmG, duttyDownG1);
 80010e0:	4b26      	ldr	r3, [pc, #152]	; (800117c <main+0x454>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	4619      	mov	r1, r3
 80010e8:	481f      	ldr	r0, [pc, #124]	; (8001168 <main+0x440>)
 80010ea:	f002 fb45 	bl	8003778 <updateDuttyCycle>
					updateDuttyCycle(&handlerPwmB, duttyUpB1);
 80010ee:	4b24      	ldr	r3, [pc, #144]	; (8001180 <main+0x458>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	4619      	mov	r1, r3
 80010f6:	481d      	ldr	r0, [pc, #116]	; (800116c <main+0x444>)
 80010f8:	f002 fb3e 	bl	8003778 <updateDuttyCycle>
 80010fc:	e06e      	b.n	80011dc <main+0x4b4>
				}else if ((vectorArcDown > 180) & (vectorArcDown < 240) ){
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <main+0x45c>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	2bb4      	cmp	r3, #180	; 0xb4
 8001104:	bf8c      	ite	hi
 8001106:	2301      	movhi	r3, #1
 8001108:	2300      	movls	r3, #0
 800110a:	b2da      	uxtb	r2, r3
 800110c:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <main+0x45c>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	2bef      	cmp	r3, #239	; 0xef
 8001112:	bf94      	ite	ls
 8001114:	2301      	movls	r3, #1
 8001116:	2300      	movhi	r3, #0
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4013      	ands	r3, r2
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d036      	beq.n	8001190 <main+0x468>
					updateDuttyCycle(&handlerPwmR, 0);
 8001122:	2100      	movs	r1, #0
 8001124:	480f      	ldr	r0, [pc, #60]	; (8001164 <main+0x43c>)
 8001126:	f002 fb27 	bl	8003778 <updateDuttyCycle>
					updateDuttyCycle(&handlerPwmG, duttyDownG2);
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <main+0x460>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	4619      	mov	r1, r3
 8001132:	480d      	ldr	r0, [pc, #52]	; (8001168 <main+0x440>)
 8001134:	f002 fb20 	bl	8003778 <updateDuttyCycle>
					updateDuttyCycle(&handlerPwmB, duttyUpB2);
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <main+0x464>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b29b      	uxth	r3, r3
 800113e:	4619      	mov	r1, r3
 8001140:	480a      	ldr	r0, [pc, #40]	; (800116c <main+0x444>)
 8001142:	f002 fb19 	bl	8003778 <updateDuttyCycle>
 8001146:	e049      	b.n	80011dc <main+0x4b4>
 8001148:	20000396 	.word	0x20000396
 800114c:	2000036e 	.word	0x2000036e
 8001150:	20000354 	.word	0x20000354
 8001154:	20000395 	.word	0x20000395
 8001158:	2000036c 	.word	0x2000036c
 800115c:	20000380 	.word	0x20000380
 8001160:	20000382 	.word	0x20000382
 8001164:	200002e8 	.word	0x200002e8
 8001168:	200002f8 	.word	0x200002f8
 800116c:	20000308 	.word	0x20000308
 8001170:	2000037c 	.word	0x2000037c
 8001174:	20000377 	.word	0x20000377
 8001178:	20000374 	.word	0x20000374
 800117c:	20000378 	.word	0x20000378
 8001180:	20000375 	.word	0x20000375
 8001184:	2000037e 	.word	0x2000037e
 8001188:	20000379 	.word	0x20000379
 800118c:	20000376 	.word	0x20000376
				}else if ((vectorArcDown > 240) & (vectorArcDown < 380) ){
 8001190:	4b40      	ldr	r3, [pc, #256]	; (8001294 <main+0x56c>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	2bf0      	cmp	r3, #240	; 0xf0
 8001196:	bf8c      	ite	hi
 8001198:	2301      	movhi	r3, #1
 800119a:	2300      	movls	r3, #0
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <main+0x56c>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	f240 117b 	movw	r1, #379	; 0x17b
 80011a6:	428b      	cmp	r3, r1
 80011a8:	bf94      	ite	ls
 80011aa:	2301      	movls	r3, #1
 80011ac:	2300      	movhi	r3, #0
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	4013      	ands	r3, r2
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d011      	beq.n	80011dc <main+0x4b4>
					updateDuttyCycle(&handlerPwmR, duttyUpR);
 80011b8:	4b37      	ldr	r3, [pc, #220]	; (8001298 <main+0x570>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	4619      	mov	r1, r3
 80011c0:	4836      	ldr	r0, [pc, #216]	; (800129c <main+0x574>)
 80011c2:	f002 fad9 	bl	8003778 <updateDuttyCycle>
					updateDuttyCycle(&handlerPwmG, 0);
 80011c6:	2100      	movs	r1, #0
 80011c8:	4835      	ldr	r0, [pc, #212]	; (80012a0 <main+0x578>)
 80011ca:	f002 fad5 	bl	8003778 <updateDuttyCycle>
					updateDuttyCycle(&handlerPwmB, duttyDownB);
 80011ce:	4b35      	ldr	r3, [pc, #212]	; (80012a4 <main+0x57c>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	4619      	mov	r1, r3
 80011d6:	4834      	ldr	r0, [pc, #208]	; (80012a8 <main+0x580>)
 80011d8:	f002 face 	bl	8003778 <updateDuttyCycle>


		//COMANDOS


		if (rxData != '\0'){
 80011dc:	4b33      	ldr	r3, [pc, #204]	; (80012ac <main+0x584>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d01f      	beq.n	8001224 <main+0x4fc>
			bufferReception[counterReception] = rxData;
 80011e4:	4b32      	ldr	r3, [pc, #200]	; (80012b0 <main+0x588>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b30      	ldr	r3, [pc, #192]	; (80012ac <main+0x584>)
 80011ec:	7819      	ldrb	r1, [r3, #0]
 80011ee:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <main+0x58c>)
 80011f0:	5499      	strb	r1, [r3, r2]
			counterReception++;
 80011f2:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <main+0x588>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	3301      	adds	r3, #1
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <main+0x588>)
 80011fc:	701a      	strb	r2, [r3, #0]

			if (rxData == '@'){
 80011fe:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <main+0x584>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b40      	cmp	r3, #64	; 0x40
 8001204:	d10b      	bne.n	800121e <main+0x4f6>
				doneTransaction = SET;
 8001206:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <main+0x590>)
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]

				bufferReception[counterReception] = '\0';
 800120c:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <main+0x588>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <main+0x58c>)
 8001214:	2100      	movs	r1, #0
 8001216:	5499      	strb	r1, [r3, r2]

				counterReception = 0;
 8001218:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <main+0x588>)
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]

			}

			rxData = '\0';
 800121e:	4b23      	ldr	r3, [pc, #140]	; (80012ac <main+0x584>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]

		}

		if (doneTransaction){
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <main+0x590>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <main+0x510>
			parseCommands(bufferReception);
 800122c:	4821      	ldr	r0, [pc, #132]	; (80012b4 <main+0x58c>)
 800122e:	f000 faab 	bl	8001788 <parseCommands>
			doneTransaction = RESET;
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <main+0x590>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
		}

		if (flagDate){
 8001238:	4b20      	ldr	r3, [pc, #128]	; (80012bc <main+0x594>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	f43f ad78 	beq.w	8000d32 <main+0xa>
			sec = *(getDate());
 8001242:	f002 fd2d 	bl	8003ca0 <getDate>
 8001246:	4603      	mov	r3, r0
 8001248:	781a      	ldrb	r2, [r3, #0]
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <main+0x598>)
 800124c:	701a      	strb	r2, [r3, #0]
			min = *(getDate()+1);
 800124e:	f002 fd27 	bl	8003ca0 <getDate>
 8001252:	4603      	mov	r3, r0
 8001254:	785a      	ldrb	r2, [r3, #1]
 8001256:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <main+0x59c>)
 8001258:	701a      	strb	r2, [r3, #0]
			hours = *(getDate()+2);
 800125a:	f002 fd21 	bl	8003ca0 <getDate>
 800125e:	4603      	mov	r3, r0
 8001260:	789a      	ldrb	r2, [r3, #2]
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <main+0x5a0>)
 8001264:	701a      	strb	r2, [r3, #0]

			sprintf(date, "%u:%u:%u",hours,min,sec);
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <main+0x5a0>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <main+0x59c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <main+0x598>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	460b      	mov	r3, r1
 800127a:	4914      	ldr	r1, [pc, #80]	; (80012cc <main+0x5a4>)
 800127c:	4814      	ldr	r0, [pc, #80]	; (80012d0 <main+0x5a8>)
 800127e:	f003 fed7 	bl	8005030 <siprintf>
			drawMSG(&handlerI2C1, date, sizeof(date));
 8001282:	2210      	movs	r2, #16
 8001284:	4912      	ldr	r1, [pc, #72]	; (80012d0 <main+0x5a8>)
 8001286:	4813      	ldr	r0, [pc, #76]	; (80012d4 <main+0x5ac>)
 8001288:	f001 ffea 	bl	8003260 <drawMSG>
			flagDate = RESET;
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <main+0x594>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
		x = adcData[0]-2000;
 8001292:	e54e      	b.n	8000d32 <main+0xa>
 8001294:	2000037e 	.word	0x2000037e
 8001298:	20000373 	.word	0x20000373
 800129c:	200002e8 	.word	0x200002e8
 80012a0:	200002f8 	.word	0x200002f8
 80012a4:	2000037a 	.word	0x2000037a
 80012a8:	20000308 	.word	0x20000308
 80012ac:	2000036d 	.word	0x2000036d
 80012b0:	2000036f 	.word	0x2000036f
 80012b4:	200003ec 	.word	0x200003ec
 80012b8:	20000370 	.word	0x20000370
 80012bc:	2000038f 	.word	0x2000038f
 80012c0:	20000390 	.word	0x20000390
 80012c4:	20000391 	.word	0x20000391
 80012c8:	20000392 	.word	0x20000392
 80012cc:	08009880 	.word	0x08009880
 80012d0:	2000042c 	.word	0x2000042c
 80012d4:	20000354 	.word	0x20000354

080012d8 <inSystem>:


	}
}

void inSystem (void){
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0

	//Descripcion de la configuracion

	//BLINKY LED

	handlerLEDPin.pGPIOx = GPIOA;
 80012dc:	4bae      	ldr	r3, [pc, #696]	; (8001598 <inSystem+0x2c0>)
 80012de:	4aaf      	ldr	r2, [pc, #700]	; (800159c <inSystem+0x2c4>)
 80012e0:	601a      	str	r2, [r3, #0]
	handlerLEDPin.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 80012e2:	4bad      	ldr	r3, [pc, #692]	; (8001598 <inSystem+0x2c0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	725a      	strb	r2, [r3, #9]
	handlerLEDPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80012e8:	4bab      	ldr	r3, [pc, #684]	; (8001598 <inSystem+0x2c0>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	715a      	strb	r2, [r3, #5]
	handlerLEDPin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 80012ee:	4baa      	ldr	r3, [pc, #680]	; (8001598 <inSystem+0x2c0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	721a      	strb	r2, [r3, #8]
	handlerLEDPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 80012f4:	4ba8      	ldr	r3, [pc, #672]	; (8001598 <inSystem+0x2c0>)
 80012f6:	2205      	movs	r2, #5
 80012f8:	711a      	strb	r2, [r3, #4]
	handlerLEDPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80012fa:	4ba7      	ldr	r3, [pc, #668]	; (8001598 <inSystem+0x2c0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	71da      	strb	r2, [r3, #7]
	handlerLEDPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8001300:	4ba5      	ldr	r3, [pc, #660]	; (8001598 <inSystem+0x2c0>)
 8001302:	2202      	movs	r2, #2
 8001304:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerLEDPin);
 8001306:	48a4      	ldr	r0, [pc, #656]	; (8001598 <inSystem+0x2c0>)
 8001308:	f001 f908 	bl	800251c <GPIO_Config>
	GPIO_WritePin(&handlerLEDPin, SET);
 800130c:	2101      	movs	r1, #1
 800130e:	48a2      	ldr	r0, [pc, #648]	; (8001598 <inSystem+0x2c0>)
 8001310:	f001 fa2c 	bl	800276c <GPIO_WritePin>

	handlerLEDTim.ptrTIMx = TIM2;
 8001314:	4ba2      	ldr	r3, [pc, #648]	; (80015a0 <inSystem+0x2c8>)
 8001316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131a:	601a      	str	r2, [r3, #0]
	handlerLEDTim.TIMx_Config.TIMx_interruptEnable = 1;
 800131c:	4ba0      	ldr	r3, [pc, #640]	; (80015a0 <inSystem+0x2c8>)
 800131e:	2201      	movs	r2, #1
 8001320:	741a      	strb	r2, [r3, #16]
	handlerLEDTim.TIMx_Config.TIMx_mode = BTIMER_MODE_UP;
 8001322:	4b9f      	ldr	r3, [pc, #636]	; (80015a0 <inSystem+0x2c8>)
 8001324:	2200      	movs	r2, #0
 8001326:	711a      	strb	r2, [r3, #4]
	handlerLEDTim.TIMx_Config.TIMx_period = 2500;
 8001328:	4b9d      	ldr	r3, [pc, #628]	; (80015a0 <inSystem+0x2c8>)
 800132a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800132e:	60da      	str	r2, [r3, #12]
	handlerLEDTim.TIMx_Config.TIMx_speed = BTIMER_SPEED_100us;
 8001330:	4b9b      	ldr	r3, [pc, #620]	; (80015a0 <inSystem+0x2c8>)
 8001332:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001336:	609a      	str	r2, [r3, #8]
	BasicTimer_Config(&handlerLEDTim);
 8001338:	4899      	ldr	r0, [pc, #612]	; (80015a0 <inSystem+0x2c8>)
 800133a:	f000 ffdd 	bl	80022f8 <BasicTimer_Config>

	startTimer(&handlerLEDTim);
 800133e:	4898      	ldr	r0, [pc, #608]	; (80015a0 <inSystem+0x2c8>)
 8001340:	f001 f8ca 	bl	80024d8 <startTimer>


	//Conversion del JOYSTICK
	handlerADCTim.ptrTIMx = TIM4;
 8001344:	4b97      	ldr	r3, [pc, #604]	; (80015a4 <inSystem+0x2cc>)
 8001346:	4a98      	ldr	r2, [pc, #608]	; (80015a8 <inSystem+0x2d0>)
 8001348:	601a      	str	r2, [r3, #0]
	handlerADCTim.TIMx_Config.TIMx_interruptEnable = 1;
 800134a:	4b96      	ldr	r3, [pc, #600]	; (80015a4 <inSystem+0x2cc>)
 800134c:	2201      	movs	r2, #1
 800134e:	741a      	strb	r2, [r3, #16]
	handlerADCTim.TIMx_Config.TIMx_mode = BTIMER_MODE_UP;
 8001350:	4b94      	ldr	r3, [pc, #592]	; (80015a4 <inSystem+0x2cc>)
 8001352:	2200      	movs	r2, #0
 8001354:	711a      	strb	r2, [r3, #4]
	handlerADCTim.TIMx_Config.TIMx_period = 100;
 8001356:	4b93      	ldr	r3, [pc, #588]	; (80015a4 <inSystem+0x2cc>)
 8001358:	2264      	movs	r2, #100	; 0x64
 800135a:	60da      	str	r2, [r3, #12]
	handlerADCTim.TIMx_Config.TIMx_speed = BTIMER_SPEED_100us;
 800135c:	4b91      	ldr	r3, [pc, #580]	; (80015a4 <inSystem+0x2cc>)
 800135e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001362:	609a      	str	r2, [r3, #8]
	BasicTimer_Config(&handlerADCTim);
 8001364:	488f      	ldr	r0, [pc, #572]	; (80015a4 <inSystem+0x2cc>)
 8001366:	f000 ffc7 	bl	80022f8 <BasicTimer_Config>


	handlerADCTim.ptrTIMx = TIM4;
 800136a:	4b8e      	ldr	r3, [pc, #568]	; (80015a4 <inSystem+0x2cc>)
 800136c:	4a8e      	ldr	r2, [pc, #568]	; (80015a8 <inSystem+0x2d0>)
 800136e:	601a      	str	r2, [r3, #0]
	handlerADCTim.TIMx_Config.TIMx_interruptEnable = 1;
 8001370:	4b8c      	ldr	r3, [pc, #560]	; (80015a4 <inSystem+0x2cc>)
 8001372:	2201      	movs	r2, #1
 8001374:	741a      	strb	r2, [r3, #16]
	handlerADCTim.TIMx_Config.TIMx_mode = BTIMER_MODE_UP;
 8001376:	4b8b      	ldr	r3, [pc, #556]	; (80015a4 <inSystem+0x2cc>)
 8001378:	2200      	movs	r2, #0
 800137a:	711a      	strb	r2, [r3, #4]
	handlerADCTim.TIMx_Config.TIMx_period = 100;
 800137c:	4b89      	ldr	r3, [pc, #548]	; (80015a4 <inSystem+0x2cc>)
 800137e:	2264      	movs	r2, #100	; 0x64
 8001380:	60da      	str	r2, [r3, #12]
	handlerADCTim.TIMx_Config.TIMx_speed = BTIMER_SPEED_100us;
 8001382:	4b88      	ldr	r3, [pc, #544]	; (80015a4 <inSystem+0x2cc>)
 8001384:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001388:	609a      	str	r2, [r3, #8]



    handlerADCJoy.channelVector[0] = 0;
 800138a:	4b88      	ldr	r3, [pc, #544]	; (80015ac <inSystem+0x2d4>)
 800138c:	2200      	movs	r2, #0
 800138e:	721a      	strb	r2, [r3, #8]
    handlerADCJoy.channelVector[1] = 1;
 8001390:	4b86      	ldr	r3, [pc, #536]	; (80015ac <inSystem+0x2d4>)
 8001392:	2201      	movs	r2, #1
 8001394:	725a      	strb	r2, [r3, #9]
    handlerADCJoy.dataAlignment = ADC_ALIGNMENT_RIGHT;
 8001396:	4b85      	ldr	r3, [pc, #532]	; (80015ac <inSystem+0x2d4>)
 8001398:	2200      	movs	r2, #0
 800139a:	711a      	strb	r2, [r3, #4]
    handlerADCJoy.resolution = ADC_RESOLUTION_12_BIT;
 800139c:	4b83      	ldr	r3, [pc, #524]	; (80015ac <inSystem+0x2d4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	705a      	strb	r2, [r3, #1]
    handlerADCJoy.samplingPeriod = ADC_SAMPLING_PERIOD_28_CYCLES;
 80013a2:	4b82      	ldr	r3, [pc, #520]	; (80015ac <inSystem+0x2d4>)
 80013a4:	2202      	movs	r2, #2
 80013a6:	805a      	strh	r2, [r3, #2]
    ADC_ConfigMultichannel(&handlerADCJoy, 2);
 80013a8:	2102      	movs	r1, #2
 80013aa:	4880      	ldr	r0, [pc, #512]	; (80015ac <inSystem+0x2d4>)
 80013ac:	f000 fe58 	bl	8002060 <ADC_ConfigMultichannel>

    //Comunicacion Serial

    handlerPinTx.pGPIOx                             = GPIOA;
 80013b0:	4b7f      	ldr	r3, [pc, #508]	; (80015b0 <inSystem+0x2d8>)
 80013b2:	4a7a      	ldr	r2, [pc, #488]	; (800159c <inSystem+0x2c4>)
 80013b4:	601a      	str	r2, [r3, #0]
    handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80013b6:	4b7e      	ldr	r3, [pc, #504]	; (80015b0 <inSystem+0x2d8>)
 80013b8:	2207      	movs	r2, #7
 80013ba:	725a      	strb	r2, [r3, #9]
    handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80013bc:	4b7c      	ldr	r3, [pc, #496]	; (80015b0 <inSystem+0x2d8>)
 80013be:	2202      	movs	r2, #2
 80013c0:	715a      	strb	r2, [r3, #5]
    handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80013c2:	4b7b      	ldr	r3, [pc, #492]	; (80015b0 <inSystem+0x2d8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	721a      	strb	r2, [r3, #8]
    handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 80013c8:	4b79      	ldr	r3, [pc, #484]	; (80015b0 <inSystem+0x2d8>)
 80013ca:	2209      	movs	r2, #9
 80013cc:	711a      	strb	r2, [r3, #4]
    handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80013ce:	4b78      	ldr	r3, [pc, #480]	; (80015b0 <inSystem+0x2d8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	71da      	strb	r2, [r3, #7]
    handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80013d4:	4b76      	ldr	r3, [pc, #472]	; (80015b0 <inSystem+0x2d8>)
 80013d6:	2202      	movs	r2, #2
 80013d8:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 80013da:	4875      	ldr	r0, [pc, #468]	; (80015b0 <inSystem+0x2d8>)
 80013dc:	f001 f89e 	bl	800251c <GPIO_Config>


	handlerPinRx.pGPIOx                             = GPIOA;
 80013e0:	4b74      	ldr	r3, [pc, #464]	; (80015b4 <inSystem+0x2dc>)
 80013e2:	4a6e      	ldr	r2, [pc, #440]	; (800159c <inSystem+0x2c4>)
 80013e4:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80013e6:	4b73      	ldr	r3, [pc, #460]	; (80015b4 <inSystem+0x2dc>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80013ec:	4b71      	ldr	r3, [pc, #452]	; (80015b4 <inSystem+0x2dc>)
 80013ee:	2202      	movs	r2, #2
 80013f0:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80013f2:	4b70      	ldr	r3, [pc, #448]	; (80015b4 <inSystem+0x2dc>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 80013f8:	4b6e      	ldr	r3, [pc, #440]	; (80015b4 <inSystem+0x2dc>)
 80013fa:	220a      	movs	r2, #10
 80013fc:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80013fe:	4b6d      	ldr	r3, [pc, #436]	; (80015b4 <inSystem+0x2dc>)
 8001400:	2200      	movs	r2, #0
 8001402:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001404:	4b6b      	ldr	r3, [pc, #428]	; (80015b4 <inSystem+0x2dc>)
 8001406:	2202      	movs	r2, #2
 8001408:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 800140a:	486a      	ldr	r0, [pc, #424]	; (80015b4 <inSystem+0x2dc>)
 800140c:	f001 f886 	bl	800251c <GPIO_Config>

	handlerUSART1.ptrUSARTx                      = USART1;
 8001410:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <inSystem+0x2e0>)
 8001412:	4a6a      	ldr	r2, [pc, #424]	; (80015bc <inSystem+0x2e4>)
 8001414:	601a      	str	r2, [r3, #0]
	handlerUSART1.USART_Config.USART_baudrate    = USART_BAUDRATE_9600;//37,7222 de Mantiza
 8001416:	4b68      	ldr	r3, [pc, #416]	; (80015b8 <inSystem+0x2e0>)
 8001418:	2200      	movs	r2, #0
 800141a:	71da      	strb	r2, [r3, #7]
	handlerUSART1.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 800141c:	4b66      	ldr	r3, [pc, #408]	; (80015b8 <inSystem+0x2e0>)
 800141e:	2201      	movs	r2, #1
 8001420:	715a      	strb	r2, [r3, #5]
	handlerUSART1.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 8001422:	4b65      	ldr	r3, [pc, #404]	; (80015b8 <inSystem+0x2e0>)
 8001424:	2200      	movs	r2, #0
 8001426:	711a      	strb	r2, [r3, #4]
	handlerUSART1.USART_Config.USART_mode        = USART_MODE_RXTX;
 8001428:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <inSystem+0x2e0>)
 800142a:	2202      	movs	r2, #2
 800142c:	719a      	strb	r2, [r3, #6]
	handlerUSART1.USART_Config.USART_parity      = USART_PARITY_ODD;
 800142e:	4b62      	ldr	r3, [pc, #392]	; (80015b8 <inSystem+0x2e0>)
 8001430:	2201      	movs	r2, #1
 8001432:	725a      	strb	r2, [r3, #9]
	handlerUSART1.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8001434:	4b60      	ldr	r3, [pc, #384]	; (80015b8 <inSystem+0x2e0>)
 8001436:	2200      	movs	r2, #0
 8001438:	729a      	strb	r2, [r3, #10]
	handlerUSART1.USART_Config.USART_datasize    = USART_DATASIZE_9BIT;
 800143a:	4b5f      	ldr	r3, [pc, #380]	; (80015b8 <inSystem+0x2e0>)
 800143c:	2201      	movs	r2, #1
 800143e:	721a      	strb	r2, [r3, #8]
	handlerUSART1.USART_Config.USART_parityError = 0;
 8001440:	4b5d      	ldr	r3, [pc, #372]	; (80015b8 <inSystem+0x2e0>)
 8001442:	2200      	movs	r2, #0
 8001444:	72da      	strb	r2, [r3, #11]
	USART_Config(&handlerUSART1);
 8001446:	485c      	ldr	r0, [pc, #368]	; (80015b8 <inSystem+0x2e0>)
 8001448:	f002 fcc2 	bl	8003dd0 <USART_Config>


	//Configuracion de pines y timers para PWM


	handlerPinR.pGPIOx                             = GPIOC;
 800144c:	4b5c      	ldr	r3, [pc, #368]	; (80015c0 <inSystem+0x2e8>)
 800144e:	4a5d      	ldr	r2, [pc, #372]	; (80015c4 <inSystem+0x2ec>)
 8001450:	601a      	str	r2, [r3, #0]
	handlerPinR.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001452:	4b5b      	ldr	r3, [pc, #364]	; (80015c0 <inSystem+0x2e8>)
 8001454:	2202      	movs	r2, #2
 8001456:	725a      	strb	r2, [r3, #9]
	handlerPinR.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001458:	4b59      	ldr	r3, [pc, #356]	; (80015c0 <inSystem+0x2e8>)
 800145a:	2202      	movs	r2, #2
 800145c:	715a      	strb	r2, [r3, #5]
	handlerPinR.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800145e:	4b58      	ldr	r3, [pc, #352]	; (80015c0 <inSystem+0x2e8>)
 8001460:	2200      	movs	r2, #0
 8001462:	721a      	strb	r2, [r3, #8]
	handlerPinR.GPIO_PinConfig.GPIO_PinNumber      = PIN_7;
 8001464:	4b56      	ldr	r3, [pc, #344]	; (80015c0 <inSystem+0x2e8>)
 8001466:	2207      	movs	r2, #7
 8001468:	711a      	strb	r2, [r3, #4]
	handlerPinR.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800146a:	4b55      	ldr	r3, [pc, #340]	; (80015c0 <inSystem+0x2e8>)
 800146c:	2200      	movs	r2, #0
 800146e:	71da      	strb	r2, [r3, #7]
	handlerPinR.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001470:	4b53      	ldr	r3, [pc, #332]	; (80015c0 <inSystem+0x2e8>)
 8001472:	2202      	movs	r2, #2
 8001474:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinR);
 8001476:	4852      	ldr	r0, [pc, #328]	; (80015c0 <inSystem+0x2e8>)
 8001478:	f001 f850 	bl	800251c <GPIO_Config>


	handlerPinG.pGPIOx                             = GPIOC;
 800147c:	4b52      	ldr	r3, [pc, #328]	; (80015c8 <inSystem+0x2f0>)
 800147e:	4a51      	ldr	r2, [pc, #324]	; (80015c4 <inSystem+0x2ec>)
 8001480:	601a      	str	r2, [r3, #0]
	handlerPinG.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001482:	4b51      	ldr	r3, [pc, #324]	; (80015c8 <inSystem+0x2f0>)
 8001484:	2202      	movs	r2, #2
 8001486:	725a      	strb	r2, [r3, #9]
	handlerPinG.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001488:	4b4f      	ldr	r3, [pc, #316]	; (80015c8 <inSystem+0x2f0>)
 800148a:	2202      	movs	r2, #2
 800148c:	715a      	strb	r2, [r3, #5]
	handlerPinG.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800148e:	4b4e      	ldr	r3, [pc, #312]	; (80015c8 <inSystem+0x2f0>)
 8001490:	2200      	movs	r2, #0
 8001492:	721a      	strb	r2, [r3, #8]
	handlerPinG.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 8001494:	4b4c      	ldr	r3, [pc, #304]	; (80015c8 <inSystem+0x2f0>)
 8001496:	2208      	movs	r2, #8
 8001498:	711a      	strb	r2, [r3, #4]
	handlerPinG.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800149a:	4b4b      	ldr	r3, [pc, #300]	; (80015c8 <inSystem+0x2f0>)
 800149c:	2200      	movs	r2, #0
 800149e:	71da      	strb	r2, [r3, #7]
	handlerPinG.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80014a0:	4b49      	ldr	r3, [pc, #292]	; (80015c8 <inSystem+0x2f0>)
 80014a2:	2202      	movs	r2, #2
 80014a4:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinG);
 80014a6:	4848      	ldr	r0, [pc, #288]	; (80015c8 <inSystem+0x2f0>)
 80014a8:	f001 f838 	bl	800251c <GPIO_Config>


	handlerPinB.pGPIOx                             = GPIOC;
 80014ac:	4b47      	ldr	r3, [pc, #284]	; (80015cc <inSystem+0x2f4>)
 80014ae:	4a45      	ldr	r2, [pc, #276]	; (80015c4 <inSystem+0x2ec>)
 80014b0:	601a      	str	r2, [r3, #0]
	handlerPinB.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 80014b2:	4b46      	ldr	r3, [pc, #280]	; (80015cc <inSystem+0x2f4>)
 80014b4:	2202      	movs	r2, #2
 80014b6:	725a      	strb	r2, [r3, #9]
	handlerPinB.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80014b8:	4b44      	ldr	r3, [pc, #272]	; (80015cc <inSystem+0x2f4>)
 80014ba:	2202      	movs	r2, #2
 80014bc:	715a      	strb	r2, [r3, #5]
	handlerPinB.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80014be:	4b43      	ldr	r3, [pc, #268]	; (80015cc <inSystem+0x2f4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	721a      	strb	r2, [r3, #8]
	handlerPinB.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 80014c4:	4b41      	ldr	r3, [pc, #260]	; (80015cc <inSystem+0x2f4>)
 80014c6:	2209      	movs	r2, #9
 80014c8:	711a      	strb	r2, [r3, #4]
	handlerPinB.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80014ca:	4b40      	ldr	r3, [pc, #256]	; (80015cc <inSystem+0x2f4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	71da      	strb	r2, [r3, #7]
	handlerPinB.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80014d0:	4b3e      	ldr	r3, [pc, #248]	; (80015cc <inSystem+0x2f4>)
 80014d2:	2202      	movs	r2, #2
 80014d4:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinB);
 80014d6:	483d      	ldr	r0, [pc, #244]	; (80015cc <inSystem+0x2f4>)
 80014d8:	f001 f820 	bl	800251c <GPIO_Config>



	handlerPwmR.ptrTIMx           = TIM3;
 80014dc:	4b3c      	ldr	r3, [pc, #240]	; (80015d0 <inSystem+0x2f8>)
 80014de:	4a3d      	ldr	r2, [pc, #244]	; (80015d4 <inSystem+0x2fc>)
 80014e0:	601a      	str	r2, [r3, #0]
	handlerPwmR.config.channel    = PWM_CHANNEL_2;
 80014e2:	4b3b      	ldr	r3, [pc, #236]	; (80015d0 <inSystem+0x2f8>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	711a      	strb	r2, [r3, #4]
	handlerPwmR.config.duttyCicle = 100;
 80014e8:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <inSystem+0x2f8>)
 80014ea:	2264      	movs	r2, #100	; 0x64
 80014ec:	81da      	strh	r2, [r3, #14]
	handlerPwmR.config.periodo    = 100;
 80014ee:	4b38      	ldr	r3, [pc, #224]	; (80015d0 <inSystem+0x2f8>)
 80014f0:	2264      	movs	r2, #100	; 0x64
 80014f2:	819a      	strh	r2, [r3, #12]
	handlerPwmR.config.prescaler  = BTIMER_SPEED_100us;
 80014f4:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <inSystem+0x2f8>)
 80014f6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80014fa:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPwmR);
 80014fc:	4834      	ldr	r0, [pc, #208]	; (80015d0 <inSystem+0x2f8>)
 80014fe:	f001 ff79 	bl	80033f4 <pwm_Config>


	handlerPwmG.ptrTIMx           = TIM3;
 8001502:	4b35      	ldr	r3, [pc, #212]	; (80015d8 <inSystem+0x300>)
 8001504:	4a33      	ldr	r2, [pc, #204]	; (80015d4 <inSystem+0x2fc>)
 8001506:	601a      	str	r2, [r3, #0]
	handlerPwmG.config.channel    = PWM_CHANNEL_3;
 8001508:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <inSystem+0x300>)
 800150a:	2202      	movs	r2, #2
 800150c:	711a      	strb	r2, [r3, #4]
	handlerPwmG.config.duttyCicle = 100;
 800150e:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <inSystem+0x300>)
 8001510:	2264      	movs	r2, #100	; 0x64
 8001512:	81da      	strh	r2, [r3, #14]
	handlerPwmG.config.periodo    = 100;
 8001514:	4b30      	ldr	r3, [pc, #192]	; (80015d8 <inSystem+0x300>)
 8001516:	2264      	movs	r2, #100	; 0x64
 8001518:	819a      	strh	r2, [r3, #12]
	handlerPwmG.config.prescaler  = BTIMER_SPEED_100us;
 800151a:	4b2f      	ldr	r3, [pc, #188]	; (80015d8 <inSystem+0x300>)
 800151c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001520:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPwmG);
 8001522:	482d      	ldr	r0, [pc, #180]	; (80015d8 <inSystem+0x300>)
 8001524:	f001 ff66 	bl	80033f4 <pwm_Config>

	handlerPwmB.ptrTIMx           = TIM3;
 8001528:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <inSystem+0x304>)
 800152a:	4a2a      	ldr	r2, [pc, #168]	; (80015d4 <inSystem+0x2fc>)
 800152c:	601a      	str	r2, [r3, #0]
	handlerPwmB.config.channel    = PWM_CHANNEL_4;
 800152e:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <inSystem+0x304>)
 8001530:	2203      	movs	r2, #3
 8001532:	711a      	strb	r2, [r3, #4]
	handlerPwmB.config.duttyCicle = 100;
 8001534:	4b29      	ldr	r3, [pc, #164]	; (80015dc <inSystem+0x304>)
 8001536:	2264      	movs	r2, #100	; 0x64
 8001538:	81da      	strh	r2, [r3, #14]
	handlerPwmB.config.periodo    = 100;
 800153a:	4b28      	ldr	r3, [pc, #160]	; (80015dc <inSystem+0x304>)
 800153c:	2264      	movs	r2, #100	; 0x64
 800153e:	819a      	strh	r2, [r3, #12]
	handlerPwmB.config.prescaler  = BTIMER_SPEED_100us;
 8001540:	4b26      	ldr	r3, [pc, #152]	; (80015dc <inSystem+0x304>)
 8001542:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001546:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPwmB);
 8001548:	4824      	ldr	r0, [pc, #144]	; (80015dc <inSystem+0x304>)
 800154a:	f001 ff53 	bl	80033f4 <pwm_Config>


    //Configuracion del RTC
	handlerRTC.RTC_config.rtcDay = 8;
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <inSystem+0x308>)
 8001550:	2208      	movs	r2, #8
 8001552:	811a      	strh	r2, [r3, #8]
	handlerRTC.RTC_config.rtcHours = 0;
 8001554:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <inSystem+0x308>)
 8001556:	2200      	movs	r2, #0
 8001558:	729a      	strb	r2, [r3, #10]
	handlerRTC.RTC_config.rtcMinutes = 0;
 800155a:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <inSystem+0x308>)
 800155c:	2200      	movs	r2, #0
 800155e:	72da      	strb	r2, [r3, #11]
	handlerRTC.RTC_config.rtcMonth = 11;
 8001560:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <inSystem+0x308>)
 8001562:	220b      	movs	r2, #11
 8001564:	715a      	strb	r2, [r3, #5]
	handlerRTC.RTC_config.rtcSeconds =0;
 8001566:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <inSystem+0x308>)
 8001568:	2200      	movs	r2, #0
 800156a:	731a      	strb	r2, [r3, #12]
	handlerRTC.RTC_config.rtcWeekDay = THUESDAY;
 800156c:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <inSystem+0x308>)
 800156e:	2202      	movs	r2, #2
 8001570:	719a      	strb	r2, [r3, #6]
	handlerRTC.RTC_config.rtcYear= 22;
 8001572:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <inSystem+0x308>)
 8001574:	2216      	movs	r2, #22
 8001576:	711a      	strb	r2, [r3, #4]
	Rtc_Congif(&handlerRTC);
 8001578:	4819      	ldr	r0, [pc, #100]	; (80015e0 <inSystem+0x308>)
 800157a:	f002 f94b 	bl	8003814 <Rtc_Congif>

	//OLED display por comunicacion I2C

	handlerI2cSCL.pGPIOx                             = GPIOB;
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <inSystem+0x30c>)
 8001580:	4a19      	ldr	r2, [pc, #100]	; (80015e8 <inSystem+0x310>)
 8001582:	601a      	str	r2, [r3, #0]
	handlerI2cSCL.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <inSystem+0x30c>)
 8001586:	2204      	movs	r2, #4
 8001588:	725a      	strb	r2, [r3, #9]
	handlerI2cSCL.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <inSystem+0x30c>)
 800158c:	2202      	movs	r2, #2
 800158e:	715a      	strb	r2, [r3, #5]
	handlerI2cSCL.GPIO_PinConfig.GPIO_PinNumber      = PIN_6;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <inSystem+0x30c>)
 8001592:	2206      	movs	r2, #6
 8001594:	711a      	strb	r2, [r3, #4]
 8001596:	e029      	b.n	80015ec <inSystem+0x314>
 8001598:	2000024c 	.word	0x2000024c
 800159c:	40020000 	.word	0x40020000
 80015a0:	20000318 	.word	0x20000318
 80015a4:	2000032c 	.word	0x2000032c
 80015a8:	40000800 	.word	0x40000800
 80015ac:	200001f0 	.word	0x200001f0
 80015b0:	200001f8 	.word	0x200001f8
 80015b4:	20000204 	.word	0x20000204
 80015b8:	20000258 	.word	0x20000258
 80015bc:	40011000 	.word	0x40011000
 80015c0:	20000210 	.word	0x20000210
 80015c4:	40020800 	.word	0x40020800
 80015c8:	2000021c 	.word	0x2000021c
 80015cc:	20000228 	.word	0x20000228
 80015d0:	200002e8 	.word	0x200002e8
 80015d4:	40000400 	.word	0x40000400
 80015d8:	200002f8 	.word	0x200002f8
 80015dc:	20000308 	.word	0x20000308
 80015e0:	2000035c 	.word	0x2000035c
 80015e4:	20000234 	.word	0x20000234
 80015e8:	40020400 	.word	0x40020400
	handlerI2cSCL.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80015ec:	4b24      	ldr	r3, [pc, #144]	; (8001680 <inSystem+0x3a8>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	721a      	strb	r2, [r3, #8]
	handlerI2cSCL.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_PULLUP;
 80015f2:	4b23      	ldr	r3, [pc, #140]	; (8001680 <inSystem+0x3a8>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	71da      	strb	r2, [r3, #7]
	handlerI2cSCL.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80015f8:	4b21      	ldr	r3, [pc, #132]	; (8001680 <inSystem+0x3a8>)
 80015fa:	2202      	movs	r2, #2
 80015fc:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerI2cSCL);
 80015fe:	4820      	ldr	r0, [pc, #128]	; (8001680 <inSystem+0x3a8>)
 8001600:	f000 ff8c 	bl	800251c <GPIO_Config>

	handlerI2cSDA.pGPIOx                             = GPIOB;
 8001604:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <inSystem+0x3ac>)
 8001606:	4a20      	ldr	r2, [pc, #128]	; (8001688 <inSystem+0x3b0>)
 8001608:	601a      	str	r2, [r3, #0]
	handlerI2cSDA.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 800160a:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <inSystem+0x3ac>)
 800160c:	2204      	movs	r2, #4
 800160e:	725a      	strb	r2, [r3, #9]
	handlerI2cSDA.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001610:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <inSystem+0x3ac>)
 8001612:	2202      	movs	r2, #2
 8001614:	715a      	strb	r2, [r3, #5]
	handlerI2cSDA.GPIO_PinConfig.GPIO_PinNumber      = PIN_7;
 8001616:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <inSystem+0x3ac>)
 8001618:	2207      	movs	r2, #7
 800161a:	711a      	strb	r2, [r3, #4]
	handlerI2cSDA.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <inSystem+0x3ac>)
 800161e:	2201      	movs	r2, #1
 8001620:	721a      	strb	r2, [r3, #8]
	handlerI2cSDA.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_PULLUP;
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <inSystem+0x3ac>)
 8001624:	2201      	movs	r2, #1
 8001626:	71da      	strb	r2, [r3, #7]
	handlerI2cSDA.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <inSystem+0x3ac>)
 800162a:	2202      	movs	r2, #2
 800162c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerI2cSDA);
 800162e:	4815      	ldr	r0, [pc, #84]	; (8001684 <inSystem+0x3ac>)
 8001630:	f000 ff74 	bl	800251c <GPIO_Config>

	handlerI2C1.ptrI2Cx = I2C1;
 8001634:	4b15      	ldr	r3, [pc, #84]	; (800168c <inSystem+0x3b4>)
 8001636:	4a16      	ldr	r2, [pc, #88]	; (8001690 <inSystem+0x3b8>)
 8001638:	601a      	str	r2, [r3, #0]
	handlerI2C1.modeI2C = I2C_MODE_FM;
 800163a:	4b14      	ldr	r3, [pc, #80]	; (800168c <inSystem+0x3b4>)
 800163c:	2201      	movs	r2, #1
 800163e:	715a      	strb	r2, [r3, #5]
	handlerI2C1.slaveAddress = ADDRESS;
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <inSystem+0x3b4>)
 8001642:	223c      	movs	r2, #60	; 0x3c
 8001644:	711a      	strb	r2, [r3, #4]
	i2c_config(&handlerI2C1);
 8001646:	4811      	ldr	r0, [pc, #68]	; (800168c <inSystem+0x3b4>)
 8001648:	f001 f8f4 	bl	8002834 <i2c_config>

	//Timer 5 para interrupciones del comando para cronometro



	handlerDateTim.ptrTIMx = TIM5;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <inSystem+0x3bc>)
 800164e:	4a12      	ldr	r2, [pc, #72]	; (8001698 <inSystem+0x3c0>)
 8001650:	601a      	str	r2, [r3, #0]
	handlerDateTim.TIMx_Config.TIMx_interruptEnable = 1;
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <inSystem+0x3bc>)
 8001654:	2201      	movs	r2, #1
 8001656:	741a      	strb	r2, [r3, #16]
	handlerDateTim.TIMx_Config.TIMx_mode = BTIMER_MODE_UP;
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <inSystem+0x3bc>)
 800165a:	2200      	movs	r2, #0
 800165c:	711a      	strb	r2, [r3, #4]
	handlerDateTim.TIMx_Config.TIMx_period = 10000;
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <inSystem+0x3bc>)
 8001660:	f242 7210 	movw	r2, #10000	; 0x2710
 8001664:	60da      	str	r2, [r3, #12]
	handlerDateTim.TIMx_Config.TIMx_speed = BTIMER_SPEED_100us;
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <inSystem+0x3bc>)
 8001668:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800166c:	609a      	str	r2, [r3, #8]
	BasicTimer_Config(&handlerDateTim);
 800166e:	4809      	ldr	r0, [pc, #36]	; (8001694 <inSystem+0x3bc>)
 8001670:	f000 fe42 	bl	80022f8 <BasicTimer_Config>

	startTimer(&handlerDateTim);
 8001674:	4807      	ldr	r0, [pc, #28]	; (8001694 <inSystem+0x3bc>)
 8001676:	f000 ff2f 	bl	80024d8 <startTimer>




}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000234 	.word	0x20000234
 8001684:	20000240 	.word	0x20000240
 8001688:	40020400 	.word	0x40020400
 800168c:	20000354 	.word	0x20000354
 8001690:	40005400 	.word	0x40005400
 8001694:	20000340 	.word	0x20000340
 8001698:	40000c00 	.word	0x40000c00

0800169c <BasicTimer2_Callback>:


// Callback para el blynky y el comando Scroll UP y DOWN
void BasicTimer2_Callback(void){
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerLEDPin);
 80016a0:	480a      	ldr	r0, [pc, #40]	; (80016cc <BasicTimer2_Callback+0x30>)
 80016a2:	f001 f8ad 	bl	8002800 <GPIOxTooglePin>
	if (!(setScrollOUT)){
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <BasicTimer2_Callback+0x34>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10b      	bne.n	80016c6 <BasicTimer2_Callback+0x2a>

		if (setScrollIN){
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <BasicTimer2_Callback+0x38>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <BasicTimer2_Callback+0x22>
			setScrollUP = SET;
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <BasicTimer2_Callback+0x3c>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
			setScrollDOWN = SET;
		}
	}else{
		__NOP();
	}
}
 80016bc:	e004      	b.n	80016c8 <BasicTimer2_Callback+0x2c>
			setScrollDOWN = SET;
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <BasicTimer2_Callback+0x40>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	701a      	strb	r2, [r3, #0]
}
 80016c4:	e000      	b.n	80016c8 <BasicTimer2_Callback+0x2c>
		__NOP();
 80016c6:	bf00      	nop
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	2000024c 	.word	0x2000024c
 80016d0:	20000394 	.word	0x20000394
 80016d4:	20000393 	.word	0x20000393
 80016d8:	20000395 	.word	0x20000395
 80016dc:	20000396 	.word	0x20000396

080016e0 <BasicTimer5_Callback>:

//Callback para el comando del cronometro

void BasicTimer5_Callback(void){
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
	flagDate = SET;
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <BasicTimer5_Callback+0x14>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	701a      	strb	r2, [r3, #0]
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	2000038f 	.word	0x2000038f

080016f8 <adcComplete_Callback>:

//Callback para interrupciones posterior a la multiconversion

void adcComplete_Callback(void){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	counterADC++;
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <adcComplete_Callback+0x60>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	3301      	adds	r3, #1
 8001702:	b2da      	uxtb	r2, r3
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <adcComplete_Callback+0x60>)
 8001706:	701a      	strb	r2, [r3, #0]
	if ((counterADC % 2) != 0){
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <adcComplete_Callback+0x60>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d006      	beq.n	8001724 <adcComplete_Callback+0x2c>
		adcData[0] = getADC();
 8001716:	f000 fbd3 	bl	8001ec0 <getADC>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <adcComplete_Callback+0x64>)
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e00c      	b.n	800173e <adcComplete_Callback+0x46>
	}else if ((counterADC % 2) == 0){
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <adcComplete_Callback+0x60>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d105      	bne.n	800173e <adcComplete_Callback+0x46>
		adcData[1] = getADC();
 8001732:	f000 fbc5 	bl	8001ec0 <getADC>
 8001736:	4603      	mov	r3, r0
 8001738:	461a      	mov	r2, r3
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <adcComplete_Callback+0x64>)
 800173c:	605a      	str	r2, [r3, #4]
	}

	if ((counterADC % 2) == 0){
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <adcComplete_Callback+0x60>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <adcComplete_Callback+0x5a>
		adcFlag = SET;
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <adcComplete_Callback+0x68>)
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
	}


}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000371 	.word	0x20000371
 800175c:	2000047c 	.word	0x2000047c
 8001760:	2000036c 	.word	0x2000036c

08001764 <usart1Rx_Callback>:

//Calback para recepciones por coolterm

void usart1Rx_Callback(void){
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8001768:	f002 fd14 	bl	8004194 <getRxData>
 800176c:	4603      	mov	r3, r0
 800176e:	461a      	mov	r2, r3
 8001770:	4b01      	ldr	r3, [pc, #4]	; (8001778 <usart1Rx_Callback+0x14>)
 8001772:	701a      	strb	r2, [r3, #0]
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	2000036d 	.word	0x2000036d

0800177c <BasicTimer4_Callback>:

//Callback para comando de setear conversion ADC y LED RGB

void BasicTimer4_Callback(void){
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	startSingleADC();
 8001780:	f000 fb84 	bl	8001e8c <startSingleADC>
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <parseCommands>:


//Funcion ejecutadora de comandos

void parseCommands(char *stringVector){
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af04      	add	r7, sp, #16
 800178e:	6078      	str	r0, [r7, #4]

	sscanf(stringVector, "%s %u %u %u %s", cmd ,&firstParameter, &secondParameter, &thirdParameter, userMsg);
 8001790:	4ba3      	ldr	r3, [pc, #652]	; (8001a20 <parseCommands+0x298>)
 8001792:	9302      	str	r3, [sp, #8]
 8001794:	4ba3      	ldr	r3, [pc, #652]	; (8001a24 <parseCommands+0x29c>)
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	4ba3      	ldr	r3, [pc, #652]	; (8001a28 <parseCommands+0x2a0>)
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	4ba3      	ldr	r3, [pc, #652]	; (8001a2c <parseCommands+0x2a4>)
 800179e:	4aa4      	ldr	r2, [pc, #656]	; (8001a30 <parseCommands+0x2a8>)
 80017a0:	49a4      	ldr	r1, [pc, #656]	; (8001a34 <parseCommands+0x2ac>)
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f003 fc64 	bl	8005070 <siscanf>
	com1 = strcmp(cmd, "startLED") ;
 80017a8:	49a3      	ldr	r1, [pc, #652]	; (8001a38 <parseCommands+0x2b0>)
 80017aa:	48a1      	ldr	r0, [pc, #644]	; (8001a30 <parseCommands+0x2a8>)
 80017ac:	f7fe fd18 	bl	80001e0 <strcmp>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	4ba1      	ldr	r3, [pc, #644]	; (8001a3c <parseCommands+0x2b4>)
 80017b6:	701a      	strb	r2, [r3, #0]
	com2 = strcmp(cmd, "stopLED");
 80017b8:	49a1      	ldr	r1, [pc, #644]	; (8001a40 <parseCommands+0x2b8>)
 80017ba:	489d      	ldr	r0, [pc, #628]	; (8001a30 <parseCommands+0x2a8>)
 80017bc:	f7fe fd10 	bl	80001e0 <strcmp>
 80017c0:	4603      	mov	r3, r0
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	4b9f      	ldr	r3, [pc, #636]	; (8001a44 <parseCommands+0x2bc>)
 80017c6:	701a      	strb	r2, [r3, #0]
	com3 = strcmp(cmd, "setLED_period");
 80017c8:	499f      	ldr	r1, [pc, #636]	; (8001a48 <parseCommands+0x2c0>)
 80017ca:	4899      	ldr	r0, [pc, #612]	; (8001a30 <parseCommands+0x2a8>)
 80017cc:	f7fe fd08 	bl	80001e0 <strcmp>
 80017d0:	4603      	mov	r3, r0
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b9d      	ldr	r3, [pc, #628]	; (8001a4c <parseCommands+0x2c4>)
 80017d6:	701a      	strb	r2, [r3, #0]
	com4 = strcmp(cmd, "resetLED_period");
 80017d8:	499d      	ldr	r1, [pc, #628]	; (8001a50 <parseCommands+0x2c8>)
 80017da:	4895      	ldr	r0, [pc, #596]	; (8001a30 <parseCommands+0x2a8>)
 80017dc:	f7fe fd00 	bl	80001e0 <strcmp>
 80017e0:	4603      	mov	r3, r0
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	4b9b      	ldr	r3, [pc, #620]	; (8001a54 <parseCommands+0x2cc>)
 80017e6:	701a      	strb	r2, [r3, #0]
	com5 = strcmp(cmd, "start_display");
 80017e8:	499b      	ldr	r1, [pc, #620]	; (8001a58 <parseCommands+0x2d0>)
 80017ea:	4891      	ldr	r0, [pc, #580]	; (8001a30 <parseCommands+0x2a8>)
 80017ec:	f7fe fcf8 	bl	80001e0 <strcmp>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b99      	ldr	r3, [pc, #612]	; (8001a5c <parseCommands+0x2d4>)
 80017f6:	701a      	strb	r2, [r3, #0]
	com6 = strcmp(cmd, "stop_display");
 80017f8:	4999      	ldr	r1, [pc, #612]	; (8001a60 <parseCommands+0x2d8>)
 80017fa:	488d      	ldr	r0, [pc, #564]	; (8001a30 <parseCommands+0x2a8>)
 80017fc:	f7fe fcf0 	bl	80001e0 <strcmp>
 8001800:	4603      	mov	r3, r0
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b97      	ldr	r3, [pc, #604]	; (8001a64 <parseCommands+0x2dc>)
 8001806:	701a      	strb	r2, [r3, #0]
	com7 = strcmp(cmd, "print_msg");
 8001808:	4997      	ldr	r1, [pc, #604]	; (8001a68 <parseCommands+0x2e0>)
 800180a:	4889      	ldr	r0, [pc, #548]	; (8001a30 <parseCommands+0x2a8>)
 800180c:	f7fe fce8 	bl	80001e0 <strcmp>
 8001810:	4603      	mov	r3, r0
 8001812:	b2da      	uxtb	r2, r3
 8001814:	4b95      	ldr	r3, [pc, #596]	; (8001a6c <parseCommands+0x2e4>)
 8001816:	701a      	strb	r2, [r3, #0]
	com8 = strcmp(cmd, "print_date");
 8001818:	4995      	ldr	r1, [pc, #596]	; (8001a70 <parseCommands+0x2e8>)
 800181a:	4885      	ldr	r0, [pc, #532]	; (8001a30 <parseCommands+0x2a8>)
 800181c:	f7fe fce0 	bl	80001e0 <strcmp>
 8001820:	4603      	mov	r3, r0
 8001822:	b2da      	uxtb	r2, r3
 8001824:	4b93      	ldr	r3, [pc, #588]	; (8001a74 <parseCommands+0x2ec>)
 8001826:	701a      	strb	r2, [r3, #0]
	com9 = strcmp(cmd, "set_cronometer");
 8001828:	4993      	ldr	r1, [pc, #588]	; (8001a78 <parseCommands+0x2f0>)
 800182a:	4881      	ldr	r0, [pc, #516]	; (8001a30 <parseCommands+0x2a8>)
 800182c:	f7fe fcd8 	bl	80001e0 <strcmp>
 8001830:	4603      	mov	r3, r0
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4b91      	ldr	r3, [pc, #580]	; (8001a7c <parseCommands+0x2f4>)
 8001836:	701a      	strb	r2, [r3, #0]
	com10 = strcmp(cmd, "scroll");
 8001838:	4991      	ldr	r1, [pc, #580]	; (8001a80 <parseCommands+0x2f8>)
 800183a:	487d      	ldr	r0, [pc, #500]	; (8001a30 <parseCommands+0x2a8>)
 800183c:	f7fe fcd0 	bl	80001e0 <strcmp>
 8001840:	4603      	mov	r3, r0
 8001842:	b2da      	uxtb	r2, r3
 8001844:	4b8f      	ldr	r3, [pc, #572]	; (8001a84 <parseCommands+0x2fc>)
 8001846:	701a      	strb	r2, [r3, #0]
	com11 = strcmp(cmd, "clear_dysplay");
 8001848:	498f      	ldr	r1, [pc, #572]	; (8001a88 <parseCommands+0x300>)
 800184a:	4879      	ldr	r0, [pc, #484]	; (8001a30 <parseCommands+0x2a8>)
 800184c:	f7fe fcc8 	bl	80001e0 <strcmp>
 8001850:	4603      	mov	r3, r0
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b8d      	ldr	r3, [pc, #564]	; (8001a8c <parseCommands+0x304>)
 8001856:	701a      	strb	r2, [r3, #0]



	if (strcmp(cmd, "help") == 0){
 8001858:	498d      	ldr	r1, [pc, #564]	; (8001a90 <parseCommands+0x308>)
 800185a:	4875      	ldr	r0, [pc, #468]	; (8001a30 <parseCommands+0x2a8>)
 800185c:	f7fe fcc0 	bl	80001e0 <strcmp>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d130      	bne.n	80018c8 <parseCommands+0x140>
		writeMsg(&handlerUSART1, "HELP MENU CMD : \n");
 8001866:	498b      	ldr	r1, [pc, #556]	; (8001a94 <parseCommands+0x30c>)
 8001868:	488b      	ldr	r0, [pc, #556]	; (8001a98 <parseCommands+0x310>)
 800186a:	f002 fc6d 	bl	8004148 <writeMsg>
		writeMsg(&handlerUSART1, "1)  startLED \n");
 800186e:	498b      	ldr	r1, [pc, #556]	; (8001a9c <parseCommands+0x314>)
 8001870:	4889      	ldr	r0, [pc, #548]	; (8001a98 <parseCommands+0x310>)
 8001872:	f002 fc69 	bl	8004148 <writeMsg>
		writeMsg(&handlerUSART1, "2)  stopLED \n");
 8001876:	498a      	ldr	r1, [pc, #552]	; (8001aa0 <parseCommands+0x318>)
 8001878:	4887      	ldr	r0, [pc, #540]	; (8001a98 <parseCommands+0x310>)
 800187a:	f002 fc65 	bl	8004148 <writeMsg>
		writeMsg(&handlerUSART1, "3)  setLED_period #RnewPeriod #GnewPeriod #BnewPeriod \n");
 800187e:	4989      	ldr	r1, [pc, #548]	; (8001aa4 <parseCommands+0x31c>)
 8001880:	4885      	ldr	r0, [pc, #532]	; (8001a98 <parseCommands+0x310>)
 8001882:	f002 fc61 	bl	8004148 <writeMsg>
 		writeMsg(&handlerUSART1, "4)  resetLED_period \n");
 8001886:	4988      	ldr	r1, [pc, #544]	; (8001aa8 <parseCommands+0x320>)
 8001888:	4883      	ldr	r0, [pc, #524]	; (8001a98 <parseCommands+0x310>)
 800188a:	f002 fc5d 	bl	8004148 <writeMsg>
		writeMsg(&handlerUSART1, "5)  start_display \n");
 800188e:	4987      	ldr	r1, [pc, #540]	; (8001aac <parseCommands+0x324>)
 8001890:	4881      	ldr	r0, [pc, #516]	; (8001a98 <parseCommands+0x310>)
 8001892:	f002 fc59 	bl	8004148 <writeMsg>
		writeMsg(&handlerUSART1, "6)  stop_display \n");
 8001896:	4986      	ldr	r1, [pc, #536]	; (8001ab0 <parseCommands+0x328>)
 8001898:	487f      	ldr	r0, [pc, #508]	; (8001a98 <parseCommands+0x310>)
 800189a:	f002 fc55 	bl	8004148 <writeMsg>
		writeMsg(&handlerUSART1, "7)  print_msg WRITE_MSG_WITH_CAPITAL_LETTERS \n");                                          //7
 800189e:	4985      	ldr	r1, [pc, #532]	; (8001ab4 <parseCommands+0x32c>)
 80018a0:	487d      	ldr	r0, [pc, #500]	; (8001a98 <parseCommands+0x310>)
 80018a2:	f002 fc51 	bl	8004148 <writeMsg>
		writeMsg(&handlerUSART1, "8)  print_date \n");
 80018a6:	4984      	ldr	r1, [pc, #528]	; (8001ab8 <parseCommands+0x330>)
 80018a8:	487b      	ldr	r0, [pc, #492]	; (8001a98 <parseCommands+0x310>)
 80018aa:	f002 fc4d 	bl	8004148 <writeMsg>
		writeMsg(&handlerUSART1, "9)  set_cronometer #hours #minutes #seconds \n");
 80018ae:	4983      	ldr	r1, [pc, #524]	; (8001abc <parseCommands+0x334>)
 80018b0:	4879      	ldr	r0, [pc, #484]	; (8001a98 <parseCommands+0x310>)
 80018b2:	f002 fc49 	bl	8004148 <writeMsg>
		writeMsg(&handlerUSART1, "10) scroll #1=UP or 0=DOWN \n");
 80018b6:	4982      	ldr	r1, [pc, #520]	; (8001ac0 <parseCommands+0x338>)
 80018b8:	4877      	ldr	r0, [pc, #476]	; (8001a98 <parseCommands+0x310>)
 80018ba:	f002 fc45 	bl	8004148 <writeMsg>
		writeMsg(&handlerUSART1, "11) clear_dysplay \n");
 80018be:	4981      	ldr	r1, [pc, #516]	; (8001ac4 <parseCommands+0x33c>)
 80018c0:	4875      	ldr	r0, [pc, #468]	; (8001a98 <parseCommands+0x310>)
 80018c2:	f002 fc41 	bl	8004148 <writeMsg>
	}
	else{
		writeMsg(&handlerUSART1, "WRONG CMD, WRITE IT AGAING \n");
	}

}
 80018c6:	e18c      	b.n	8001be2 <parseCommands+0x45a>
	else if (com1 == 0){
 80018c8:	4b5c      	ldr	r3, [pc, #368]	; (8001a3c <parseCommands+0x2b4>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10f      	bne.n	80018f0 <parseCommands+0x168>
		startTimer(&handlerADCTim);
 80018d0:	487d      	ldr	r0, [pc, #500]	; (8001ac8 <parseCommands+0x340>)
 80018d2:	f000 fe01 	bl	80024d8 <startTimer>
		startPwmSignal(&handlerPwmR);
 80018d6:	487d      	ldr	r0, [pc, #500]	; (8001acc <parseCommands+0x344>)
 80018d8:	f001 fe62 	bl	80035a0 <startPwmSignal>
		startPwmSignal(&handlerPwmG);
 80018dc:	487c      	ldr	r0, [pc, #496]	; (8001ad0 <parseCommands+0x348>)
 80018de:	f001 fe5f 	bl	80035a0 <startPwmSignal>
		startPwmSignal(&handlerPwmB);
 80018e2:	487c      	ldr	r0, [pc, #496]	; (8001ad4 <parseCommands+0x34c>)
 80018e4:	f001 fe5c 	bl	80035a0 <startPwmSignal>
		setPWM = SET;
 80018e8:	4b7b      	ldr	r3, [pc, #492]	; (8001ad8 <parseCommands+0x350>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
}
 80018ee:	e178      	b.n	8001be2 <parseCommands+0x45a>
	else if (com2  == 0){
 80018f0:	4b54      	ldr	r3, [pc, #336]	; (8001a44 <parseCommands+0x2bc>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10f      	bne.n	8001918 <parseCommands+0x190>
		stopTimer(&handlerADCTim);
 80018f8:	4873      	ldr	r0, [pc, #460]	; (8001ac8 <parseCommands+0x340>)
 80018fa:	f000 fdfe 	bl	80024fa <stopTimer>
		stopPwmSignal(&handlerPwmR);
 80018fe:	4873      	ldr	r0, [pc, #460]	; (8001acc <parseCommands+0x344>)
 8001900:	f001 fe61 	bl	80035c6 <stopPwmSignal>
		stopPwmSignal(&handlerPwmG);
 8001904:	4872      	ldr	r0, [pc, #456]	; (8001ad0 <parseCommands+0x348>)
 8001906:	f001 fe5e 	bl	80035c6 <stopPwmSignal>
		stopPwmSignal(&handlerPwmB);
 800190a:	4872      	ldr	r0, [pc, #456]	; (8001ad4 <parseCommands+0x34c>)
 800190c:	f001 fe5b 	bl	80035c6 <stopPwmSignal>
		setPWM = RESET;
 8001910:	4b71      	ldr	r3, [pc, #452]	; (8001ad8 <parseCommands+0x350>)
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
}
 8001916:	e164      	b.n	8001be2 <parseCommands+0x45a>
	else if (com3 == 0){
 8001918:	4b4c      	ldr	r3, [pc, #304]	; (8001a4c <parseCommands+0x2c4>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d11e      	bne.n	800195e <parseCommands+0x1d6>
		if (setPWM){
 8001920:	4b6d      	ldr	r3, [pc, #436]	; (8001ad8 <parseCommands+0x350>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d015      	beq.n	8001954 <parseCommands+0x1cc>
			updateFrequency(&handlerPwmR, firstParameter);
 8001928:	4b40      	ldr	r3, [pc, #256]	; (8001a2c <parseCommands+0x2a4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	b29b      	uxth	r3, r3
 800192e:	4619      	mov	r1, r3
 8001930:	4866      	ldr	r0, [pc, #408]	; (8001acc <parseCommands+0x344>)
 8001932:	f001 feac 	bl	800368e <updateFrequency>
			updateFrequency(&handlerPwmG, secondParameter);
 8001936:	4b3c      	ldr	r3, [pc, #240]	; (8001a28 <parseCommands+0x2a0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	b29b      	uxth	r3, r3
 800193c:	4619      	mov	r1, r3
 800193e:	4864      	ldr	r0, [pc, #400]	; (8001ad0 <parseCommands+0x348>)
 8001940:	f001 fea5 	bl	800368e <updateFrequency>
			updateFrequency(&handlerPwmB, thirdParameter);
 8001944:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <parseCommands+0x29c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	4619      	mov	r1, r3
 800194c:	4861      	ldr	r0, [pc, #388]	; (8001ad4 <parseCommands+0x34c>)
 800194e:	f001 fe9e 	bl	800368e <updateFrequency>
}
 8001952:	e146      	b.n	8001be2 <parseCommands+0x45a>
			writeMsg(&handlerUSART1, "Turn on the LED first \n");
 8001954:	4961      	ldr	r1, [pc, #388]	; (8001adc <parseCommands+0x354>)
 8001956:	4850      	ldr	r0, [pc, #320]	; (8001a98 <parseCommands+0x310>)
 8001958:	f002 fbf6 	bl	8004148 <writeMsg>
}
 800195c:	e141      	b.n	8001be2 <parseCommands+0x45a>
	else if (com4 == 0){
 800195e:	4b3d      	ldr	r3, [pc, #244]	; (8001a54 <parseCommands+0x2cc>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10c      	bne.n	8001980 <parseCommands+0x1f8>
			updateFrequency(&handlerPwmR, 10);
 8001966:	210a      	movs	r1, #10
 8001968:	4858      	ldr	r0, [pc, #352]	; (8001acc <parseCommands+0x344>)
 800196a:	f001 fe90 	bl	800368e <updateFrequency>
			updateFrequency(&handlerPwmG, 10);
 800196e:	210a      	movs	r1, #10
 8001970:	4857      	ldr	r0, [pc, #348]	; (8001ad0 <parseCommands+0x348>)
 8001972:	f001 fe8c 	bl	800368e <updateFrequency>
			updateFrequency(&handlerPwmB, 10);
 8001976:	210a      	movs	r1, #10
 8001978:	4856      	ldr	r0, [pc, #344]	; (8001ad4 <parseCommands+0x34c>)
 800197a:	f001 fe88 	bl	800368e <updateFrequency>
}
 800197e:	e130      	b.n	8001be2 <parseCommands+0x45a>
	else if (com5 == 0){
 8001980:	4b36      	ldr	r3, [pc, #216]	; (8001a5c <parseCommands+0x2d4>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d108      	bne.n	800199a <parseCommands+0x212>
		startOLED(&handlerI2C1);
 8001988:	4855      	ldr	r0, [pc, #340]	; (8001ae0 <parseCommands+0x358>)
 800198a:	f001 f8c7 	bl	8002b1c <startOLED>
		drawMSG(&handlerI2C1, "BIENVENIDO!", 11);
 800198e:	220b      	movs	r2, #11
 8001990:	4954      	ldr	r1, [pc, #336]	; (8001ae4 <parseCommands+0x35c>)
 8001992:	4853      	ldr	r0, [pc, #332]	; (8001ae0 <parseCommands+0x358>)
 8001994:	f001 fc64 	bl	8003260 <drawMSG>
}
 8001998:	e123      	b.n	8001be2 <parseCommands+0x45a>
	else if (com6 == 0){
 800199a:	4b32      	ldr	r3, [pc, #200]	; (8001a64 <parseCommands+0x2dc>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d103      	bne.n	80019aa <parseCommands+0x222>
		stopOLED(&handlerI2C1);
 80019a2:	484f      	ldr	r0, [pc, #316]	; (8001ae0 <parseCommands+0x358>)
 80019a4:	f001 f8c6 	bl	8002b34 <stopOLED>
}
 80019a8:	e11b      	b.n	8001be2 <parseCommands+0x45a>
	else if (com7 == 0){
 80019aa:	4b30      	ldr	r3, [pc, #192]	; (8001a6c <parseCommands+0x2e4>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f040 809c 	bne.w	8001aec <parseCommands+0x364>
		uint8_t i =0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	73bb      	strb	r3, [r7, #14]
		uint8_t flag = RESET;
 80019b8:	2300      	movs	r3, #0
 80019ba:	73fb      	strb	r3, [r7, #15]
		while (*(userMsg+i)!='\0'){
 80019bc:	e019      	b.n	80019f2 <parseCommands+0x26a>
			if ((*(userMsg+i) <= 122) & (*(userMsg+i) >= 97)){
 80019be:	7bbb      	ldrb	r3, [r7, #14]
 80019c0:	4a17      	ldr	r2, [pc, #92]	; (8001a20 <parseCommands+0x298>)
 80019c2:	4413      	add	r3, r2
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b7a      	cmp	r3, #122	; 0x7a
 80019c8:	bf94      	ite	ls
 80019ca:	2301      	movls	r3, #1
 80019cc:	2300      	movhi	r3, #0
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	7bbb      	ldrb	r3, [r7, #14]
 80019d2:	4913      	ldr	r1, [pc, #76]	; (8001a20 <parseCommands+0x298>)
 80019d4:	440b      	add	r3, r1
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b60      	cmp	r3, #96	; 0x60
 80019da:	bf8c      	ite	hi
 80019dc:	2301      	movhi	r3, #1
 80019de:	2300      	movls	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	4013      	ands	r3, r2
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d002      	beq.n	80019f0 <parseCommands+0x268>
				flag = SET;
 80019ea:	2301      	movs	r3, #1
 80019ec:	73fb      	strb	r3, [r7, #15]
				break;
 80019ee:	e006      	b.n	80019fe <parseCommands+0x276>
				__NOP();
 80019f0:	bf00      	nop
		while (*(userMsg+i)!='\0'){
 80019f2:	7bbb      	ldrb	r3, [r7, #14]
 80019f4:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <parseCommands+0x298>)
 80019f6:	4413      	add	r3, r2
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1df      	bne.n	80019be <parseCommands+0x236>
		if (flag){
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <parseCommands+0x286>
			writeMsg(&handlerUSART1, "REWRITE MESSAGE IN CAPITAL LETTER \n");
 8001a04:	4938      	ldr	r1, [pc, #224]	; (8001ae8 <parseCommands+0x360>)
 8001a06:	4824      	ldr	r0, [pc, #144]	; (8001a98 <parseCommands+0x310>)
 8001a08:	f002 fb9e 	bl	8004148 <writeMsg>
}
 8001a0c:	e0e9      	b.n	8001be2 <parseCommands+0x45a>
			drawMSG(&handlerI2C1, userMsg, sizeof(userMsg));
 8001a0e:	2240      	movs	r2, #64	; 0x40
 8001a10:	4903      	ldr	r1, [pc, #12]	; (8001a20 <parseCommands+0x298>)
 8001a12:	4833      	ldr	r0, [pc, #204]	; (8001ae0 <parseCommands+0x358>)
 8001a14:	f001 fc24 	bl	8003260 <drawMSG>
			flag = RESET;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]
}
 8001a1c:	e0e1      	b.n	8001be2 <parseCommands+0x45a>
 8001a1e:	bf00      	nop
 8001a20:	2000043c 	.word	0x2000043c
 8001a24:	200003e4 	.word	0x200003e4
 8001a28:	200003e0 	.word	0x200003e0
 8001a2c:	200003e8 	.word	0x200003e8
 8001a30:	20000484 	.word	0x20000484
 8001a34:	0800988c 	.word	0x0800988c
 8001a38:	0800989c 	.word	0x0800989c
 8001a3c:	20000384 	.word	0x20000384
 8001a40:	080098a8 	.word	0x080098a8
 8001a44:	20000385 	.word	0x20000385
 8001a48:	080098b0 	.word	0x080098b0
 8001a4c:	20000386 	.word	0x20000386
 8001a50:	080098c0 	.word	0x080098c0
 8001a54:	20000387 	.word	0x20000387
 8001a58:	080098d0 	.word	0x080098d0
 8001a5c:	20000388 	.word	0x20000388
 8001a60:	080098e0 	.word	0x080098e0
 8001a64:	20000389 	.word	0x20000389
 8001a68:	080098f0 	.word	0x080098f0
 8001a6c:	2000038a 	.word	0x2000038a
 8001a70:	080098fc 	.word	0x080098fc
 8001a74:	2000038b 	.word	0x2000038b
 8001a78:	08009908 	.word	0x08009908
 8001a7c:	2000038c 	.word	0x2000038c
 8001a80:	08009918 	.word	0x08009918
 8001a84:	2000038d 	.word	0x2000038d
 8001a88:	08009920 	.word	0x08009920
 8001a8c:	2000038e 	.word	0x2000038e
 8001a90:	08009930 	.word	0x08009930
 8001a94:	08009938 	.word	0x08009938
 8001a98:	20000258 	.word	0x20000258
 8001a9c:	0800994c 	.word	0x0800994c
 8001aa0:	0800995c 	.word	0x0800995c
 8001aa4:	0800996c 	.word	0x0800996c
 8001aa8:	080099a4 	.word	0x080099a4
 8001aac:	080099bc 	.word	0x080099bc
 8001ab0:	080099d0 	.word	0x080099d0
 8001ab4:	080099e4 	.word	0x080099e4
 8001ab8:	08009a14 	.word	0x08009a14
 8001abc:	08009a28 	.word	0x08009a28
 8001ac0:	08009a58 	.word	0x08009a58
 8001ac4:	08009a78 	.word	0x08009a78
 8001ac8:	2000032c 	.word	0x2000032c
 8001acc:	200002e8 	.word	0x200002e8
 8001ad0:	200002f8 	.word	0x200002f8
 8001ad4:	20000308 	.word	0x20000308
 8001ad8:	20000372 	.word	0x20000372
 8001adc:	08009a8c 	.word	0x08009a8c
 8001ae0:	20000354 	.word	0x20000354
 8001ae4:	08009aa4 	.word	0x08009aa4
 8001ae8:	08009ab0 	.word	0x08009ab0
	else if (com8 == 0){
 8001aec:	4b3f      	ldr	r3, [pc, #252]	; (8001bec <parseCommands+0x464>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d134      	bne.n	8001b5e <parseCommands+0x3d6>
		handlerRTC.RTC_config.rtcDay = 8;
 8001af4:	4b3e      	ldr	r3, [pc, #248]	; (8001bf0 <parseCommands+0x468>)
 8001af6:	2208      	movs	r2, #8
 8001af8:	811a      	strh	r2, [r3, #8]
		handlerRTC.RTC_config.rtcHours = firstParameter;
 8001afa:	4b3e      	ldr	r3, [pc, #248]	; (8001bf4 <parseCommands+0x46c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	4b3b      	ldr	r3, [pc, #236]	; (8001bf0 <parseCommands+0x468>)
 8001b02:	729a      	strb	r2, [r3, #10]
		handlerRTC.RTC_config.rtcMinutes = secondParameter;
 8001b04:	4b3c      	ldr	r3, [pc, #240]	; (8001bf8 <parseCommands+0x470>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b39      	ldr	r3, [pc, #228]	; (8001bf0 <parseCommands+0x468>)
 8001b0c:	72da      	strb	r2, [r3, #11]
		handlerRTC.RTC_config.rtcMonth = 11;
 8001b0e:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <parseCommands+0x468>)
 8001b10:	220b      	movs	r2, #11
 8001b12:	715a      	strb	r2, [r3, #5]
		handlerRTC.RTC_config.rtcSeconds =thirdParameter;
 8001b14:	4b39      	ldr	r3, [pc, #228]	; (8001bfc <parseCommands+0x474>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <parseCommands+0x468>)
 8001b1c:	731a      	strb	r2, [r3, #12]
		handlerRTC.RTC_config.rtcWeekDay = THUESDAY;
 8001b1e:	4b34      	ldr	r3, [pc, #208]	; (8001bf0 <parseCommands+0x468>)
 8001b20:	2202      	movs	r2, #2
 8001b22:	719a      	strb	r2, [r3, #6]
		handlerRTC.RTC_config.rtcYear= 22;
 8001b24:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <parseCommands+0x468>)
 8001b26:	2216      	movs	r2, #22
 8001b28:	711a      	strb	r2, [r3, #4]
		Rtc_Congif(&handlerRTC);
 8001b2a:	4831      	ldr	r0, [pc, #196]	; (8001bf0 <parseCommands+0x468>)
 8001b2c:	f001 fe72 	bl	8003814 <Rtc_Congif>
		sprintf(date,"%u/%u/%u%u:%u:%u",22,11,8,firstParameter,secondParameter,thirdParameter);
 8001b30:	4b30      	ldr	r3, [pc, #192]	; (8001bf4 <parseCommands+0x46c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a30      	ldr	r2, [pc, #192]	; (8001bf8 <parseCommands+0x470>)
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	4930      	ldr	r1, [pc, #192]	; (8001bfc <parseCommands+0x474>)
 8001b3a:	6809      	ldr	r1, [r1, #0]
 8001b3c:	9103      	str	r1, [sp, #12]
 8001b3e:	9202      	str	r2, [sp, #8]
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	2308      	movs	r3, #8
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	230b      	movs	r3, #11
 8001b48:	2216      	movs	r2, #22
 8001b4a:	492d      	ldr	r1, [pc, #180]	; (8001c00 <parseCommands+0x478>)
 8001b4c:	482d      	ldr	r0, [pc, #180]	; (8001c04 <parseCommands+0x47c>)
 8001b4e:	f003 fa6f 	bl	8005030 <siprintf>
		drawMSG(&handlerI2C1, date, sizeof(date));
 8001b52:	2210      	movs	r2, #16
 8001b54:	492b      	ldr	r1, [pc, #172]	; (8001c04 <parseCommands+0x47c>)
 8001b56:	482c      	ldr	r0, [pc, #176]	; (8001c08 <parseCommands+0x480>)
 8001b58:	f001 fb82 	bl	8003260 <drawMSG>
}
 8001b5c:	e041      	b.n	8001be2 <parseCommands+0x45a>
	else if (com9 == 0){
 8001b5e:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <parseCommands+0x484>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d11b      	bne.n	8001b9e <parseCommands+0x416>
		handlerRTC.RTC_config.rtcDay = 8;
 8001b66:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <parseCommands+0x468>)
 8001b68:	2208      	movs	r2, #8
 8001b6a:	811a      	strh	r2, [r3, #8]
		handlerRTC.RTC_config.rtcHours = 0;
 8001b6c:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <parseCommands+0x468>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	729a      	strb	r2, [r3, #10]
		handlerRTC.RTC_config.rtcMinutes = 0;
 8001b72:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <parseCommands+0x468>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	72da      	strb	r2, [r3, #11]
		handlerRTC.RTC_config.rtcMonth = 11;
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <parseCommands+0x468>)
 8001b7a:	220b      	movs	r2, #11
 8001b7c:	715a      	strb	r2, [r3, #5]
		handlerRTC.RTC_config.rtcSeconds =0;
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <parseCommands+0x468>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	731a      	strb	r2, [r3, #12]
		handlerRTC.RTC_config.rtcWeekDay = THUESDAY;
 8001b84:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <parseCommands+0x468>)
 8001b86:	2202      	movs	r2, #2
 8001b88:	719a      	strb	r2, [r3, #6]
		handlerRTC.RTC_config.rtcYear= 22;
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <parseCommands+0x468>)
 8001b8c:	2216      	movs	r2, #22
 8001b8e:	711a      	strb	r2, [r3, #4]
		Rtc_Congif(&handlerRTC);
 8001b90:	4817      	ldr	r0, [pc, #92]	; (8001bf0 <parseCommands+0x468>)
 8001b92:	f001 fe3f 	bl	8003814 <Rtc_Congif>
		startTimer(&handlerDateTim);
 8001b96:	481e      	ldr	r0, [pc, #120]	; (8001c10 <parseCommands+0x488>)
 8001b98:	f000 fc9e 	bl	80024d8 <startTimer>
}
 8001b9c:	e021      	b.n	8001be2 <parseCommands+0x45a>
	else if (com10 == 0){
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <parseCommands+0x48c>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10e      	bne.n	8001bc4 <parseCommands+0x43c>
		setScrollOUT = RESET;
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <parseCommands+0x490>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
		if (firstParameter == SET){
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <parseCommands+0x46c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d103      	bne.n	8001bbc <parseCommands+0x434>
			setScrollIN =SET;
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <parseCommands+0x494>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]
}
 8001bba:	e012      	b.n	8001be2 <parseCommands+0x45a>
			setScrollIN =RESET;
 8001bbc:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <parseCommands+0x494>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
}
 8001bc2:	e00e      	b.n	8001be2 <parseCommands+0x45a>
	else if (com11 == 0){
 8001bc4:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <parseCommands+0x498>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d106      	bne.n	8001bda <parseCommands+0x452>
		clearDisplay(&handlerI2C1);
 8001bcc:	480e      	ldr	r0, [pc, #56]	; (8001c08 <parseCommands+0x480>)
 8001bce:	f000 ffbd 	bl	8002b4c <clearDisplay>
		setScrollOUT = SET;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <parseCommands+0x490>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
}
 8001bd8:	e003      	b.n	8001be2 <parseCommands+0x45a>
		writeMsg(&handlerUSART1, "WRONG CMD, WRITE IT AGAING \n");
 8001bda:	4912      	ldr	r1, [pc, #72]	; (8001c24 <parseCommands+0x49c>)
 8001bdc:	4812      	ldr	r0, [pc, #72]	; (8001c28 <parseCommands+0x4a0>)
 8001bde:	f002 fab3 	bl	8004148 <writeMsg>
}
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	2000038b 	.word	0x2000038b
 8001bf0:	2000035c 	.word	0x2000035c
 8001bf4:	200003e8 	.word	0x200003e8
 8001bf8:	200003e0 	.word	0x200003e0
 8001bfc:	200003e4 	.word	0x200003e4
 8001c00:	08009ad4 	.word	0x08009ad4
 8001c04:	2000042c 	.word	0x2000042c
 8001c08:	20000354 	.word	0x20000354
 8001c0c:	2000038c 	.word	0x2000038c
 8001c10:	20000340 	.word	0x20000340
 8001c14:	2000038d 	.word	0x2000038d
 8001c18:	20000394 	.word	0x20000394
 8001c1c:	20000393 	.word	0x20000393
 8001c20:	2000038e 	.word	0x2000038e
 8001c24:	08009ae8 	.word	0x08009ae8
 8001c28:	20000258 	.word	0x20000258

08001c2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
	return 1;
 8001c30:	2301      	movs	r3, #1
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr

08001c3a <_kill>:

int _kill(int pid, int sig)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c44:	f002 fb52 	bl	80042ec <__errno>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2216      	movs	r2, #22
 8001c4c:	601a      	str	r2, [r3, #0]
	return -1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_exit>:

void _exit (int status)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c62:	f04f 31ff 	mov.w	r1, #4294967295
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ffe7 	bl	8001c3a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c6c:	e7fe      	b.n	8001c6c <_exit+0x12>

08001c6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	e00a      	b.n	8001c96 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c80:	f3af 8000 	nop.w
 8001c84:	4601      	mov	r1, r0
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	60ba      	str	r2, [r7, #8]
 8001c8c:	b2ca      	uxtb	r2, r1
 8001c8e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	3301      	adds	r3, #1
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	dbf0      	blt.n	8001c80 <_read+0x12>
	}

return len;
 8001c9e:	687b      	ldr	r3, [r7, #4]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	e009      	b.n	8001cce <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	60ba      	str	r2, [r7, #8]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	dbf1      	blt.n	8001cba <_write+0x12>
	}
	return len;
 8001cd6:	687b      	ldr	r3, [r7, #4]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_close>:

int _close(int file)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	return -1;
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d06:	605a      	str	r2, [r3, #4]
	return 0;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <_isatty>:

int _isatty(int file)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	return 1;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
	return 0;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d48:	4a14      	ldr	r2, [pc, #80]	; (8001d9c <_sbrk+0x5c>)
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <_sbrk+0x60>)
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <_sbrk+0x64>)
 8001d5e:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <_sbrk+0x68>)
 8001d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d207      	bcs.n	8001d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d70:	f002 fabc 	bl	80042ec <__errno>
 8001d74:	4603      	mov	r3, r0
 8001d76:	220c      	movs	r2, #12
 8001d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7e:	e009      	b.n	8001d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d86:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	4a05      	ldr	r2, [pc, #20]	; (8001da4 <_sbrk+0x64>)
 8001d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d92:	68fb      	ldr	r3, [r7, #12]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20020000 	.word	0x20020000
 8001da0:	00000400 	.word	0x00000400
 8001da4:	20000398 	.word	0x20000398
 8001da8:	200004b8 	.word	0x200004b8

08001dac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001dac:	480d      	ldr	r0, [pc, #52]	; (8001de4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dae:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001db0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db4:	480c      	ldr	r0, [pc, #48]	; (8001de8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001db6:	490d      	ldr	r1, [pc, #52]	; (8001dec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001db8:	4a0d      	ldr	r2, [pc, #52]	; (8001df0 <LoopForever+0xe>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dbc:	e002      	b.n	8001dc4 <LoopCopyDataInit>

08001dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc2:	3304      	adds	r3, #4

08001dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc8:	d3f9      	bcc.n	8001dbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dcc:	4c0a      	ldr	r4, [pc, #40]	; (8001df8 <LoopForever+0x16>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd0:	e001      	b.n	8001dd6 <LoopFillZerobss>

08001dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd4:	3204      	adds	r2, #4

08001dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd8:	d3fb      	bcc.n	8001dd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001dda:	f002 fa8d 	bl	80042f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dde:	f7fe ffa3 	bl	8000d28 <main>

08001de2 <LoopForever>:

LoopForever:
    b LoopForever
 8001de2:	e7fe      	b.n	8001de2 <LoopForever>
  ldr   r0, =_estack
 8001de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dec:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001df0:	0800a080 	.word	0x0800a080
  ldr r2, =_sbss
 8001df4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001df8:	200004b4 	.word	0x200004b4

08001dfc <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dfc:	e7fe      	b.n	8001dfc <BusFault_Handler>
	...

08001e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	db0b      	blt.n	8001e2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	4906      	ldr	r1, [pc, #24]	; (8001e34 <__NVIC_EnableIRQ+0x34>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	2001      	movs	r0, #1
 8001e22:	fa00 f202 	lsl.w	r2, r0, r2
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	e000e100 	.word	0xe000e100

08001e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6039      	str	r1, [r7, #0]
 8001e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	db0a      	blt.n	8001e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	490c      	ldr	r1, [pc, #48]	; (8001e84 <__NVIC_SetPriority+0x4c>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	0112      	lsls	r2, r2, #4
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e60:	e00a      	b.n	8001e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4908      	ldr	r1, [pc, #32]	; (8001e88 <__NVIC_SetPriority+0x50>)
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	3b04      	subs	r3, #4
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	440b      	add	r3, r1
 8001e76:	761a      	strb	r2, [r3, #24]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000e100 	.word	0xe000e100
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <startSingleADC>:
 * una conversion ADC.
 * Al terminar la conversion, el sistema lanza una interrupción y el dato es leido en la
 * función callback, utilizando la funciona getADC().
 *
 * */
void startSingleADC(void){
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
	/* Desactivamos el modo continuo de ADC */
	ADC1->CR2 &= ~ADC_CR2_CONT;
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <startSingleADC+0x30>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4a09      	ldr	r2, [pc, #36]	; (8001ebc <startSingleADC+0x30>)
 8001e96:	f023 0302 	bic.w	r3, r3, #2
 8001e9a:	6093      	str	r3, [r2, #8]

	/* Limpiamos el bit del overrun (CR1) */
	ADC1->CR1 &= ~ADC_CR1_OVRIE;
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <startSingleADC+0x30>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	4a06      	ldr	r2, [pc, #24]	; (8001ebc <startSingleADC+0x30>)
 8001ea2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ea6:	6053      	str	r3, [r2, #4]

	/* Iniciamos un ciclo de conversión ADC (CR2)*/
	ADC1->CR2 |= ADC_CR2_SWSTART;
 8001ea8:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <startSingleADC+0x30>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	4a03      	ldr	r2, [pc, #12]	; (8001ebc <startSingleADC+0x30>)
 8001eae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001eb2:	6093      	str	r3, [r2, #8]

}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	40012000 	.word	0x40012000

08001ec0 <getADC>:
/*
 * Función que retorna el ultimo dato adquirido por la ADC
 * La idea es que esta función es llamada desde la función callback, de forma que
 * siempre se obtiene el valor mas actual de la conversión ADC.
 * */
uint16_t getADC(void){
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
	// Esta variable es actualizada en la ISR de la conversión, cada vez que se obtiene
	// un nuevo valor.
	return adcRawData;
 8001ec4:	4b02      	ldr	r3, [pc, #8]	; (8001ed0 <getADC+0x10>)
 8001ec6:	881b      	ldrh	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	200003a8 	.word	0x200003a8

08001ed4 <ADC_IRQHandler>:

/*
 * Esta es la ISR de la interrupción por conversión ADC
 */
void ADC_IRQHandler(void){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	// Evaluamos que se dio la interrupción por conversión ADC
	if(ADC1->SR & ADC_SR_EOC){
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <ADC_IRQHandler+0x24>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d006      	beq.n	8001ef2 <ADC_IRQHandler+0x1e>
		// Leemos el resultado de la conversión ADC y lo cargamos en una variale auxiliar
		// la cual es utilizada en la función getADC()
		adcRawData = ADC1->DR;
 8001ee4:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <ADC_IRQHandler+0x24>)
 8001ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	4b04      	ldr	r3, [pc, #16]	; (8001efc <ADC_IRQHandler+0x28>)
 8001eec:	801a      	strh	r2, [r3, #0]



		// Hacemos el llamado a la función que se ejecutará en el main
		adcComplete_Callback();
 8001eee:	f7ff fc03 	bl	80016f8 <adcComplete_Callback>
	}

}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40012000 	.word	0x40012000
 8001efc:	200003a8 	.word	0x200003a8

08001f00 <configAnalogPin>:
/*
 * Con esta función configuramos que pin deseamos que funcione como canal ADC
 * Esta funcion trabaja con el GPIOxDriver, por lo cual requiere que se incluya
 * dicho driver.
 */
void configAnalogPin(uint8_t adcChannel) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]

	// Con este switch seleccionamos el canal y lo configuramos como análogo.
	switch (adcChannel) {
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	2b0f      	cmp	r3, #15
 8001f0e:	f200 8093 	bhi.w	8002038 <configAnalogPin+0x138>
 8001f12:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <configAnalogPin+0x18>)
 8001f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f18:	08001f59 	.word	0x08001f59
 8001f1c:	08001f67 	.word	0x08001f67
 8001f20:	08001f75 	.word	0x08001f75
 8001f24:	08001f83 	.word	0x08001f83
 8001f28:	08001f91 	.word	0x08001f91
 8001f2c:	08001f9f 	.word	0x08001f9f
 8001f30:	08001fad 	.word	0x08001fad
 8001f34:	08001fbb 	.word	0x08001fbb
 8001f38:	08001fc9 	.word	0x08001fc9
 8001f3c:	08001fd7 	.word	0x08001fd7
 8001f40:	08001fe5 	.word	0x08001fe5
 8001f44:	08001ff3 	.word	0x08001ff3
 8001f48:	08002001 	.word	0x08002001
 8001f4c:	0800200f 	.word	0x0800200f
 8001f50:	0800201d 	.word	0x0800201d
 8001f54:	0800202b 	.word	0x0800202b

	case ADC_CHANNEL_0: {
		// Es el pin PA0
		handlerAdcPin.pGPIOx 						= GPIOA;
 8001f58:	4b3d      	ldr	r3, [pc, #244]	; (8002050 <configAnalogPin+0x150>)
 8001f5a:	4a3e      	ldr	r2, [pc, #248]	; (8002054 <configAnalogPin+0x154>)
 8001f5c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8001f5e:	4b3c      	ldr	r3, [pc, #240]	; (8002050 <configAnalogPin+0x150>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	711a      	strb	r2, [r3, #4]
		// Nota: Para el ejercicio inicial solo se necesita este canal, los demas
		// se necesitan para trabajos posteriores.
		break;
 8001f64:	e069      	b.n	800203a <configAnalogPin+0x13a>
	}
		;

	case ADC_CHANNEL_1: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8001f66:	4b3a      	ldr	r3, [pc, #232]	; (8002050 <configAnalogPin+0x150>)
 8001f68:	4a3a      	ldr	r2, [pc, #232]	; (8002054 <configAnalogPin+0x154>)
 8001f6a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8001f6c:	4b38      	ldr	r3, [pc, #224]	; (8002050 <configAnalogPin+0x150>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	711a      	strb	r2, [r3, #4]

		break;
 8001f72:	e062      	b.n	800203a <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_2: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8001f74:	4b36      	ldr	r3, [pc, #216]	; (8002050 <configAnalogPin+0x150>)
 8001f76:	4a37      	ldr	r2, [pc, #220]	; (8002054 <configAnalogPin+0x154>)
 8001f78:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8001f7a:	4b35      	ldr	r3, [pc, #212]	; (8002050 <configAnalogPin+0x150>)
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	711a      	strb	r2, [r3, #4]
		break;
 8001f80:	e05b      	b.n	800203a <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_3: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8001f82:	4b33      	ldr	r3, [pc, #204]	; (8002050 <configAnalogPin+0x150>)
 8001f84:	4a33      	ldr	r2, [pc, #204]	; (8002054 <configAnalogPin+0x154>)
 8001f86:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8001f88:	4b31      	ldr	r3, [pc, #196]	; (8002050 <configAnalogPin+0x150>)
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	711a      	strb	r2, [r3, #4]
		break;
 8001f8e:	e054      	b.n	800203a <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_4: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8001f90:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <configAnalogPin+0x150>)
 8001f92:	4a30      	ldr	r2, [pc, #192]	; (8002054 <configAnalogPin+0x154>)
 8001f94:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 8001f96:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <configAnalogPin+0x150>)
 8001f98:	2204      	movs	r2, #4
 8001f9a:	711a      	strb	r2, [r3, #4]
		break;
 8001f9c:	e04d      	b.n	800203a <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_5: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8001f9e:	4b2c      	ldr	r3, [pc, #176]	; (8002050 <configAnalogPin+0x150>)
 8001fa0:	4a2c      	ldr	r2, [pc, #176]	; (8002054 <configAnalogPin+0x154>)
 8001fa2:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8001fa4:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <configAnalogPin+0x150>)
 8001fa6:	2205      	movs	r2, #5
 8001fa8:	711a      	strb	r2, [r3, #4]
		break;
 8001faa:	e046      	b.n	800203a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_6: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8001fac:	4b28      	ldr	r3, [pc, #160]	; (8002050 <configAnalogPin+0x150>)
 8001fae:	4a29      	ldr	r2, [pc, #164]	; (8002054 <configAnalogPin+0x154>)
 8001fb0:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_6;
 8001fb2:	4b27      	ldr	r3, [pc, #156]	; (8002050 <configAnalogPin+0x150>)
 8001fb4:	2206      	movs	r2, #6
 8001fb6:	711a      	strb	r2, [r3, #4]
		break;
 8001fb8:	e03f      	b.n	800203a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_7: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8001fba:	4b25      	ldr	r3, [pc, #148]	; (8002050 <configAnalogPin+0x150>)
 8001fbc:	4a25      	ldr	r2, [pc, #148]	; (8002054 <configAnalogPin+0x154>)
 8001fbe:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_7;
 8001fc0:	4b23      	ldr	r3, [pc, #140]	; (8002050 <configAnalogPin+0x150>)
 8001fc2:	2207      	movs	r2, #7
 8001fc4:	711a      	strb	r2, [r3, #4]
		break;
 8001fc6:	e038      	b.n	800203a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_8: {
		//Es el pin PB0
		handlerAdcPin.pGPIOx 						= GPIOB;
 8001fc8:	4b21      	ldr	r3, [pc, #132]	; (8002050 <configAnalogPin+0x150>)
 8001fca:	4a23      	ldr	r2, [pc, #140]	; (8002058 <configAnalogPin+0x158>)
 8001fcc:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8001fce:	4b20      	ldr	r3, [pc, #128]	; (8002050 <configAnalogPin+0x150>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	711a      	strb	r2, [r3, #4]
		break;
 8001fd4:	e031      	b.n	800203a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_9: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOB;
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <configAnalogPin+0x150>)
 8001fd8:	4a1f      	ldr	r2, [pc, #124]	; (8002058 <configAnalogPin+0x158>)
 8001fda:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <configAnalogPin+0x150>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	711a      	strb	r2, [r3, #4]
		break;
 8001fe2:	e02a      	b.n	800203a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_10: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8001fe4:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <configAnalogPin+0x150>)
 8001fe6:	4a1d      	ldr	r2, [pc, #116]	; (800205c <configAnalogPin+0x15c>)
 8001fe8:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8001fea:	4b19      	ldr	r3, [pc, #100]	; (8002050 <configAnalogPin+0x150>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	711a      	strb	r2, [r3, #4]
		break;
 8001ff0:	e023      	b.n	800203a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_11: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8001ff2:	4b17      	ldr	r3, [pc, #92]	; (8002050 <configAnalogPin+0x150>)
 8001ff4:	4a19      	ldr	r2, [pc, #100]	; (800205c <configAnalogPin+0x15c>)
 8001ff6:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8001ff8:	4b15      	ldr	r3, [pc, #84]	; (8002050 <configAnalogPin+0x150>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	711a      	strb	r2, [r3, #4]
		break;
 8001ffe:	e01c      	b.n	800203a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_12: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <configAnalogPin+0x150>)
 8002002:	4a14      	ldr	r2, [pc, #80]	; (8002054 <configAnalogPin+0x154>)
 8002004:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8002006:	4b12      	ldr	r3, [pc, #72]	; (8002050 <configAnalogPin+0x150>)
 8002008:	2202      	movs	r2, #2
 800200a:	711a      	strb	r2, [r3, #4]
		break;
 800200c:	e015      	b.n	800203a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_13: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <configAnalogPin+0x150>)
 8002010:	4a12      	ldr	r2, [pc, #72]	; (800205c <configAnalogPin+0x15c>)
 8002012:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <configAnalogPin+0x150>)
 8002016:	2203      	movs	r2, #3
 8002018:	711a      	strb	r2, [r3, #4]
		break;
 800201a:	e00e      	b.n	800203a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_14: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <configAnalogPin+0x150>)
 800201e:	4a0f      	ldr	r2, [pc, #60]	; (800205c <configAnalogPin+0x15c>)
 8002020:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <configAnalogPin+0x150>)
 8002024:	2204      	movs	r2, #4
 8002026:	711a      	strb	r2, [r3, #4]
		break;
 8002028:	e007      	b.n	800203a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_15: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <configAnalogPin+0x150>)
 800202c:	4a0b      	ldr	r2, [pc, #44]	; (800205c <configAnalogPin+0x15c>)
 800202e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <configAnalogPin+0x150>)
 8002032:	2205      	movs	r2, #5
 8002034:	711a      	strb	r2, [r3, #4]
		break;
 8002036:	e000      	b.n	800203a <configAnalogPin+0x13a>
	}
	default: {
		break;
 8002038:	bf00      	nop
	}

	}
	// Despues de configurar el canal adecuadamente, se define este pin como Analogo y se
	// carga la configuración con el driver del GPIOx
	handlerAdcPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <configAnalogPin+0x150>)
 800203c:	2203      	movs	r2, #3
 800203e:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerAdcPin);
 8002040:	4803      	ldr	r0, [pc, #12]	; (8002050 <configAnalogPin+0x150>)
 8002042:	f000 fa6b 	bl	800251c <GPIO_Config>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000039c 	.word	0x2000039c
 8002054:	40020000 	.word	0x40020000
 8002058:	40020400 	.word	0x40020400
 800205c:	40020800 	.word	0x40020800

08002060 <ADC_ConfigMultichannel>:
	//Activamos los eventos por eventos de PWM (TIMER3 canal 1)
	ADC1->CR2 |= (0x7 << ADC_CR2_EXTSEL_Pos);

}

void ADC_ConfigMultichannel (ADC_Config_t *adcConfig, uint8_t numeroDeCanales){
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	70fb      	strb	r3, [r7, #3]
	/* 1. Configuramos el PinX para que cumpla la función de canal análogo deseado. */
	for (uint8_t j = 0; j < numeroDeCanales; j++){
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e009      	b.n	8002086 <ADC_ConfigMultichannel+0x26>
		configAnalogPin(adcConfig->channelVector[j]);
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	7a1b      	ldrb	r3, [r3, #8]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ff40 	bl	8001f00 <configAnalogPin>
	for (uint8_t j = 0; j < numeroDeCanales; j++){
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	3301      	adds	r3, #1
 8002084:	73fb      	strb	r3, [r7, #15]
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	429a      	cmp	r2, r3
 800208c:	d3f1      	bcc.n	8002072 <ADC_ConfigMultichannel+0x12>
	}


	/* 2. Activamos la señal de reloj para el periférico ADC1 (bus APB2)*/

	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800208e:	4b89      	ldr	r3, [pc, #548]	; (80022b4 <ADC_ConfigMultichannel+0x254>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	4a88      	ldr	r2, [pc, #544]	; (80022b4 <ADC_ConfigMultichannel+0x254>)
 8002094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002098:	6453      	str	r3, [r2, #68]	; 0x44

	// Limpiamos los registros antes de comenzar a configurar
	ADC1->CR1 = 0;
 800209a:	4b87      	ldr	r3, [pc, #540]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 800209c:	2200      	movs	r2, #0
 800209e:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0;
 80020a0:	4b85      	ldr	r3, [pc, #532]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]

	/* Comenzamos la configuración del ADC1 */
	/* 3. Resolución del ADC */
	switch(adcConfig->resolution){
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	785b      	ldrb	r3, [r3, #1]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d826      	bhi.n	80020fc <ADC_ConfigMultichannel+0x9c>
 80020ae:	a201      	add	r2, pc, #4	; (adr r2, 80020b4 <ADC_ConfigMultichannel+0x54>)
 80020b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b4:	080020c5 	.word	0x080020c5
 80020b8:	080020d3 	.word	0x080020d3
 80020bc:	080020e1 	.word	0x080020e1
 80020c0:	080020ef 	.word	0x080020ef
	case ADC_RESOLUTION_12_BIT:
	{
		ADC1->CR1 &= ~ADC_CR1_RES;
 80020c4:	4b7c      	ldr	r3, [pc, #496]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a7b      	ldr	r2, [pc, #492]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 80020ca:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80020ce:	6053      	str	r3, [r2, #4]

		break;
 80020d0:	e01b      	b.n	800210a <ADC_ConfigMultichannel+0xaa>
	}

	case ADC_RESOLUTION_10_BIT:
	{
		ADC1->CR1 |= ADC_CR1_RES_0;
 80020d2:	4b79      	ldr	r3, [pc, #484]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4a78      	ldr	r2, [pc, #480]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 80020d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020dc:	6053      	str	r3, [r2, #4]
		break;
 80020de:	e014      	b.n	800210a <ADC_ConfigMultichannel+0xaa>
	}

	case ADC_RESOLUTION_8_BIT:
	{

		ADC1->CR1 |= ADC_CR1_RES_1;
 80020e0:	4b75      	ldr	r3, [pc, #468]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4a74      	ldr	r2, [pc, #464]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 80020e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020ea:	6053      	str	r3, [r2, #4]
		break;
 80020ec:	e00d      	b.n	800210a <ADC_ConfigMultichannel+0xaa>
	}

	case ADC_RESOLUTION_6_BIT:
	{
		ADC1->CR1 |= ADC_CR1_RES;
 80020ee:	4b72      	ldr	r3, [pc, #456]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4a71      	ldr	r2, [pc, #452]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 80020f4:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80020f8:	6053      	str	r3, [r2, #4]
		break;
 80020fa:	e006      	b.n	800210a <ADC_ConfigMultichannel+0xaa>
	}

	default:
	{	ADC1->CR1 |= ADC_CR1_RES;
 80020fc:	4b6e      	ldr	r3, [pc, #440]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4a6d      	ldr	r2, [pc, #436]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 8002102:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8002106:	6053      	str	r3, [r2, #4]
		break;
 8002108:	bf00      	nop
	}
	}

	/* 4. Configuramos el modo Scan como activado */
	ADC1->CR1 |= ADC_CR1_SCAN;
 800210a:	4b6b      	ldr	r3, [pc, #428]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4a6a      	ldr	r2, [pc, #424]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 8002110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002114:	6053      	str	r3, [r2, #4]

	/* 5. Configuramos la alineación de los datos (derecha o izquierda) */
	if(adcConfig->dataAlignment == ADC_ALIGNMENT_RIGHT){
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	791b      	ldrb	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <ADC_ConfigMultichannel+0xcc>
		// Alineación a la derecha (esta es la forma "natural")
		ADC1->CR2 &= ~ADC_CR2_ALIGN;
 800211e:	4b66      	ldr	r3, [pc, #408]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	4a65      	ldr	r2, [pc, #404]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 8002124:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002128:	6093      	str	r3, [r2, #8]
 800212a:	e005      	b.n	8002138 <ADC_ConfigMultichannel+0xd8>
	}
	else{

		// Alineación a la izquierda (para algunos cálculos matemáticos)
		ADC1->CR2 |= ADC_CR2_ALIGN;
 800212c:	4b62      	ldr	r3, [pc, #392]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	4a61      	ldr	r2, [pc, #388]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 8002132:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002136:	6093      	str	r3, [r2, #8]
	}

	/* 6. Desactivamos el "continuos mode" */
	ADC1->CR2 &= ~ADC_CR2_CONT;
 8002138:	4b5f      	ldr	r3, [pc, #380]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	4a5e      	ldr	r2, [pc, #376]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 800213e:	f023 0302 	bic.w	r3, r3, #2
 8002142:	6093      	str	r3, [r2, #8]

	/* 7. Acá se debería configurar el sampling...*/
	for (uint8_t i = 0; i < numeroDeCanales ; i++){
 8002144:	2300      	movs	r3, #0
 8002146:	73bb      	strb	r3, [r7, #14]
 8002148:	e02e      	b.n	80021a8 <ADC_ConfigMultichannel+0x148>
		if(adcConfig->channelVector[i] <= ADC_CHANNEL_9){
 800214a:	7bbb      	ldrb	r3, [r7, #14]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	4413      	add	r3, r2
 8002150:	7a1b      	ldrb	r3, [r3, #8]
 8002152:	2b09      	cmp	r3, #9
 8002154:	d812      	bhi.n	800217c <ADC_ConfigMultichannel+0x11c>
			ADC1->SMPR2 |= (adcConfig->samplingPeriod) << (0x3 * adcConfig->channelVector[i]);
 8002156:	4b58      	ldr	r3, [pc, #352]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	885b      	ldrh	r3, [r3, #2]
 800215e:	4618      	mov	r0, r3
 8002160:	7bbb      	ldrb	r3, [r7, #14]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	440b      	add	r3, r1
 8002166:	7a1b      	ldrb	r3, [r3, #8]
 8002168:	4619      	mov	r1, r3
 800216a:	460b      	mov	r3, r1
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	440b      	add	r3, r1
 8002170:	fa00 f303 	lsl.w	r3, r0, r3
 8002174:	4950      	ldr	r1, [pc, #320]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 8002176:	4313      	orrs	r3, r2
 8002178:	610b      	str	r3, [r1, #16]
 800217a:	e012      	b.n	80021a2 <ADC_ConfigMultichannel+0x142>
		}
		else{
			ADC1->SMPR1 |= (adcConfig->samplingPeriod) << (0x3 * (adcConfig->channelVector[i]- 10));
 800217c:	4b4e      	ldr	r3, [pc, #312]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 800217e:	68d9      	ldr	r1, [r3, #12]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	885b      	ldrh	r3, [r3, #2]
 8002184:	4618      	mov	r0, r3
 8002186:	7bbb      	ldrb	r3, [r7, #14]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	4413      	add	r3, r2
 800218c:	7a1b      	ldrb	r3, [r3, #8]
 800218e:	f1a3 020a 	sub.w	r2, r3, #10
 8002192:	4613      	mov	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4413      	add	r3, r2
 8002198:	fa00 f303 	lsl.w	r3, r0, r3
 800219c:	4a46      	ldr	r2, [pc, #280]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 800219e:	430b      	orrs	r3, r1
 80021a0:	60d3      	str	r3, [r2, #12]
	for (uint8_t i = 0; i < numeroDeCanales ; i++){
 80021a2:	7bbb      	ldrb	r3, [r7, #14]
 80021a4:	3301      	adds	r3, #1
 80021a6:	73bb      	strb	r3, [r7, #14]
 80021a8:	7bba      	ldrb	r2, [r7, #14]
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d3cc      	bcc.n	800214a <ADC_ConfigMultichannel+0xea>
	/* 8. Configuramos la secuencia y cuantos elementos hay en la secuencia */
	// Al hacerlo todo 0, estamos seleccionando solo 1 elemento en el conteo de la secuencia



	ADC1->SQR1 = ((numeroDeCanales-1) << ADC_SQR1_L_Pos);
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	051a      	lsls	r2, r3, #20
 80021b6:	4b40      	ldr	r3, [pc, #256]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 80021b8:	62da      	str	r2, [r3, #44]	; 0x2c



	for (uint8_t i = 0; i < numeroDeCanales ; i++){
 80021ba:	2300      	movs	r3, #0
 80021bc:	737b      	strb	r3, [r7, #13]
 80021be:	e04d      	b.n	800225c <ADC_ConfigMultichannel+0x1fc>
		if (i <= 5){
 80021c0:	7b7b      	ldrb	r3, [r7, #13]
 80021c2:	2b05      	cmp	r3, #5
 80021c4:	d810      	bhi.n	80021e8 <ADC_ConfigMultichannel+0x188>

			ADC1->SQR3 |= (adcConfig->channelVector[i] << 5 * i);
 80021c6:	4b3c      	ldr	r3, [pc, #240]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 80021c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021ca:	7b7b      	ldrb	r3, [r7, #13]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	4413      	add	r3, r2
 80021d0:	7a1b      	ldrb	r3, [r3, #8]
 80021d2:	4618      	mov	r0, r3
 80021d4:	7b7a      	ldrb	r2, [r7, #13]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	fa00 f303 	lsl.w	r3, r0, r3
 80021e0:	4a35      	ldr	r2, [pc, #212]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 80021e2:	430b      	orrs	r3, r1
 80021e4:	6353      	str	r3, [r2, #52]	; 0x34
 80021e6:	e036      	b.n	8002256 <ADC_ConfigMultichannel+0x1f6>

		}else if ((i <= 11) & (i > 5)){
 80021e8:	7b7b      	ldrb	r3, [r7, #13]
 80021ea:	2b0b      	cmp	r3, #11
 80021ec:	bf94      	ite	ls
 80021ee:	2301      	movls	r3, #1
 80021f0:	2300      	movhi	r3, #0
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	7b7b      	ldrb	r3, [r7, #13]
 80021f6:	2b05      	cmp	r3, #5
 80021f8:	bf8c      	ite	hi
 80021fa:	2301      	movhi	r3, #1
 80021fc:	2300      	movls	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	4013      	ands	r3, r2
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d011      	beq.n	800222c <ADC_ConfigMultichannel+0x1cc>

			ADC1->SQR2 |= (adcConfig->channelVector[i] << 5 * (i-6));
 8002208:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 800220a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800220c:	7b7b      	ldrb	r3, [r7, #13]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	7a1b      	ldrb	r3, [r3, #8]
 8002214:	4618      	mov	r0, r3
 8002216:	7b7b      	ldrb	r3, [r7, #13]
 8002218:	1f9a      	subs	r2, r3, #6
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	fa00 f303 	lsl.w	r3, r0, r3
 8002224:	4a24      	ldr	r2, [pc, #144]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 8002226:	430b      	orrs	r3, r1
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	e014      	b.n	8002256 <ADC_ConfigMultichannel+0x1f6>

		}else if (i <= 15){
 800222c:	7b7b      	ldrb	r3, [r7, #13]
 800222e:	2b0f      	cmp	r3, #15
 8002230:	d811      	bhi.n	8002256 <ADC_ConfigMultichannel+0x1f6>

			ADC1->SQR1 |= (adcConfig->channelVector[i] << 5 * (i-12));
 8002232:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 8002234:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002236:	7b7b      	ldrb	r3, [r7, #13]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4413      	add	r3, r2
 800223c:	7a1b      	ldrb	r3, [r3, #8]
 800223e:	4618      	mov	r0, r3
 8002240:	7b7b      	ldrb	r3, [r7, #13]
 8002242:	f1a3 020c 	sub.w	r2, r3, #12
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	fa00 f303 	lsl.w	r3, r0, r3
 8002250:	4a19      	ldr	r2, [pc, #100]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 8002252:	430b      	orrs	r3, r1
 8002254:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (uint8_t i = 0; i < numeroDeCanales ; i++){
 8002256:	7b7b      	ldrb	r3, [r7, #13]
 8002258:	3301      	adds	r3, #1
 800225a:	737b      	strb	r3, [r7, #13]
 800225c:	7b7a      	ldrb	r2, [r7, #13]
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	429a      	cmp	r2, r3
 8002262:	d3ad      	bcc.n	80021c0 <ADC_ConfigMultichannel+0x160>

	}


	//Activamos interrupciones cada fin de secuencia.
	ADC1->CR2 |= ADC_CR2_EOCS;
 8002264:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a13      	ldr	r2, [pc, #76]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 800226a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800226e:	6093      	str	r3, [r2, #8]



	/* 9. Configuramos el preescaler del ADC en 2:1 (el mas rápido que se puede tener */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <ADC_ConfigMultichannel+0x25c>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a11      	ldr	r2, [pc, #68]	; (80022bc <ADC_ConfigMultichannel+0x25c>)
 8002276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227a:	6053      	str	r3, [r2, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800227c:	b672      	cpsid	i
}
 800227e:	bf00      	nop

	/* 10. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 11. Activamos la interrupción debida a la finalización de una conversión EOC (CR1)*/
	ADC1->CR1 |= ADC_CR1_EOCIE;
 8002280:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4a0c      	ldr	r2, [pc, #48]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 8002286:	f043 0320 	orr.w	r3, r3, #32
 800228a:	6053      	str	r3, [r2, #4]

	/* 11a. Matriculamos la interrupción en el NVIC*/
	__NVIC_EnableIRQ(ADC_IRQn);
 800228c:	2012      	movs	r0, #18
 800228e:	f7ff fdb7 	bl	8001e00 <__NVIC_EnableIRQ>

	/* 11b. Configuramos la prioridad para la interrupción ADC */
	__NVIC_SetPriority(ADC_IRQn, 4);
 8002292:	2104      	movs	r1, #4
 8002294:	2012      	movs	r0, #18
 8002296:	f7ff fdcf 	bl	8001e38 <__NVIC_SetPriority>

	/* 12. Activamos el modulo ADC */
	ADC1->CR2 |= ADC_CR2_ADON;
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	4a06      	ldr	r2, [pc, #24]	; (80022b8 <ADC_ConfigMultichannel+0x258>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80022a6:	b662      	cpsie	i
}
 80022a8:	bf00      	nop

	/* 13. Activamos las interrupciones globales */
	__enable_irq();


}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40012000 	.word	0x40012000
 80022bc:	40012300 	.word	0x40012300

080022c0 <__NVIC_EnableIRQ>:
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	db0b      	blt.n	80022ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	f003 021f 	and.w	r2, r3, #31
 80022d8:	4906      	ldr	r1, [pc, #24]	; (80022f4 <__NVIC_EnableIRQ+0x34>)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	2001      	movs	r0, #1
 80022e2:	fa00 f202 	lsl.w	r2, r0, r2
 80022e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	e000e100 	.word	0xe000e100

080022f8 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002300:	b672      	cpsid	i
}
 8002302:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a4e      	ldr	r2, [pc, #312]	; (8002444 <BasicTimer_Config+0x14c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d106      	bne.n	800231c <BasicTimer_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800230e:	4b4e      	ldr	r3, [pc, #312]	; (8002448 <BasicTimer_Config+0x150>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	4a4d      	ldr	r2, [pc, #308]	; (8002448 <BasicTimer_Config+0x150>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6453      	str	r3, [r2, #68]	; 0x44
 800231a:	e030      	b.n	800237e <BasicTimer_Config+0x86>
	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002324:	d106      	bne.n	8002334 <BasicTimer_Config+0x3c>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002326:	4b48      	ldr	r3, [pc, #288]	; (8002448 <BasicTimer_Config+0x150>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	4a47      	ldr	r2, [pc, #284]	; (8002448 <BasicTimer_Config+0x150>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6413      	str	r3, [r2, #64]	; 0x40
 8002332:	e024      	b.n	800237e <BasicTimer_Config+0x86>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a44      	ldr	r2, [pc, #272]	; (800244c <BasicTimer_Config+0x154>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d106      	bne.n	800234c <BasicTimer_Config+0x54>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800233e:	4b42      	ldr	r3, [pc, #264]	; (8002448 <BasicTimer_Config+0x150>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a41      	ldr	r2, [pc, #260]	; (8002448 <BasicTimer_Config+0x150>)
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	e018      	b.n	800237e <BasicTimer_Config+0x86>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a3f      	ldr	r2, [pc, #252]	; (8002450 <BasicTimer_Config+0x158>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d106      	bne.n	8002364 <BasicTimer_Config+0x6c>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002356:	4b3c      	ldr	r3, [pc, #240]	; (8002448 <BasicTimer_Config+0x150>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	4a3b      	ldr	r2, [pc, #236]	; (8002448 <BasicTimer_Config+0x150>)
 800235c:	f043 0304 	orr.w	r3, r3, #4
 8002360:	6413      	str	r3, [r2, #64]	; 0x40
 8002362:	e00c      	b.n	800237e <BasicTimer_Config+0x86>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a3a      	ldr	r2, [pc, #232]	; (8002454 <BasicTimer_Config+0x15c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d106      	bne.n	800237c <BasicTimer_Config+0x84>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800236e:	4b36      	ldr	r3, [pc, #216]	; (8002448 <BasicTimer_Config+0x150>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	4a35      	ldr	r2, [pc, #212]	; (8002448 <BasicTimer_Config+0x150>)
 8002374:	f043 0308 	orr.w	r3, r3, #8
 8002378:	6413      	str	r3, [r2, #64]	; 0x40
 800237a:	e000      	b.n	800237e <BasicTimer_Config+0x86>
	}
	else{
		__NOP();
 800237c:	bf00      	nop
	/* 2. Configuramos el Pre-scaler
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */
	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6892      	ldr	r2, [r2, #8]
 8002386:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	791b      	ldrb	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d112      	bne.n	80023b6 <BasicTimer_Config+0xbe>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0210 	bic.w	r2, r2, #16
 800239e:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3a01      	subs	r2, #1
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2200      	movs	r2, #0
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24
 80023b4:	e013      	b.n	80023de <BasicTimer_Config+0xe6>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0210 	orr.w	r2, r2, #16
 80023c4:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	3a01      	subs	r2, #1
 80023d0:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	3a01      	subs	r2, #1
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0201 	orr.w	r2, r2, #1
 80023ec:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f6:	d103      	bne.n	8002400 <BasicTimer_Config+0x108>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 80023f8:	201c      	movs	r0, #28
 80023fa:	f7ff ff61 	bl	80022c0 <__NVIC_EnableIRQ>
 80023fe:	e01b      	b.n	8002438 <BasicTimer_Config+0x140>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a11      	ldr	r2, [pc, #68]	; (800244c <BasicTimer_Config+0x154>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d103      	bne.n	8002412 <BasicTimer_Config+0x11a>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 800240a:	201d      	movs	r0, #29
 800240c:	f7ff ff58 	bl	80022c0 <__NVIC_EnableIRQ>
 8002410:	e012      	b.n	8002438 <BasicTimer_Config+0x140>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a0e      	ldr	r2, [pc, #56]	; (8002450 <BasicTimer_Config+0x158>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d103      	bne.n	8002424 <BasicTimer_Config+0x12c>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 800241c:	201e      	movs	r0, #30
 800241e:	f7ff ff4f 	bl	80022c0 <__NVIC_EnableIRQ>
 8002422:	e009      	b.n	8002438 <BasicTimer_Config+0x140>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <BasicTimer_Config+0x15c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d103      	bne.n	8002436 <BasicTimer_Config+0x13e>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 800242e:	2032      	movs	r0, #50	; 0x32
 8002430:	f7ff ff46 	bl	80022c0 <__NVIC_EnableIRQ>
 8002434:	e000      	b.n	8002438 <BasicTimer_Config+0x140>
	}
	else{
		__NOP();
 8002436:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8002438:	b662      	cpsie	i
}
 800243a:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40010000 	.word	0x40010000
 8002448:	40023800 	.word	0x40023800
 800244c:	40000400 	.word	0x40000400
 8002450:	40000800 	.word	0x40000800
 8002454:	40000c00 	.word	0x40000c00

08002458 <BasicTimer3_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void){
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800245c:	bf00      	nop
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8002466:	b580      	push	{r7, lr}
 8002468:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM2->SR &= ~TIM_SR_UIF;
 800246a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	6113      	str	r3, [r2, #16]

	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer2_Callback();
 800247a:	f7ff f90f 	bl	800169c <BasicTimer2_Callback>

}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void){
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM3->SR &= ~TIM_SR_UIF;
 8002488:	4b04      	ldr	r3, [pc, #16]	; (800249c <TIM3_IRQHandler+0x18>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	4a03      	ldr	r2, [pc, #12]	; (800249c <TIM3_IRQHandler+0x18>)
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	6113      	str	r3, [r2, #16]

	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer3_Callback();
 8002494:	f7ff ffe0 	bl	8002458 <BasicTimer3_Callback>

}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40000400 	.word	0x40000400

080024a0 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void){
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM4->SR &= ~TIM_SR_UIF;
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <TIM4_IRQHandler+0x18>)
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	4a03      	ldr	r2, [pc, #12]	; (80024b8 <TIM4_IRQHandler+0x18>)
 80024aa:	f023 0301 	bic.w	r3, r3, #1
 80024ae:	6113      	str	r3, [r2, #16]

	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer4_Callback();
 80024b0:	f7ff f964 	bl	800177c <BasicTimer4_Callback>

}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40000800 	.word	0x40000800

080024bc <TIM5_IRQHandler>:
void TIM5_IRQHandler(void){
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM5->SR &= ~TIM_SR_UIF;
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <TIM5_IRQHandler+0x18>)
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	4a03      	ldr	r2, [pc, #12]	; (80024d4 <TIM5_IRQHandler+0x18>)
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	6113      	str	r3, [r2, #16]

	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer5_Callback();
 80024cc:	f7ff f908 	bl	80016e0 <BasicTimer5_Callback>

}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40000c00 	.word	0x40000c00

080024d8 <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0201 	bic.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a87      	ldr	r2, [pc, #540]	; (8002750 <GPIO_Config+0x234>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d106      	bne.n	8002544 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8002536:	4b87      	ldr	r3, [pc, #540]	; (8002754 <GPIO_Config+0x238>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a86      	ldr	r2, [pc, #536]	; (8002754 <GPIO_Config+0x238>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	e03a      	b.n	80025ba <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a83      	ldr	r2, [pc, #524]	; (8002758 <GPIO_Config+0x23c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d106      	bne.n	800255c <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 800254e:	4b81      	ldr	r3, [pc, #516]	; (8002754 <GPIO_Config+0x238>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a80      	ldr	r2, [pc, #512]	; (8002754 <GPIO_Config+0x238>)
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	e02e      	b.n	80025ba <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a7e      	ldr	r2, [pc, #504]	; (800275c <GPIO_Config+0x240>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d106      	bne.n	8002574 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8002566:	4b7b      	ldr	r3, [pc, #492]	; (8002754 <GPIO_Config+0x238>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a7a      	ldr	r2, [pc, #488]	; (8002754 <GPIO_Config+0x238>)
 800256c:	f043 0304 	orr.w	r3, r3, #4
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	e022      	b.n	80025ba <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a79      	ldr	r2, [pc, #484]	; (8002760 <GPIO_Config+0x244>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d106      	bne.n	800258c <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 800257e:	4b75      	ldr	r3, [pc, #468]	; (8002754 <GPIO_Config+0x238>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a74      	ldr	r2, [pc, #464]	; (8002754 <GPIO_Config+0x238>)
 8002584:	f043 0308 	orr.w	r3, r3, #8
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	e016      	b.n	80025ba <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a74      	ldr	r2, [pc, #464]	; (8002764 <GPIO_Config+0x248>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d106      	bne.n	80025a4 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8002596:	4b6f      	ldr	r3, [pc, #444]	; (8002754 <GPIO_Config+0x238>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	4a6e      	ldr	r2, [pc, #440]	; (8002754 <GPIO_Config+0x238>)
 800259c:	f043 0310 	orr.w	r3, r3, #16
 80025a0:	6313      	str	r3, [r2, #48]	; 0x30
 80025a2:	e00a      	b.n	80025ba <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a6f      	ldr	r2, [pc, #444]	; (8002768 <GPIO_Config+0x24c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d105      	bne.n	80025ba <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 80025ae:	4b69      	ldr	r3, [pc, #420]	; (8002754 <GPIO_Config+0x238>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	4a68      	ldr	r2, [pc, #416]	; (8002754 <GPIO_Config+0x238>)
 80025b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
	 * 2) Configurando el registro GPIOx_MODER
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	795b      	ldrb	r3, [r3, #5]
 80025be:	461a      	mov	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	791b      	ldrb	r3, [r3, #4]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	791b      	ldrb	r3, [r3, #4]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	2103      	movs	r1, #3
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	4619      	mov	r1, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	400a      	ands	r2, r1
 80025e8:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6819      	ldr	r1, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	7a1b      	ldrb	r3, [r3, #8]
 80025fe:	461a      	mov	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	791b      	ldrb	r3, [r3, #4]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	791b      	ldrb	r3, [r3, #4]
 8002614:	4619      	mov	r1, r3
 8002616:	2301      	movs	r3, #1
 8002618:	408b      	lsls	r3, r1
 800261a:	43db      	mvns	r3, r3
 800261c:	4619      	mov	r1, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	400a      	ands	r2, r1
 8002624:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6859      	ldr	r1, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	799b      	ldrb	r3, [r3, #6]
 800263a:	461a      	mov	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	791b      	ldrb	r3, [r3, #4]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	791b      	ldrb	r3, [r3, #4]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	2103      	movs	r1, #3
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	4619      	mov	r1, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	400a      	ands	r2, r1
 8002664:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6899      	ldr	r1, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	430a      	orrs	r2, r1
 8002674:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	79db      	ldrb	r3, [r3, #7]
 800267a:	461a      	mov	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	791b      	ldrb	r3, [r3, #4]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	791b      	ldrb	r3, [r3, #4]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	2103      	movs	r1, #3
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	4619      	mov	r1, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	400a      	ands	r2, r1
 80026a4:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68d9      	ldr	r1, [r3, #12]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	795b      	ldrb	r3, [r3, #5]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d143      	bne.n	8002746 <GPIO_Config+0x22a>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	791b      	ldrb	r3, [r3, #4]
 80026c2:	2b07      	cmp	r3, #7
 80026c4:	d81f      	bhi.n	8002706 <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	791b      	ldrb	r3, [r3, #4]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6a1a      	ldr	r2, [r3, #32]
 80026d4:	210f      	movs	r1, #15
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	4619      	mov	r1, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	400a      	ands	r2, r1
 80026e6:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6a1a      	ldr	r2, [r3, #32]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	7a5b      	ldrb	r3, [r3, #9]
 80026f2:	4619      	mov	r1, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	4619      	mov	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	621a      	str	r2, [r3, #32]
			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}//Fin del GPIO_Config
 8002704:	e01f      	b.n	8002746 <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	791b      	ldrb	r3, [r3, #4]
 800270a:	3b08      	subs	r3, #8
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002716:	210f      	movs	r1, #15
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	4619      	mov	r1, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	400a      	ands	r2, r1
 8002728:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	7a5b      	ldrb	r3, [r3, #9]
 8002734:	4619      	mov	r1, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	4619      	mov	r1, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	625a      	str	r2, [r3, #36]	; 0x24
}//Fin del GPIO_Config
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	40020000 	.word	0x40020000
 8002754:	40023800 	.word	0x40023800
 8002758:	40020400 	.word	0x40020400
 800275c:	40020800 	.word	0x40020800
 8002760:	40020c00 	.word	0x40020c00
 8002764:	40021000 	.word	0x40021000
 8002768:	40021c00 	.word	0x40021c00

0800276c <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d10d      	bne.n	800279a <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699a      	ldr	r2, [r3, #24]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	791b      	ldrb	r3, [r3, #4]
 8002788:	4619      	mov	r1, r3
 800278a:	2301      	movs	r3, #1
 800278c:	408b      	lsls	r3, r1
 800278e:	4619      	mov	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8002798:	e00d      	b.n	80027b6 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699a      	ldr	r2, [r3, #24]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	791b      	ldrb	r3, [r3, #4]
 80027a4:	3310      	adds	r3, #16
 80027a6:	2101      	movs	r1, #1
 80027a8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ac:	4619      	mov	r1, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	619a      	str	r2, [r3, #24]
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	791b      	ldrb	r3, [r3, #4]
 80027d0:	461a      	mov	r2, r3
 80027d2:	2301      	movs	r3, #1
 80027d4:	4093      	lsls	r3, r2
 80027d6:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 80027e0:	897b      	ldrh	r3, [r7, #10]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4013      	ands	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	791b      	ldrb	r3, [r3, #4]
 80027ec:	461a      	mov	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	40d3      	lsrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]

	return pinValue;
 80027f4:	68fb      	ldr	r3, [r7, #12]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
		uint8_t state = GPIO_ReadPin (pPinState);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ffd9 	bl	80027c0 <GPIO_ReadPin>
 800280e:	4603      	mov	r3, r0
 8002810:	73fb      	strb	r3, [r7, #15]
		if (state== SET){
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d104      	bne.n	8002822 <GPIOxTooglePin+0x22>
			GPIO_WritePin(pPinState, RESET);
 8002818:	2100      	movs	r1, #0
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff ffa6 	bl	800276c <GPIO_WritePin>
		else{
			GPIO_WritePin(pPinState, SET);
		}


}
 8002820:	e003      	b.n	800282a <GPIOxTooglePin+0x2a>
			GPIO_WritePin(pPinState, SET);
 8002822:	2101      	movs	r1, #1
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff ffa1 	bl	800276c <GPIO_WritePin>
}
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a45      	ldr	r2, [pc, #276]	; (8002958 <i2c_config+0x124>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d106      	bne.n	8002854 <i2c_config+0x20>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 8002846:	4b45      	ldr	r3, [pc, #276]	; (800295c <i2c_config+0x128>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	4a44      	ldr	r2, [pc, #272]	; (800295c <i2c_config+0x128>)
 800284c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002850:	6413      	str	r3, [r2, #64]	; 0x40
 8002852:	e016      	b.n	8002882 <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a41      	ldr	r2, [pc, #260]	; (8002960 <i2c_config+0x12c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d106      	bne.n	800286c <i2c_config+0x38>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C2EN;
 800285e:	4b3f      	ldr	r3, [pc, #252]	; (800295c <i2c_config+0x128>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	4a3e      	ldr	r2, [pc, #248]	; (800295c <i2c_config+0x128>)
 8002864:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002868:	6413      	str	r3, [r2, #64]	; 0x40
 800286a:	e00a      	b.n	8002882 <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a3c      	ldr	r2, [pc, #240]	; (8002964 <i2c_config+0x130>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d105      	bne.n	8002882 <i2c_config+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 8002876:	4b39      	ldr	r3, [pc, #228]	; (800295c <i2c_config+0x128>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	4a38      	ldr	r2, [pc, #224]	; (800295c <i2c_config+0x128>)
 800287c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002880:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Reiniciamos elperiferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002890:	601a      	str	r2, [r3, #0]

	__NOP();
 8002892:	bf00      	nop

	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028a2:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */
	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80028b2:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0210 	orr.w	r2, r2, #16
 80028c2:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del relo
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2200      	movs	r2, #0
 80028ca:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2200      	movs	r2, #0
 80028d2:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->modeI2C == I2C_MODE_SM){
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	795b      	ldrb	r3, [r3, #5]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d118      	bne.n	800290e <i2c_config+0xda>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	69da      	ldr	r2, [r3, #28]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ea:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz << I2C_CCR_CCR_Pos);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	69da      	ldr	r2, [r3, #28]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80028fa:	61da      	str	r2, [r3, #28]

		//Configuramos el registro que controla el tiempo T-Rise máximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6a1a      	ldr	r2, [r3, #32]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0211 	orr.w	r2, r2, #17
 800290a:	621a      	str	r2, [r3, #32]
 800290c:	e017      	b.n	800293e <i2c_config+0x10a>
	}
	else{
		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |= I2C_CCR_FS;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	69da      	ldr	r2, [r3, #28]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800291c:	61da      	str	r2, [r3, #28]

		//COnfiguramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz << I2C_CCR_CCR_Pos);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69da      	ldr	r2, [r3, #28]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 020e 	orr.w	r2, r2, #14
 800292c:	61da      	str	r2, [r3, #28]

		// COnfiguramos el registro que controla el tiempo T-Rise máximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6a1a      	ldr	r2, [r3, #32]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0206 	orr.w	r2, r2, #6
 800293c:	621a      	str	r2, [r3, #32]
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0201 	orr.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]

}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	40005400 	.word	0x40005400
 800295c:	40023800 	.word	0x40023800
 8002960:	40005800 	.word	0x40005800
 8002964:	40005c00 	.word	0x40005c00

08002968 <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297e:	601a      	str	r2, [r3, #0]
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <i2c_startTransaction>:
/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2
 * 2. Genereamos la señal "start"
 * 2a. Esperamos a que la bandera del evento "start" se levante
 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1
 */
void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8002992:	e000      	b.n	8002996 <i2c_startTransaction+0xc>
		__NOP();
 8002994:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1f7      	bne.n	8002994 <i2c_startTransaction+0xa>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029b2:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80029b4:	e000      	b.n	80029b8 <i2c_startTransaction+0x2e>
		__NOP();
 80029b6:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f7      	beq.n	80029b6 <i2c_startTransaction+0x2c>
	}
}
 80029c6:	bf00      	nop
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir cera en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 80029d2:	b480      	push	{r7}
 80029d4:	b085      	sub	sp, #20
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	460b      	mov	r3, r1
 80029dc:	70fb      	strb	r3, [r7, #3]
 80029de:	4613      	mov	r3, r2
 80029e0:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	005a      	lsls	r2, r3, #1
 80029ea:	78bb      	ldrb	r3, [r7, #2]
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 80029f4:	e000      	b.n	80029f8 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 80029f6:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f7      	beq.n	80029f6 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	73fb      	strb	r3, [r7, #15]

}
 8002a16:	bf00      	nop
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <i2c_sendDataByte>:
		__NOP();
	}
}

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8002a34:	e000      	b.n	8002a38 <i2c_sendDataByte+0x18>
		__NOP();
 8002a36:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f7      	beq.n	8002a36 <i2c_sendDataByte+0x16>
	}
}
 8002a46:	bf00      	nop
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <sendDataBytes>:
#include "OLEDDriver.h"

char letterArray[5] = {0};
//OLED Driver

void sendDataBytes(I2C_Handler_t *ptrHandlerI2C, char *dataBytes, uint8_t sizeArray){
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b086      	sub	sp, #24
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	71fb      	strb	r3, [r7, #7]


	i2c_startTransaction(ptrHandlerI2C);
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f7ff ff92 	bl	800298a <i2c_startTransaction>

	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	791b      	ldrb	r3, [r3, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7ff ffaf 	bl	80029d2 <i2c_sendSlaveAddressRW>

	i2c_sendDataByte (ptrHandlerI2C, OLED_CONTROLBYTE_DISPLAY);
 8002a74:	2140      	movs	r1, #64	; 0x40
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f7ff ffd2 	bl	8002a20 <i2c_sendDataByte>


	if (sizeArray < 128){
 8002a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	db12      	blt.n	8002aaa <sendDataBytes+0x58>
		for (uint8_t k=0; k < sizeArray; k++){
 8002a84:	2300      	movs	r3, #0
 8002a86:	75fb      	strb	r3, [r7, #23]
 8002a88:	e00a      	b.n	8002aa0 <sendDataBytes+0x4e>
				i2c_sendDataByte (ptrHandlerI2C, *(dataBytes+k));
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	4413      	add	r3, r2
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	4619      	mov	r1, r3
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f7ff ffc3 	bl	8002a20 <i2c_sendDataByte>
		for (uint8_t k=0; k < sizeArray; k++){
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	75fb      	strb	r3, [r7, #23]
 8002aa0:	7dfa      	ldrb	r2, [r7, #23]
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d3f0      	bcc.n	8002a8a <sendDataBytes+0x38>
 8002aa8:	e011      	b.n	8002ace <sendDataBytes+0x7c>
		}
	}else{

		for (uint8_t j=0; j < 128; j++){
 8002aaa:	2300      	movs	r3, #0
 8002aac:	75bb      	strb	r3, [r7, #22]
 8002aae:	e00a      	b.n	8002ac6 <sendDataBytes+0x74>
			i2c_sendDataByte (ptrHandlerI2C, *(dataBytes+j));
 8002ab0:	7dbb      	ldrb	r3, [r7, #22]
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f7ff ffb0 	bl	8002a20 <i2c_sendDataByte>
		for (uint8_t j=0; j < 128; j++){
 8002ac0:	7dbb      	ldrb	r3, [r7, #22]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	75bb      	strb	r3, [r7, #22]
 8002ac6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	daf0      	bge.n	8002ab0 <sendDataBytes+0x5e>
		}
	}

	i2c_stopTransaction(ptrHandlerI2C);
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f7ff ff4a 	bl	8002968 <i2c_stopTransaction>

}
 8002ad4:	bf00      	nop
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <sendCommandByte>:

void sendCommandByte ( I2C_Handler_t *ptrHandlerI2C,  char command){
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	70fb      	strb	r3, [r7, #3]

	i2c_startTransaction(ptrHandlerI2C);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff ff4e 	bl	800298a <i2c_startTransaction>

	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	791b      	ldrb	r3, [r3, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	4619      	mov	r1, r3
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ff6b 	bl	80029d2 <i2c_sendSlaveAddressRW>

	i2c_sendDataByte (ptrHandlerI2C, OLED_CONTROLBYTE_CONFIG);
 8002afc:	2100      	movs	r1, #0
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ff8e 	bl	8002a20 <i2c_sendDataByte>

	i2c_sendDataByte (ptrHandlerI2C, command);
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	4619      	mov	r1, r3
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff ff89 	bl	8002a20 <i2c_sendDataByte>

	i2c_stopTransaction(ptrHandlerI2C);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff ff2a 	bl	8002968 <i2c_stopTransaction>
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <startOLED>:



//Funciones especiales

void startOLED (I2C_Handler_t *ptrHandlerI2Ctr){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	sendCommandByte(ptrHandlerI2Ctr, 0b10101111);
 8002b24:	21af      	movs	r1, #175	; 0xaf
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff ffd8 	bl	8002adc <sendCommandByte>
}
 8002b2c:	bf00      	nop
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <stopOLED>:

void stopOLED (I2C_Handler_t *ptrHandlerI2Ctr){
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	sendCommandByte(ptrHandlerI2Ctr, 0b10101110);
 8002b3c:	21ae      	movs	r1, #174	; 0xae
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ffcc 	bl	8002adc <sendCommandByte>
}
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <clearDisplay>:

void clearDisplay (I2C_Handler_t *ptrHandlerI2Ctr){
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b0a4      	sub	sp, #144	; 0x90
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

	char clearedBytes[128] = {0};
 8002b54:	2300      	movs	r3, #0
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	f107 0310 	add.w	r3, r7, #16
 8002b5c:	227c      	movs	r2, #124	; 0x7c
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f001 fbed 	bl	8004340 <memset>


	for (uint8_t j = 0; j < 8 ; j++){
 8002b66:	2300      	movs	r3, #0
 8002b68:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8002b6c:	e017      	b.n	8002b9e <clearDisplay+0x52>
		setPage(ptrHandlerI2Ctr, j);
 8002b6e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002b72:	4619      	mov	r1, r3
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f81b 	bl	8002bb0 <setPage>
		setColumnAddress(ptrHandlerI2Ctr, j);
 8002b7a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f827 	bl	8002bd4 <setColumnAddress>
		sendDataBytes(ptrHandlerI2Ctr, clearedBytes, sizeof(clearedBytes));
 8002b86:	f107 030c 	add.w	r3, r7, #12
 8002b8a:	2280      	movs	r2, #128	; 0x80
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ff5f 	bl	8002a52 <sendDataBytes>
	for (uint8_t j = 0; j < 8 ; j++){
 8002b94:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8002b9e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002ba2:	2b07      	cmp	r3, #7
 8002ba4:	d9e3      	bls.n	8002b6e <clearDisplay+0x22>
	}

}
 8002ba6:	bf00      	nop
 8002ba8:	bf00      	nop
 8002baa:	3790      	adds	r7, #144	; 0x90
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <setPage>:

void setPage (I2C_Handler_t *ptrHandlerI2Ctr, uint8_t page){
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	70fb      	strb	r3, [r7, #3]

	sendCommandByte(ptrHandlerI2Ctr, (0b10110000 | page) );
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff ff88 	bl	8002adc <sendCommandByte>
}
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <setColumnAddress>:

void setColumnAddress (I2C_Handler_t *ptrHandlerI2Ctr, uint8_t page){
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	70fb      	strb	r3, [r7, #3]

	setPage(ptrHandlerI2Ctr, page);
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	4619      	mov	r1, r3
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ffe3 	bl	8002bb0 <setPage>
	sendCommandByte(ptrHandlerI2Ctr, 0b00000010);
 8002bea:	2102      	movs	r1, #2
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff ff75 	bl	8002adc <sendCommandByte>
	sendCommandByte(ptrHandlerI2Ctr, 0b00010000);
 8002bf2:	2110      	movs	r1, #16
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ff71 	bl	8002adc <sendCommandByte>

}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <setLineAddress>:

void setLineAddress (I2C_Handler_t *ptrHandlerI2Ctr, uint8_t moveNum){
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	70fb      	strb	r3, [r7, #3]

	sendCommandByte(ptrHandlerI2Ctr, (0b01000000 | (moveNum-1)));
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	b25b      	sxtb	r3, r3
 8002c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c1a:	b25b      	sxtb	r3, r3
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ff5b 	bl	8002adc <sendCommandByte>

}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <letterTochar>:

char *letterTochar (uint8_t character){
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	71fb      	strb	r3, [r7, #7]
	switch(character){
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	3b21      	subs	r3, #33	; 0x21
 8002c3e:	2b3e      	cmp	r3, #62	; 0x3e
 8002c40:	f200 8304 	bhi.w	800324c <letterTochar+0x61c>
 8002c44:	a201      	add	r2, pc, #4	; (adr r2, 8002c4c <letterTochar+0x1c>)
 8002c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4a:	bf00      	nop
 8002c4c:	0800308d 	.word	0x0800308d
 8002c50:	0800324d 	.word	0x0800324d
 8002c54:	0800324d 	.word	0x0800324d
 8002c58:	0800324d 	.word	0x0800324d
 8002c5c:	0800324d 	.word	0x0800324d
 8002c60:	0800324d 	.word	0x0800324d
 8002c64:	0800324d 	.word	0x0800324d
 8002c68:	0800324d 	.word	0x0800324d
 8002c6c:	0800324d 	.word	0x0800324d
 8002c70:	0800324d 	.word	0x0800324d
 8002c74:	0800324d 	.word	0x0800324d
 8002c78:	0800324d 	.word	0x0800324d
 8002c7c:	0800324d 	.word	0x0800324d
 8002c80:	0800324d 	.word	0x0800324d
 8002c84:	080031ed 	.word	0x080031ed
 8002c88:	080030ad 	.word	0x080030ad
 8002c8c:	080030cd 	.word	0x080030cd
 8002c90:	080030ed 	.word	0x080030ed
 8002c94:	0800310d 	.word	0x0800310d
 8002c98:	0800312d 	.word	0x0800312d
 8002c9c:	0800314d 	.word	0x0800314d
 8002ca0:	0800316d 	.word	0x0800316d
 8002ca4:	0800318d 	.word	0x0800318d
 8002ca8:	080031ad 	.word	0x080031ad
 8002cac:	080031cd 	.word	0x080031cd
 8002cb0:	0800320d 	.word	0x0800320d
 8002cb4:	0800324d 	.word	0x0800324d
 8002cb8:	0800324d 	.word	0x0800324d
 8002cbc:	0800324d 	.word	0x0800324d
 8002cc0:	0800324d 	.word	0x0800324d
 8002cc4:	0800324d 	.word	0x0800324d
 8002cc8:	0800324d 	.word	0x0800324d
 8002ccc:	08002d49 	.word	0x08002d49
 8002cd0:	08002d69 	.word	0x08002d69
 8002cd4:	08002d89 	.word	0x08002d89
 8002cd8:	08002da9 	.word	0x08002da9
 8002cdc:	08002dc9 	.word	0x08002dc9
 8002ce0:	08002de9 	.word	0x08002de9
 8002ce4:	08002e09 	.word	0x08002e09
 8002ce8:	08002e29 	.word	0x08002e29
 8002cec:	08002e49 	.word	0x08002e49
 8002cf0:	08002e69 	.word	0x08002e69
 8002cf4:	08002e89 	.word	0x08002e89
 8002cf8:	08002ea9 	.word	0x08002ea9
 8002cfc:	08002ec9 	.word	0x08002ec9
 8002d00:	08002ee9 	.word	0x08002ee9
 8002d04:	08002f09 	.word	0x08002f09
 8002d08:	08002f29 	.word	0x08002f29
 8002d0c:	08002f49 	.word	0x08002f49
 8002d10:	08002f69 	.word	0x08002f69
 8002d14:	08002f89 	.word	0x08002f89
 8002d18:	08002fa9 	.word	0x08002fa9
 8002d1c:	08002fc9 	.word	0x08002fc9
 8002d20:	08002fe9 	.word	0x08002fe9
 8002d24:	08003009 	.word	0x08003009
 8002d28:	0800302d 	.word	0x0800302d
 8002d2c:	0800304d 	.word	0x0800304d
 8002d30:	0800306d 	.word	0x0800306d
 8002d34:	0800324d 	.word	0x0800324d
 8002d38:	0800324d 	.word	0x0800324d
 8002d3c:	0800324d 	.word	0x0800324d
 8002d40:	0800324d 	.word	0x0800324d
 8002d44:	0800322d 	.word	0x0800322d
		case 'A':{

			letterArray[0] = 0b01111000;
 8002d48:	4bb7      	ldr	r3, [pc, #732]	; (8003028 <letterTochar+0x3f8>)
 8002d4a:	2278      	movs	r2, #120	; 0x78
 8002d4c:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b00010100;
 8002d4e:	4bb6      	ldr	r3, [pc, #728]	; (8003028 <letterTochar+0x3f8>)
 8002d50:	2214      	movs	r2, #20
 8002d52:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b00010010;
 8002d54:	4bb4      	ldr	r3, [pc, #720]	; (8003028 <letterTochar+0x3f8>)
 8002d56:	2212      	movs	r2, #18
 8002d58:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b00010100;
 8002d5a:	4bb3      	ldr	r3, [pc, #716]	; (8003028 <letterTochar+0x3f8>)
 8002d5c:	2214      	movs	r2, #20
 8002d5e:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b01111000;
 8002d60:	4bb1      	ldr	r3, [pc, #708]	; (8003028 <letterTochar+0x3f8>)
 8002d62:	2278      	movs	r2, #120	; 0x78
 8002d64:	711a      	strb	r2, [r3, #4]

			break;
 8002d66:	e273      	b.n	8003250 <letterTochar+0x620>

		}case 'B':{
			letterArray[0] = 0b01111100;
 8002d68:	4baf      	ldr	r3, [pc, #700]	; (8003028 <letterTochar+0x3f8>)
 8002d6a:	227c      	movs	r2, #124	; 0x7c
 8002d6c:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b01001010;
 8002d6e:	4bae      	ldr	r3, [pc, #696]	; (8003028 <letterTochar+0x3f8>)
 8002d70:	224a      	movs	r2, #74	; 0x4a
 8002d72:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01001010;
 8002d74:	4bac      	ldr	r3, [pc, #688]	; (8003028 <letterTochar+0x3f8>)
 8002d76:	224a      	movs	r2, #74	; 0x4a
 8002d78:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01001010;
 8002d7a:	4bab      	ldr	r3, [pc, #684]	; (8003028 <letterTochar+0x3f8>)
 8002d7c:	224a      	movs	r2, #74	; 0x4a
 8002d7e:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00110100;
 8002d80:	4ba9      	ldr	r3, [pc, #676]	; (8003028 <letterTochar+0x3f8>)
 8002d82:	2234      	movs	r2, #52	; 0x34
 8002d84:	711a      	strb	r2, [r3, #4]

			break;
 8002d86:	e263      	b.n	8003250 <letterTochar+0x620>
		}case 'C':{
			letterArray[0] = 0b00111100;
 8002d88:	4ba7      	ldr	r3, [pc, #668]	; (8003028 <letterTochar+0x3f8>)
 8002d8a:	223c      	movs	r2, #60	; 0x3c
 8002d8c:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b01000010;
 8002d8e:	4ba6      	ldr	r3, [pc, #664]	; (8003028 <letterTochar+0x3f8>)
 8002d90:	2242      	movs	r2, #66	; 0x42
 8002d92:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01000010;
 8002d94:	4ba4      	ldr	r3, [pc, #656]	; (8003028 <letterTochar+0x3f8>)
 8002d96:	2242      	movs	r2, #66	; 0x42
 8002d98:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01000010;
 8002d9a:	4ba3      	ldr	r3, [pc, #652]	; (8003028 <letterTochar+0x3f8>)
 8002d9c:	2242      	movs	r2, #66	; 0x42
 8002d9e:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00100100;
 8002da0:	4ba1      	ldr	r3, [pc, #644]	; (8003028 <letterTochar+0x3f8>)
 8002da2:	2224      	movs	r2, #36	; 0x24
 8002da4:	711a      	strb	r2, [r3, #4]

			break;
 8002da6:	e253      	b.n	8003250 <letterTochar+0x620>
		}case 'D':{
			letterArray[0] = 0b01111110;
 8002da8:	4b9f      	ldr	r3, [pc, #636]	; (8003028 <letterTochar+0x3f8>)
 8002daa:	227e      	movs	r2, #126	; 0x7e
 8002dac:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b01000010;
 8002dae:	4b9e      	ldr	r3, [pc, #632]	; (8003028 <letterTochar+0x3f8>)
 8002db0:	2242      	movs	r2, #66	; 0x42
 8002db2:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01000010;
 8002db4:	4b9c      	ldr	r3, [pc, #624]	; (8003028 <letterTochar+0x3f8>)
 8002db6:	2242      	movs	r2, #66	; 0x42
 8002db8:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01000010;
 8002dba:	4b9b      	ldr	r3, [pc, #620]	; (8003028 <letterTochar+0x3f8>)
 8002dbc:	2242      	movs	r2, #66	; 0x42
 8002dbe:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00111100;
 8002dc0:	4b99      	ldr	r3, [pc, #612]	; (8003028 <letterTochar+0x3f8>)
 8002dc2:	223c      	movs	r2, #60	; 0x3c
 8002dc4:	711a      	strb	r2, [r3, #4]

			break;
 8002dc6:	e243      	b.n	8003250 <letterTochar+0x620>
		}case 'E':{
			letterArray[0] = 0b01111110;
 8002dc8:	4b97      	ldr	r3, [pc, #604]	; (8003028 <letterTochar+0x3f8>)
 8002dca:	227e      	movs	r2, #126	; 0x7e
 8002dcc:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b01001010;
 8002dce:	4b96      	ldr	r3, [pc, #600]	; (8003028 <letterTochar+0x3f8>)
 8002dd0:	224a      	movs	r2, #74	; 0x4a
 8002dd2:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01001010;
 8002dd4:	4b94      	ldr	r3, [pc, #592]	; (8003028 <letterTochar+0x3f8>)
 8002dd6:	224a      	movs	r2, #74	; 0x4a
 8002dd8:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01001010;
 8002dda:	4b93      	ldr	r3, [pc, #588]	; (8003028 <letterTochar+0x3f8>)
 8002ddc:	224a      	movs	r2, #74	; 0x4a
 8002dde:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b01000010;
 8002de0:	4b91      	ldr	r3, [pc, #580]	; (8003028 <letterTochar+0x3f8>)
 8002de2:	2242      	movs	r2, #66	; 0x42
 8002de4:	711a      	strb	r2, [r3, #4]

			break;
 8002de6:	e233      	b.n	8003250 <letterTochar+0x620>
		}case 'F':{
			letterArray[0] = 0b01111110;
 8002de8:	4b8f      	ldr	r3, [pc, #572]	; (8003028 <letterTochar+0x3f8>)
 8002dea:	227e      	movs	r2, #126	; 0x7e
 8002dec:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b00001010;
 8002dee:	4b8e      	ldr	r3, [pc, #568]	; (8003028 <letterTochar+0x3f8>)
 8002df0:	220a      	movs	r2, #10
 8002df2:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b00001010;
 8002df4:	4b8c      	ldr	r3, [pc, #560]	; (8003028 <letterTochar+0x3f8>)
 8002df6:	220a      	movs	r2, #10
 8002df8:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b00001010;
 8002dfa:	4b8b      	ldr	r3, [pc, #556]	; (8003028 <letterTochar+0x3f8>)
 8002dfc:	220a      	movs	r2, #10
 8002dfe:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00000010;
 8002e00:	4b89      	ldr	r3, [pc, #548]	; (8003028 <letterTochar+0x3f8>)
 8002e02:	2202      	movs	r2, #2
 8002e04:	711a      	strb	r2, [r3, #4]

			break;
 8002e06:	e223      	b.n	8003250 <letterTochar+0x620>
		}case 'G':{
			letterArray[0] = 0b00111100;
 8002e08:	4b87      	ldr	r3, [pc, #540]	; (8003028 <letterTochar+0x3f8>)
 8002e0a:	223c      	movs	r2, #60	; 0x3c
 8002e0c:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b01000010;
 8002e0e:	4b86      	ldr	r3, [pc, #536]	; (8003028 <letterTochar+0x3f8>)
 8002e10:	2242      	movs	r2, #66	; 0x42
 8002e12:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01010010;
 8002e14:	4b84      	ldr	r3, [pc, #528]	; (8003028 <letterTochar+0x3f8>)
 8002e16:	2252      	movs	r2, #82	; 0x52
 8002e18:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01010010;
 8002e1a:	4b83      	ldr	r3, [pc, #524]	; (8003028 <letterTochar+0x3f8>)
 8002e1c:	2252      	movs	r2, #82	; 0x52
 8002e1e:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00110100;
 8002e20:	4b81      	ldr	r3, [pc, #516]	; (8003028 <letterTochar+0x3f8>)
 8002e22:	2234      	movs	r2, #52	; 0x34
 8002e24:	711a      	strb	r2, [r3, #4]

			break;
 8002e26:	e213      	b.n	8003250 <letterTochar+0x620>
		}case 'H':{
			letterArray[0] = 0b01111110;
 8002e28:	4b7f      	ldr	r3, [pc, #508]	; (8003028 <letterTochar+0x3f8>)
 8002e2a:	227e      	movs	r2, #126	; 0x7e
 8002e2c:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b00001000;
 8002e2e:	4b7e      	ldr	r3, [pc, #504]	; (8003028 <letterTochar+0x3f8>)
 8002e30:	2208      	movs	r2, #8
 8002e32:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b00001000;
 8002e34:	4b7c      	ldr	r3, [pc, #496]	; (8003028 <letterTochar+0x3f8>)
 8002e36:	2208      	movs	r2, #8
 8002e38:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b00001000;
 8002e3a:	4b7b      	ldr	r3, [pc, #492]	; (8003028 <letterTochar+0x3f8>)
 8002e3c:	2208      	movs	r2, #8
 8002e3e:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b01111110;
 8002e40:	4b79      	ldr	r3, [pc, #484]	; (8003028 <letterTochar+0x3f8>)
 8002e42:	227e      	movs	r2, #126	; 0x7e
 8002e44:	711a      	strb	r2, [r3, #4]

			break;
 8002e46:	e203      	b.n	8003250 <letterTochar+0x620>
		}case 'I':{
			letterArray[0] = 0b01000010;
 8002e48:	4b77      	ldr	r3, [pc, #476]	; (8003028 <letterTochar+0x3f8>)
 8002e4a:	2242      	movs	r2, #66	; 0x42
 8002e4c:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b01000010;
 8002e4e:	4b76      	ldr	r3, [pc, #472]	; (8003028 <letterTochar+0x3f8>)
 8002e50:	2242      	movs	r2, #66	; 0x42
 8002e52:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01111110;
 8002e54:	4b74      	ldr	r3, [pc, #464]	; (8003028 <letterTochar+0x3f8>)
 8002e56:	227e      	movs	r2, #126	; 0x7e
 8002e58:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01000010;
 8002e5a:	4b73      	ldr	r3, [pc, #460]	; (8003028 <letterTochar+0x3f8>)
 8002e5c:	2242      	movs	r2, #66	; 0x42
 8002e5e:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b01000010;
 8002e60:	4b71      	ldr	r3, [pc, #452]	; (8003028 <letterTochar+0x3f8>)
 8002e62:	2242      	movs	r2, #66	; 0x42
 8002e64:	711a      	strb	r2, [r3, #4]

			break;
 8002e66:	e1f3      	b.n	8003250 <letterTochar+0x620>
		}case 'J':{
			letterArray[0] = 0b00000010;
 8002e68:	4b6f      	ldr	r3, [pc, #444]	; (8003028 <letterTochar+0x3f8>)
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b00000010;
 8002e6e:	4b6e      	ldr	r3, [pc, #440]	; (8003028 <letterTochar+0x3f8>)
 8002e70:	2202      	movs	r2, #2
 8002e72:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01111110;
 8002e74:	4b6c      	ldr	r3, [pc, #432]	; (8003028 <letterTochar+0x3f8>)
 8002e76:	227e      	movs	r2, #126	; 0x7e
 8002e78:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01000010;
 8002e7a:	4b6b      	ldr	r3, [pc, #428]	; (8003028 <letterTochar+0x3f8>)
 8002e7c:	2242      	movs	r2, #66	; 0x42
 8002e7e:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00110010;
 8002e80:	4b69      	ldr	r3, [pc, #420]	; (8003028 <letterTochar+0x3f8>)
 8002e82:	2232      	movs	r2, #50	; 0x32
 8002e84:	711a      	strb	r2, [r3, #4]

			break;
 8002e86:	e1e3      	b.n	8003250 <letterTochar+0x620>
		}case 'K':{
			letterArray[0] = 0b01111110;
 8002e88:	4b67      	ldr	r3, [pc, #412]	; (8003028 <letterTochar+0x3f8>)
 8002e8a:	227e      	movs	r2, #126	; 0x7e
 8002e8c:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b00010000;
 8002e8e:	4b66      	ldr	r3, [pc, #408]	; (8003028 <letterTochar+0x3f8>)
 8002e90:	2210      	movs	r2, #16
 8002e92:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b00011000;
 8002e94:	4b64      	ldr	r3, [pc, #400]	; (8003028 <letterTochar+0x3f8>)
 8002e96:	2218      	movs	r2, #24
 8002e98:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b00100100;
 8002e9a:	4b63      	ldr	r3, [pc, #396]	; (8003028 <letterTochar+0x3f8>)
 8002e9c:	2224      	movs	r2, #36	; 0x24
 8002e9e:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b01000010;
 8002ea0:	4b61      	ldr	r3, [pc, #388]	; (8003028 <letterTochar+0x3f8>)
 8002ea2:	2242      	movs	r2, #66	; 0x42
 8002ea4:	711a      	strb	r2, [r3, #4]

			break;
 8002ea6:	e1d3      	b.n	8003250 <letterTochar+0x620>
		}case 'L':{
			letterArray[0] = 0b01111110;
 8002ea8:	4b5f      	ldr	r3, [pc, #380]	; (8003028 <letterTochar+0x3f8>)
 8002eaa:	227e      	movs	r2, #126	; 0x7e
 8002eac:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b01000000;
 8002eae:	4b5e      	ldr	r3, [pc, #376]	; (8003028 <letterTochar+0x3f8>)
 8002eb0:	2240      	movs	r2, #64	; 0x40
 8002eb2:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01000000;
 8002eb4:	4b5c      	ldr	r3, [pc, #368]	; (8003028 <letterTochar+0x3f8>)
 8002eb6:	2240      	movs	r2, #64	; 0x40
 8002eb8:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01000000;
 8002eba:	4b5b      	ldr	r3, [pc, #364]	; (8003028 <letterTochar+0x3f8>)
 8002ebc:	2240      	movs	r2, #64	; 0x40
 8002ebe:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b01000000;
 8002ec0:	4b59      	ldr	r3, [pc, #356]	; (8003028 <letterTochar+0x3f8>)
 8002ec2:	2240      	movs	r2, #64	; 0x40
 8002ec4:	711a      	strb	r2, [r3, #4]

			break;
 8002ec6:	e1c3      	b.n	8003250 <letterTochar+0x620>
		}case 'M':{
			letterArray[0] = 0b01111110;
 8002ec8:	4b57      	ldr	r3, [pc, #348]	; (8003028 <letterTochar+0x3f8>)
 8002eca:	227e      	movs	r2, #126	; 0x7e
 8002ecc:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b00000100;
 8002ece:	4b56      	ldr	r3, [pc, #344]	; (8003028 <letterTochar+0x3f8>)
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b00001000;
 8002ed4:	4b54      	ldr	r3, [pc, #336]	; (8003028 <letterTochar+0x3f8>)
 8002ed6:	2208      	movs	r2, #8
 8002ed8:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b00000100;
 8002eda:	4b53      	ldr	r3, [pc, #332]	; (8003028 <letterTochar+0x3f8>)
 8002edc:	2204      	movs	r2, #4
 8002ede:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b01111110;
 8002ee0:	4b51      	ldr	r3, [pc, #324]	; (8003028 <letterTochar+0x3f8>)
 8002ee2:	227e      	movs	r2, #126	; 0x7e
 8002ee4:	711a      	strb	r2, [r3, #4]

			break;
 8002ee6:	e1b3      	b.n	8003250 <letterTochar+0x620>
		}case 'N':{
			letterArray[0] = 0b01111110;
 8002ee8:	4b4f      	ldr	r3, [pc, #316]	; (8003028 <letterTochar+0x3f8>)
 8002eea:	227e      	movs	r2, #126	; 0x7e
 8002eec:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b00000100;
 8002eee:	4b4e      	ldr	r3, [pc, #312]	; (8003028 <letterTochar+0x3f8>)
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b00011000;
 8002ef4:	4b4c      	ldr	r3, [pc, #304]	; (8003028 <letterTochar+0x3f8>)
 8002ef6:	2218      	movs	r2, #24
 8002ef8:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b00100000;
 8002efa:	4b4b      	ldr	r3, [pc, #300]	; (8003028 <letterTochar+0x3f8>)
 8002efc:	2220      	movs	r2, #32
 8002efe:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b01111110;
 8002f00:	4b49      	ldr	r3, [pc, #292]	; (8003028 <letterTochar+0x3f8>)
 8002f02:	227e      	movs	r2, #126	; 0x7e
 8002f04:	711a      	strb	r2, [r3, #4]

			break;
 8002f06:	e1a3      	b.n	8003250 <letterTochar+0x620>
		}case 'O':{
			letterArray[0] = 0b00111100;
 8002f08:	4b47      	ldr	r3, [pc, #284]	; (8003028 <letterTochar+0x3f8>)
 8002f0a:	223c      	movs	r2, #60	; 0x3c
 8002f0c:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b01000010;
 8002f0e:	4b46      	ldr	r3, [pc, #280]	; (8003028 <letterTochar+0x3f8>)
 8002f10:	2242      	movs	r2, #66	; 0x42
 8002f12:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01000010;
 8002f14:	4b44      	ldr	r3, [pc, #272]	; (8003028 <letterTochar+0x3f8>)
 8002f16:	2242      	movs	r2, #66	; 0x42
 8002f18:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01000010;
 8002f1a:	4b43      	ldr	r3, [pc, #268]	; (8003028 <letterTochar+0x3f8>)
 8002f1c:	2242      	movs	r2, #66	; 0x42
 8002f1e:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00111100;
 8002f20:	4b41      	ldr	r3, [pc, #260]	; (8003028 <letterTochar+0x3f8>)
 8002f22:	223c      	movs	r2, #60	; 0x3c
 8002f24:	711a      	strb	r2, [r3, #4]

			break;
 8002f26:	e193      	b.n	8003250 <letterTochar+0x620>
		}case 'P':{
			letterArray[0] = 0b01111110;
 8002f28:	4b3f      	ldr	r3, [pc, #252]	; (8003028 <letterTochar+0x3f8>)
 8002f2a:	227e      	movs	r2, #126	; 0x7e
 8002f2c:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b00010010;
 8002f2e:	4b3e      	ldr	r3, [pc, #248]	; (8003028 <letterTochar+0x3f8>)
 8002f30:	2212      	movs	r2, #18
 8002f32:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b00010010;
 8002f34:	4b3c      	ldr	r3, [pc, #240]	; (8003028 <letterTochar+0x3f8>)
 8002f36:	2212      	movs	r2, #18
 8002f38:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b00010010;
 8002f3a:	4b3b      	ldr	r3, [pc, #236]	; (8003028 <letterTochar+0x3f8>)
 8002f3c:	2212      	movs	r2, #18
 8002f3e:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00001100;
 8002f40:	4b39      	ldr	r3, [pc, #228]	; (8003028 <letterTochar+0x3f8>)
 8002f42:	220c      	movs	r2, #12
 8002f44:	711a      	strb	r2, [r3, #4]

			break;
 8002f46:	e183      	b.n	8003250 <letterTochar+0x620>
		}case 'Q':{
			letterArray[0] = 0b00011100;
 8002f48:	4b37      	ldr	r3, [pc, #220]	; (8003028 <letterTochar+0x3f8>)
 8002f4a:	221c      	movs	r2, #28
 8002f4c:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b00100010;
 8002f4e:	4b36      	ldr	r3, [pc, #216]	; (8003028 <letterTochar+0x3f8>)
 8002f50:	2222      	movs	r2, #34	; 0x22
 8002f52:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b00110010;
 8002f54:	4b34      	ldr	r3, [pc, #208]	; (8003028 <letterTochar+0x3f8>)
 8002f56:	2232      	movs	r2, #50	; 0x32
 8002f58:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01110010;
 8002f5a:	4b33      	ldr	r3, [pc, #204]	; (8003028 <letterTochar+0x3f8>)
 8002f5c:	2272      	movs	r2, #114	; 0x72
 8002f5e:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b01011100;
 8002f60:	4b31      	ldr	r3, [pc, #196]	; (8003028 <letterTochar+0x3f8>)
 8002f62:	225c      	movs	r2, #92	; 0x5c
 8002f64:	711a      	strb	r2, [r3, #4]

			break;
 8002f66:	e173      	b.n	8003250 <letterTochar+0x620>
		}case 'R':{
			letterArray[0] = 0b01111110;
 8002f68:	4b2f      	ldr	r3, [pc, #188]	; (8003028 <letterTochar+0x3f8>)
 8002f6a:	227e      	movs	r2, #126	; 0x7e
 8002f6c:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b00010010;
 8002f6e:	4b2e      	ldr	r3, [pc, #184]	; (8003028 <letterTochar+0x3f8>)
 8002f70:	2212      	movs	r2, #18
 8002f72:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b00010010;
 8002f74:	4b2c      	ldr	r3, [pc, #176]	; (8003028 <letterTochar+0x3f8>)
 8002f76:	2212      	movs	r2, #18
 8002f78:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b00110010;
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <letterTochar+0x3f8>)
 8002f7c:	2232      	movs	r2, #50	; 0x32
 8002f7e:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b01001100;
 8002f80:	4b29      	ldr	r3, [pc, #164]	; (8003028 <letterTochar+0x3f8>)
 8002f82:	224c      	movs	r2, #76	; 0x4c
 8002f84:	711a      	strb	r2, [r3, #4]

			break;
 8002f86:	e163      	b.n	8003250 <letterTochar+0x620>
		}case 'S':{
			letterArray[0] = 0b00100100;
 8002f88:	4b27      	ldr	r3, [pc, #156]	; (8003028 <letterTochar+0x3f8>)
 8002f8a:	2224      	movs	r2, #36	; 0x24
 8002f8c:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b01001010;
 8002f8e:	4b26      	ldr	r3, [pc, #152]	; (8003028 <letterTochar+0x3f8>)
 8002f90:	224a      	movs	r2, #74	; 0x4a
 8002f92:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01001010;
 8002f94:	4b24      	ldr	r3, [pc, #144]	; (8003028 <letterTochar+0x3f8>)
 8002f96:	224a      	movs	r2, #74	; 0x4a
 8002f98:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01001010;
 8002f9a:	4b23      	ldr	r3, [pc, #140]	; (8003028 <letterTochar+0x3f8>)
 8002f9c:	224a      	movs	r2, #74	; 0x4a
 8002f9e:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00110100;
 8002fa0:	4b21      	ldr	r3, [pc, #132]	; (8003028 <letterTochar+0x3f8>)
 8002fa2:	2234      	movs	r2, #52	; 0x34
 8002fa4:	711a      	strb	r2, [r3, #4]

			break;
 8002fa6:	e153      	b.n	8003250 <letterTochar+0x620>
		}case 'T':{
			letterArray[0] = 0b00000010;
 8002fa8:	4b1f      	ldr	r3, [pc, #124]	; (8003028 <letterTochar+0x3f8>)
 8002faa:	2202      	movs	r2, #2
 8002fac:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b00000010;
 8002fae:	4b1e      	ldr	r3, [pc, #120]	; (8003028 <letterTochar+0x3f8>)
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01111110;
 8002fb4:	4b1c      	ldr	r3, [pc, #112]	; (8003028 <letterTochar+0x3f8>)
 8002fb6:	227e      	movs	r2, #126	; 0x7e
 8002fb8:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b00000010;
 8002fba:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <letterTochar+0x3f8>)
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00000010;
 8002fc0:	4b19      	ldr	r3, [pc, #100]	; (8003028 <letterTochar+0x3f8>)
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	711a      	strb	r2, [r3, #4]

			break;
 8002fc6:	e143      	b.n	8003250 <letterTochar+0x620>
		}case 'U':{
			letterArray[0] = 0b00111110;
 8002fc8:	4b17      	ldr	r3, [pc, #92]	; (8003028 <letterTochar+0x3f8>)
 8002fca:	223e      	movs	r2, #62	; 0x3e
 8002fcc:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b01000000;
 8002fce:	4b16      	ldr	r3, [pc, #88]	; (8003028 <letterTochar+0x3f8>)
 8002fd0:	2240      	movs	r2, #64	; 0x40
 8002fd2:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01000000;
 8002fd4:	4b14      	ldr	r3, [pc, #80]	; (8003028 <letterTochar+0x3f8>)
 8002fd6:	2240      	movs	r2, #64	; 0x40
 8002fd8:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01000000;
 8002fda:	4b13      	ldr	r3, [pc, #76]	; (8003028 <letterTochar+0x3f8>)
 8002fdc:	2240      	movs	r2, #64	; 0x40
 8002fde:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00111110;
 8002fe0:	4b11      	ldr	r3, [pc, #68]	; (8003028 <letterTochar+0x3f8>)
 8002fe2:	223e      	movs	r2, #62	; 0x3e
 8002fe4:	711a      	strb	r2, [r3, #4]

			break;
 8002fe6:	e133      	b.n	8003250 <letterTochar+0x620>
		}case 'V':{
			letterArray[0] = 0b00011110;
 8002fe8:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <letterTochar+0x3f8>)
 8002fea:	221e      	movs	r2, #30
 8002fec:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b00100000;
 8002fee:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <letterTochar+0x3f8>)
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01000000;
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <letterTochar+0x3f8>)
 8002ff6:	2240      	movs	r2, #64	; 0x40
 8002ff8:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b00100000;
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <letterTochar+0x3f8>)
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00011110;
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <letterTochar+0x3f8>)
 8003002:	221e      	movs	r2, #30
 8003004:	711a      	strb	r2, [r3, #4]

			break;
 8003006:	e123      	b.n	8003250 <letterTochar+0x620>
		}case 'W':{
			letterArray[0] = 0b00111110;
 8003008:	4b07      	ldr	r3, [pc, #28]	; (8003028 <letterTochar+0x3f8>)
 800300a:	223e      	movs	r2, #62	; 0x3e
 800300c:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b01000000;
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <letterTochar+0x3f8>)
 8003010:	2240      	movs	r2, #64	; 0x40
 8003012:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b00111000;
 8003014:	4b04      	ldr	r3, [pc, #16]	; (8003028 <letterTochar+0x3f8>)
 8003016:	2238      	movs	r2, #56	; 0x38
 8003018:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01000000;
 800301a:	4b03      	ldr	r3, [pc, #12]	; (8003028 <letterTochar+0x3f8>)
 800301c:	2240      	movs	r2, #64	; 0x40
 800301e:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00111111;
 8003020:	4b01      	ldr	r3, [pc, #4]	; (8003028 <letterTochar+0x3f8>)
 8003022:	223f      	movs	r2, #63	; 0x3f
 8003024:	711a      	strb	r2, [r3, #4]

			break;
 8003026:	e113      	b.n	8003250 <letterTochar+0x620>
 8003028:	200003ac 	.word	0x200003ac
		}case 'X':{
			letterArray[0] = 0b01100010;
 800302c:	4b8b      	ldr	r3, [pc, #556]	; (800325c <letterTochar+0x62c>)
 800302e:	2262      	movs	r2, #98	; 0x62
 8003030:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b00010110;
 8003032:	4b8a      	ldr	r3, [pc, #552]	; (800325c <letterTochar+0x62c>)
 8003034:	2216      	movs	r2, #22
 8003036:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b00001000;
 8003038:	4b88      	ldr	r3, [pc, #544]	; (800325c <letterTochar+0x62c>)
 800303a:	2208      	movs	r2, #8
 800303c:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b00010110;
 800303e:	4b87      	ldr	r3, [pc, #540]	; (800325c <letterTochar+0x62c>)
 8003040:	2216      	movs	r2, #22
 8003042:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b01100010;
 8003044:	4b85      	ldr	r3, [pc, #532]	; (800325c <letterTochar+0x62c>)
 8003046:	2262      	movs	r2, #98	; 0x62
 8003048:	711a      	strb	r2, [r3, #4]

			break;
 800304a:	e101      	b.n	8003250 <letterTochar+0x620>
		}case 'Y':{
			letterArray[0] = 0b00000110;
 800304c:	4b83      	ldr	r3, [pc, #524]	; (800325c <letterTochar+0x62c>)
 800304e:	2206      	movs	r2, #6
 8003050:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b00001000;
 8003052:	4b82      	ldr	r3, [pc, #520]	; (800325c <letterTochar+0x62c>)
 8003054:	2208      	movs	r2, #8
 8003056:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01110000;
 8003058:	4b80      	ldr	r3, [pc, #512]	; (800325c <letterTochar+0x62c>)
 800305a:	2270      	movs	r2, #112	; 0x70
 800305c:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b00001000;
 800305e:	4b7f      	ldr	r3, [pc, #508]	; (800325c <letterTochar+0x62c>)
 8003060:	2208      	movs	r2, #8
 8003062:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00000110;
 8003064:	4b7d      	ldr	r3, [pc, #500]	; (800325c <letterTochar+0x62c>)
 8003066:	2206      	movs	r2, #6
 8003068:	711a      	strb	r2, [r3, #4]

			break;
 800306a:	e0f1      	b.n	8003250 <letterTochar+0x620>
		}case 'Z':{
			letterArray[0] = 0b01100010;
 800306c:	4b7b      	ldr	r3, [pc, #492]	; (800325c <letterTochar+0x62c>)
 800306e:	2262      	movs	r2, #98	; 0x62
 8003070:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b01010010;
 8003072:	4b7a      	ldr	r3, [pc, #488]	; (800325c <letterTochar+0x62c>)
 8003074:	2252      	movs	r2, #82	; 0x52
 8003076:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01001010;
 8003078:	4b78      	ldr	r3, [pc, #480]	; (800325c <letterTochar+0x62c>)
 800307a:	224a      	movs	r2, #74	; 0x4a
 800307c:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01000110;
 800307e:	4b77      	ldr	r3, [pc, #476]	; (800325c <letterTochar+0x62c>)
 8003080:	2246      	movs	r2, #70	; 0x46
 8003082:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b01000010;
 8003084:	4b75      	ldr	r3, [pc, #468]	; (800325c <letterTochar+0x62c>)
 8003086:	2242      	movs	r2, #66	; 0x42
 8003088:	711a      	strb	r2, [r3, #4]

			break;
 800308a:	e0e1      	b.n	8003250 <letterTochar+0x620>
		}
		case '!':{
			letterArray[0] = 0b01011110;
 800308c:	4b73      	ldr	r3, [pc, #460]	; (800325c <letterTochar+0x62c>)
 800308e:	225e      	movs	r2, #94	; 0x5e
 8003090:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b00000000;
 8003092:	4b72      	ldr	r3, [pc, #456]	; (800325c <letterTochar+0x62c>)
 8003094:	2200      	movs	r2, #0
 8003096:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b00000000;
 8003098:	4b70      	ldr	r3, [pc, #448]	; (800325c <letterTochar+0x62c>)
 800309a:	2200      	movs	r2, #0
 800309c:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b00000000;
 800309e:	4b6f      	ldr	r3, [pc, #444]	; (800325c <letterTochar+0x62c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00000000;
 80030a4:	4b6d      	ldr	r3, [pc, #436]	; (800325c <letterTochar+0x62c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	711a      	strb	r2, [r3, #4]

			break;
 80030aa:	e0d1      	b.n	8003250 <letterTochar+0x620>
		}
		case '0':{
			letterArray[0] = 0b00111100;
 80030ac:	4b6b      	ldr	r3, [pc, #428]	; (800325c <letterTochar+0x62c>)
 80030ae:	223c      	movs	r2, #60	; 0x3c
 80030b0:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b01000110;
 80030b2:	4b6a      	ldr	r3, [pc, #424]	; (800325c <letterTochar+0x62c>)
 80030b4:	2246      	movs	r2, #70	; 0x46
 80030b6:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01011010;
 80030b8:	4b68      	ldr	r3, [pc, #416]	; (800325c <letterTochar+0x62c>)
 80030ba:	225a      	movs	r2, #90	; 0x5a
 80030bc:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01100010;
 80030be:	4b67      	ldr	r3, [pc, #412]	; (800325c <letterTochar+0x62c>)
 80030c0:	2262      	movs	r2, #98	; 0x62
 80030c2:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00111100;
 80030c4:	4b65      	ldr	r3, [pc, #404]	; (800325c <letterTochar+0x62c>)
 80030c6:	223c      	movs	r2, #60	; 0x3c
 80030c8:	711a      	strb	r2, [r3, #4]

			break;
 80030ca:	e0c1      	b.n	8003250 <letterTochar+0x620>
		}
		case '1':{
			letterArray[0] = 0b00001000;
 80030cc:	4b63      	ldr	r3, [pc, #396]	; (800325c <letterTochar+0x62c>)
 80030ce:	2208      	movs	r2, #8
 80030d0:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b00000100;
 80030d2:	4b62      	ldr	r3, [pc, #392]	; (800325c <letterTochar+0x62c>)
 80030d4:	2204      	movs	r2, #4
 80030d6:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01111110;
 80030d8:	4b60      	ldr	r3, [pc, #384]	; (800325c <letterTochar+0x62c>)
 80030da:	227e      	movs	r2, #126	; 0x7e
 80030dc:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b00000000;
 80030de:	4b5f      	ldr	r3, [pc, #380]	; (800325c <letterTochar+0x62c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00000000;
 80030e4:	4b5d      	ldr	r3, [pc, #372]	; (800325c <letterTochar+0x62c>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	711a      	strb	r2, [r3, #4]

			break;
 80030ea:	e0b1      	b.n	8003250 <letterTochar+0x620>
		}
		case '2':{
			letterArray[0] = 0b01001100;
 80030ec:	4b5b      	ldr	r3, [pc, #364]	; (800325c <letterTochar+0x62c>)
 80030ee:	224c      	movs	r2, #76	; 0x4c
 80030f0:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b01100010;
 80030f2:	4b5a      	ldr	r3, [pc, #360]	; (800325c <letterTochar+0x62c>)
 80030f4:	2262      	movs	r2, #98	; 0x62
 80030f6:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01010010;
 80030f8:	4b58      	ldr	r3, [pc, #352]	; (800325c <letterTochar+0x62c>)
 80030fa:	2252      	movs	r2, #82	; 0x52
 80030fc:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01001010;
 80030fe:	4b57      	ldr	r3, [pc, #348]	; (800325c <letterTochar+0x62c>)
 8003100:	224a      	movs	r2, #74	; 0x4a
 8003102:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b01000100;
 8003104:	4b55      	ldr	r3, [pc, #340]	; (800325c <letterTochar+0x62c>)
 8003106:	2244      	movs	r2, #68	; 0x44
 8003108:	711a      	strb	r2, [r3, #4]

			break;
 800310a:	e0a1      	b.n	8003250 <letterTochar+0x620>
		}
		case '3':{
			letterArray[0] = 0b00100100;
 800310c:	4b53      	ldr	r3, [pc, #332]	; (800325c <letterTochar+0x62c>)
 800310e:	2224      	movs	r2, #36	; 0x24
 8003110:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b01000010;
 8003112:	4b52      	ldr	r3, [pc, #328]	; (800325c <letterTochar+0x62c>)
 8003114:	2242      	movs	r2, #66	; 0x42
 8003116:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01001010;
 8003118:	4b50      	ldr	r3, [pc, #320]	; (800325c <letterTochar+0x62c>)
 800311a:	224a      	movs	r2, #74	; 0x4a
 800311c:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01001010;
 800311e:	4b4f      	ldr	r3, [pc, #316]	; (800325c <letterTochar+0x62c>)
 8003120:	224a      	movs	r2, #74	; 0x4a
 8003122:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00110100;
 8003124:	4b4d      	ldr	r3, [pc, #308]	; (800325c <letterTochar+0x62c>)
 8003126:	2234      	movs	r2, #52	; 0x34
 8003128:	711a      	strb	r2, [r3, #4]

			break;
 800312a:	e091      	b.n	8003250 <letterTochar+0x620>
		}
		case '4':{
			letterArray[0] = 0b00010000;
 800312c:	4b4b      	ldr	r3, [pc, #300]	; (800325c <letterTochar+0x62c>)
 800312e:	2210      	movs	r2, #16
 8003130:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b00011000;
 8003132:	4b4a      	ldr	r3, [pc, #296]	; (800325c <letterTochar+0x62c>)
 8003134:	2218      	movs	r2, #24
 8003136:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b00010100;
 8003138:	4b48      	ldr	r3, [pc, #288]	; (800325c <letterTochar+0x62c>)
 800313a:	2214      	movs	r2, #20
 800313c:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01111110;
 800313e:	4b47      	ldr	r3, [pc, #284]	; (800325c <letterTochar+0x62c>)
 8003140:	227e      	movs	r2, #126	; 0x7e
 8003142:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00010000;
 8003144:	4b45      	ldr	r3, [pc, #276]	; (800325c <letterTochar+0x62c>)
 8003146:	2210      	movs	r2, #16
 8003148:	711a      	strb	r2, [r3, #4]

			break;
 800314a:	e081      	b.n	8003250 <letterTochar+0x620>
		}
		case '5':{
			letterArray[0] = 0b01001110;
 800314c:	4b43      	ldr	r3, [pc, #268]	; (800325c <letterTochar+0x62c>)
 800314e:	224e      	movs	r2, #78	; 0x4e
 8003150:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b01001010;
 8003152:	4b42      	ldr	r3, [pc, #264]	; (800325c <letterTochar+0x62c>)
 8003154:	224a      	movs	r2, #74	; 0x4a
 8003156:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01001010;
 8003158:	4b40      	ldr	r3, [pc, #256]	; (800325c <letterTochar+0x62c>)
 800315a:	224a      	movs	r2, #74	; 0x4a
 800315c:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01001010;
 800315e:	4b3f      	ldr	r3, [pc, #252]	; (800325c <letterTochar+0x62c>)
 8003160:	224a      	movs	r2, #74	; 0x4a
 8003162:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00110010;
 8003164:	4b3d      	ldr	r3, [pc, #244]	; (800325c <letterTochar+0x62c>)
 8003166:	2232      	movs	r2, #50	; 0x32
 8003168:	711a      	strb	r2, [r3, #4]

			break;
 800316a:	e071      	b.n	8003250 <letterTochar+0x620>
		}
		case '6':{
			letterArray[0] = 0b00111100;
 800316c:	4b3b      	ldr	r3, [pc, #236]	; (800325c <letterTochar+0x62c>)
 800316e:	223c      	movs	r2, #60	; 0x3c
 8003170:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b01010010;
 8003172:	4b3a      	ldr	r3, [pc, #232]	; (800325c <letterTochar+0x62c>)
 8003174:	2252      	movs	r2, #82	; 0x52
 8003176:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01010010;
 8003178:	4b38      	ldr	r3, [pc, #224]	; (800325c <letterTochar+0x62c>)
 800317a:	2252      	movs	r2, #82	; 0x52
 800317c:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01010010;
 800317e:	4b37      	ldr	r3, [pc, #220]	; (800325c <letterTochar+0x62c>)
 8003180:	2252      	movs	r2, #82	; 0x52
 8003182:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00100100;
 8003184:	4b35      	ldr	r3, [pc, #212]	; (800325c <letterTochar+0x62c>)
 8003186:	2224      	movs	r2, #36	; 0x24
 8003188:	711a      	strb	r2, [r3, #4]

			break;
 800318a:	e061      	b.n	8003250 <letterTochar+0x620>
		}
		case '7':{
			letterArray[0] = 0b01000010;
 800318c:	4b33      	ldr	r3, [pc, #204]	; (800325c <letterTochar+0x62c>)
 800318e:	2242      	movs	r2, #66	; 0x42
 8003190:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b00100010;
 8003192:	4b32      	ldr	r3, [pc, #200]	; (800325c <letterTochar+0x62c>)
 8003194:	2222      	movs	r2, #34	; 0x22
 8003196:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b00010010;
 8003198:	4b30      	ldr	r3, [pc, #192]	; (800325c <letterTochar+0x62c>)
 800319a:	2212      	movs	r2, #18
 800319c:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b00001010;
 800319e:	4b2f      	ldr	r3, [pc, #188]	; (800325c <letterTochar+0x62c>)
 80031a0:	220a      	movs	r2, #10
 80031a2:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00000110;
 80031a4:	4b2d      	ldr	r3, [pc, #180]	; (800325c <letterTochar+0x62c>)
 80031a6:	2206      	movs	r2, #6
 80031a8:	711a      	strb	r2, [r3, #4]

			break;
 80031aa:	e051      	b.n	8003250 <letterTochar+0x620>
		}
		case '8':{
			letterArray[0] = 0b00110100;
 80031ac:	4b2b      	ldr	r3, [pc, #172]	; (800325c <letterTochar+0x62c>)
 80031ae:	2234      	movs	r2, #52	; 0x34
 80031b0:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b01001010;
 80031b2:	4b2a      	ldr	r3, [pc, #168]	; (800325c <letterTochar+0x62c>)
 80031b4:	224a      	movs	r2, #74	; 0x4a
 80031b6:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01001010;
 80031b8:	4b28      	ldr	r3, [pc, #160]	; (800325c <letterTochar+0x62c>)
 80031ba:	224a      	movs	r2, #74	; 0x4a
 80031bc:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01001010;
 80031be:	4b27      	ldr	r3, [pc, #156]	; (800325c <letterTochar+0x62c>)
 80031c0:	224a      	movs	r2, #74	; 0x4a
 80031c2:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00110100;
 80031c4:	4b25      	ldr	r3, [pc, #148]	; (800325c <letterTochar+0x62c>)
 80031c6:	2234      	movs	r2, #52	; 0x34
 80031c8:	711a      	strb	r2, [r3, #4]

			break;
 80031ca:	e041      	b.n	8003250 <letterTochar+0x620>
		}
		case '9':{
			letterArray[0] = 0b00100100;
 80031cc:	4b23      	ldr	r3, [pc, #140]	; (800325c <letterTochar+0x62c>)
 80031ce:	2224      	movs	r2, #36	; 0x24
 80031d0:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b01001010;
 80031d2:	4b22      	ldr	r3, [pc, #136]	; (800325c <letterTochar+0x62c>)
 80031d4:	224a      	movs	r2, #74	; 0x4a
 80031d6:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01001010;
 80031d8:	4b20      	ldr	r3, [pc, #128]	; (800325c <letterTochar+0x62c>)
 80031da:	224a      	movs	r2, #74	; 0x4a
 80031dc:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01001010;
 80031de:	4b1f      	ldr	r3, [pc, #124]	; (800325c <letterTochar+0x62c>)
 80031e0:	224a      	movs	r2, #74	; 0x4a
 80031e2:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00111100;
 80031e4:	4b1d      	ldr	r3, [pc, #116]	; (800325c <letterTochar+0x62c>)
 80031e6:	223c      	movs	r2, #60	; 0x3c
 80031e8:	711a      	strb	r2, [r3, #4]

			break;
 80031ea:	e031      	b.n	8003250 <letterTochar+0x620>
		}
		case '/':{
			letterArray[0] = 0b01000000;
 80031ec:	4b1b      	ldr	r3, [pc, #108]	; (800325c <letterTochar+0x62c>)
 80031ee:	2240      	movs	r2, #64	; 0x40
 80031f0:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b00100000;
 80031f2:	4b1a      	ldr	r3, [pc, #104]	; (800325c <letterTochar+0x62c>)
 80031f4:	2220      	movs	r2, #32
 80031f6:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b00011000;
 80031f8:	4b18      	ldr	r3, [pc, #96]	; (800325c <letterTochar+0x62c>)
 80031fa:	2218      	movs	r2, #24
 80031fc:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b00000100;
 80031fe:	4b17      	ldr	r3, [pc, #92]	; (800325c <letterTochar+0x62c>)
 8003200:	2204      	movs	r2, #4
 8003202:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00000010;
 8003204:	4b15      	ldr	r3, [pc, #84]	; (800325c <letterTochar+0x62c>)
 8003206:	2202      	movs	r2, #2
 8003208:	711a      	strb	r2, [r3, #4]

			break;
 800320a:	e021      	b.n	8003250 <letterTochar+0x620>
		}
		case ':':{
			letterArray[0] = 0b00000000;
 800320c:	4b13      	ldr	r3, [pc, #76]	; (800325c <letterTochar+0x62c>)
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b00000000;
 8003212:	4b12      	ldr	r3, [pc, #72]	; (800325c <letterTochar+0x62c>)
 8003214:	2200      	movs	r2, #0
 8003216:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b00101000;
 8003218:	4b10      	ldr	r3, [pc, #64]	; (800325c <letterTochar+0x62c>)
 800321a:	2228      	movs	r2, #40	; 0x28
 800321c:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b00000000;
 800321e:	4b0f      	ldr	r3, [pc, #60]	; (800325c <letterTochar+0x62c>)
 8003220:	2200      	movs	r2, #0
 8003222:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b00000000;
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <letterTochar+0x62c>)
 8003226:	2200      	movs	r2, #0
 8003228:	711a      	strb	r2, [r3, #4]

			break;
 800322a:	e011      	b.n	8003250 <letterTochar+0x620>
		}
		case '_':{
			letterArray[0] = 0b01000000;
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <letterTochar+0x62c>)
 800322e:	2240      	movs	r2, #64	; 0x40
 8003230:	701a      	strb	r2, [r3, #0]
			letterArray[1] = 0b01000000;
 8003232:	4b0a      	ldr	r3, [pc, #40]	; (800325c <letterTochar+0x62c>)
 8003234:	2240      	movs	r2, #64	; 0x40
 8003236:	705a      	strb	r2, [r3, #1]
			letterArray[2] = 0b01000000;
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <letterTochar+0x62c>)
 800323a:	2240      	movs	r2, #64	; 0x40
 800323c:	709a      	strb	r2, [r3, #2]
			letterArray[3] = 0b01000000;
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <letterTochar+0x62c>)
 8003240:	2240      	movs	r2, #64	; 0x40
 8003242:	70da      	strb	r2, [r3, #3]
			letterArray[4] = 0b01000000;
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <letterTochar+0x62c>)
 8003246:	2240      	movs	r2, #64	; 0x40
 8003248:	711a      	strb	r2, [r3, #4]

			break;
 800324a:	e001      	b.n	8003250 <letterTochar+0x620>
		}

		default:{
			__NOP();
 800324c:	bf00      	nop

			break;
 800324e:	bf00      	nop
		}


	}

	return letterArray;
 8003250:	4b02      	ldr	r3, [pc, #8]	; (800325c <letterTochar+0x62c>)
}
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr
 800325c:	200003ac 	.word	0x200003ac

08003260 <drawMSG>:




void drawMSG (I2C_Handler_t *ptrHandlerI2Ctr, char *msg , uint8_t sizeMsg){
 8003260:	b5b0      	push	{r4, r5, r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	4613      	mov	r3, r2
 800326c:	71fb      	strb	r3, [r7, #7]
 800326e:	466b      	mov	r3, sp
 8003270:	461d      	mov	r5, r3
	uint8_t i = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	77bb      	strb	r3, [r7, #30]
//	uint8_t renglones = 0;
	char mensaje[sizeMsg][8];
 8003276:	79fc      	ldrb	r4, [r7, #7]
 8003278:	4623      	mov	r3, r4
 800327a:	3b01      	subs	r3, #1
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	b2e0      	uxtb	r0, r4
 8003280:	f04f 0100 	mov.w	r1, #0
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	018b      	lsls	r3, r1, #6
 800328e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003292:	0182      	lsls	r2, r0, #6
 8003294:	b2e0      	uxtb	r0, r4
 8003296:	f04f 0100 	mov.w	r1, #0
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	018b      	lsls	r3, r1, #6
 80032a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032a8:	0182      	lsls	r2, r0, #6
 80032aa:	4623      	mov	r3, r4
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	3307      	adds	r3, #7
 80032b0:	08db      	lsrs	r3, r3, #3
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	ebad 0d03 	sub.w	sp, sp, r3
 80032b8:	466b      	mov	r3, sp
 80032ba:	3300      	adds	r3, #0
 80032bc:	613b      	str	r3, [r7, #16]


	if (((sizeMsg-sizeMsg%16)/16) <= 1 ){
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	111b      	asrs	r3, r3, #4
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	dc71      	bgt.n	80033aa <drawMSG+0x14a>
		setColumnAddress(ptrHandlerI2Ctr, 0);
 80032c6:	2100      	movs	r1, #0
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f7ff fc83 	bl	8002bd4 <setColumnAddress>
		while (*(msg+i)!='\0'){
 80032ce:	e048      	b.n	8003362 <drawMSG+0x102>
			for (uint8_t j = 0 ; j<8 ; j++){
 80032d0:	2300      	movs	r3, #0
 80032d2:	77fb      	strb	r3, [r7, #31]
 80032d4:	e03f      	b.n	8003356 <drawMSG+0xf6>
				if (*(msg+i) == ' '){
 80032d6:	7fbb      	ldrb	r3, [r7, #30]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	4413      	add	r3, r2
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d117      	bne.n	8003312 <drawMSG+0xb2>
					for (uint8_t k = 0; k<8 ; k++){
 80032e2:	2300      	movs	r3, #0
 80032e4:	777b      	strb	r3, [r7, #29]
 80032e6:	e00a      	b.n	80032fe <drawMSG+0x9e>
						mensaje[i][k]= 0;
 80032e8:	7fba      	ldrb	r2, [r7, #30]
 80032ea:	7f7b      	ldrb	r3, [r7, #29]
 80032ec:	6939      	ldr	r1, [r7, #16]
 80032ee:	00d2      	lsls	r2, r2, #3
 80032f0:	440a      	add	r2, r1
 80032f2:	4413      	add	r3, r2
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
					for (uint8_t k = 0; k<8 ; k++){
 80032f8:	7f7b      	ldrb	r3, [r7, #29]
 80032fa:	3301      	adds	r3, #1
 80032fc:	777b      	strb	r3, [r7, #29]
 80032fe:	7f7b      	ldrb	r3, [r7, #29]
 8003300:	2b07      	cmp	r3, #7
 8003302:	d9f1      	bls.n	80032e8 <drawMSG+0x88>
					}
					i++;
 8003304:	7fbb      	ldrb	r3, [r7, #30]
 8003306:	3301      	adds	r3, #1
 8003308:	77bb      	strb	r3, [r7, #30]
					j--;
 800330a:	7ffb      	ldrb	r3, [r7, #31]
 800330c:	3b01      	subs	r3, #1
 800330e:	77fb      	strb	r3, [r7, #31]
 8003310:	e01e      	b.n	8003350 <drawMSG+0xf0>

				}else if (j<=4){
 8003312:	7ffb      	ldrb	r3, [r7, #31]
 8003314:	2b04      	cmp	r3, #4
 8003316:	d813      	bhi.n	8003340 <drawMSG+0xe0>
					mensaje[i][j]= *(letterTochar (*(msg+i))+j);
 8003318:	7fbb      	ldrb	r3, [r7, #30]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	4413      	add	r3, r2
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fc85 	bl	8002c30 <letterTochar>
 8003326:	4602      	mov	r2, r0
 8003328:	7ffb      	ldrb	r3, [r7, #31]
 800332a:	18d1      	adds	r1, r2, r3
 800332c:	7fba      	ldrb	r2, [r7, #30]
 800332e:	7ffb      	ldrb	r3, [r7, #31]
 8003330:	7808      	ldrb	r0, [r1, #0]
 8003332:	6939      	ldr	r1, [r7, #16]
 8003334:	00d2      	lsls	r2, r2, #3
 8003336:	440a      	add	r2, r1
 8003338:	4413      	add	r3, r2
 800333a:	4602      	mov	r2, r0
 800333c:	701a      	strb	r2, [r3, #0]
 800333e:	e007      	b.n	8003350 <drawMSG+0xf0>
				}else{
					mensaje[i][j]= 0;
 8003340:	7fba      	ldrb	r2, [r7, #30]
 8003342:	7ffb      	ldrb	r3, [r7, #31]
 8003344:	6939      	ldr	r1, [r7, #16]
 8003346:	00d2      	lsls	r2, r2, #3
 8003348:	440a      	add	r2, r1
 800334a:	4413      	add	r3, r2
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0 ; j<8 ; j++){
 8003350:	7ffb      	ldrb	r3, [r7, #31]
 8003352:	3301      	adds	r3, #1
 8003354:	77fb      	strb	r3, [r7, #31]
 8003356:	7ffb      	ldrb	r3, [r7, #31]
 8003358:	2b07      	cmp	r3, #7
 800335a:	d9bc      	bls.n	80032d6 <drawMSG+0x76>
				}
			}
			i++;
 800335c:	7fbb      	ldrb	r3, [r7, #30]
 800335e:	3301      	adds	r3, #1
 8003360:	77bb      	strb	r3, [r7, #30]
		while (*(msg+i)!='\0'){
 8003362:	7fbb      	ldrb	r3, [r7, #30]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	4413      	add	r3, r2
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1b0      	bne.n	80032d0 <drawMSG+0x70>
		}

		for (uint8_t s = 0; s < sizeMsg ; s++){
 800336e:	2300      	movs	r3, #0
 8003370:	773b      	strb	r3, [r7, #28]
 8003372:	e016      	b.n	80033a2 <drawMSG+0x142>
			for (uint8_t l = 0; l < 8 ; l++){
 8003374:	2300      	movs	r3, #0
 8003376:	76fb      	strb	r3, [r7, #27]
 8003378:	e00d      	b.n	8003396 <drawMSG+0x136>
				sendDataOneByte(ptrHandlerI2Ctr, mensaje[s][l]);
 800337a:	7f3a      	ldrb	r2, [r7, #28]
 800337c:	7efb      	ldrb	r3, [r7, #27]
 800337e:	6939      	ldr	r1, [r7, #16]
 8003380:	00d2      	lsls	r2, r2, #3
 8003382:	440a      	add	r2, r1
 8003384:	4413      	add	r3, r2
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	4619      	mov	r1, r3
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f812 	bl	80033b4 <sendDataOneByte>
			for (uint8_t l = 0; l < 8 ; l++){
 8003390:	7efb      	ldrb	r3, [r7, #27]
 8003392:	3301      	adds	r3, #1
 8003394:	76fb      	strb	r3, [r7, #27]
 8003396:	7efb      	ldrb	r3, [r7, #27]
 8003398:	2b07      	cmp	r3, #7
 800339a:	d9ee      	bls.n	800337a <drawMSG+0x11a>
		for (uint8_t s = 0; s < sizeMsg ; s++){
 800339c:	7f3b      	ldrb	r3, [r7, #28]
 800339e:	3301      	adds	r3, #1
 80033a0:	773b      	strb	r3, [r7, #28]
 80033a2:	7f3a      	ldrb	r2, [r7, #28]
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d3e4      	bcc.n	8003374 <drawMSG+0x114>
 80033aa:	46ad      	mov	sp, r5
//		}
//	}



}
 80033ac:	bf00      	nop
 80033ae:	3720      	adds	r7, #32
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bdb0      	pop	{r4, r5, r7, pc}

080033b4 <sendDataOneByte>:


void sendDataOneByte (I2C_Handler_t *ptrHandlerI2C, char oneByte){
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	70fb      	strb	r3, [r7, #3]

		i2c_startTransaction(ptrHandlerI2C);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff fae2 	bl	800298a <i2c_startTransaction>

		i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	791b      	ldrb	r3, [r3, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	4619      	mov	r1, r3
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff faff 	bl	80029d2 <i2c_sendSlaveAddressRW>

		i2c_sendDataByte (ptrHandlerI2C, OLED_CONTROLBYTE_DISPLAY);
 80033d4:	2140      	movs	r1, #64	; 0x40
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff fb22 	bl	8002a20 <i2c_sendDataByte>

		i2c_sendDataByte(ptrHandlerI2C, oneByte);
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	4619      	mov	r1, r3
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff fb1d 	bl	8002a20 <i2c_sendDataByte>

		i2c_stopTransaction(ptrHandlerI2C);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff fabe 	bl	8002968 <i2c_stopTransaction>
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <pwm_Config>:
 *      Author: namontoy
 */
#include "PwmDriver.h"

/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a62      	ldr	r2, [pc, #392]	; (800358c <pwm_Config+0x198>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d106      	bne.n	8003414 <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8003406:	4b62      	ldr	r3, [pc, #392]	; (8003590 <pwm_Config+0x19c>)
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	4a61      	ldr	r2, [pc, #388]	; (8003590 <pwm_Config+0x19c>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	6453      	str	r3, [r2, #68]	; 0x44
 8003412:	e030      	b.n	8003476 <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341c:	d106      	bne.n	800342c <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800341e:	4b5c      	ldr	r3, [pc, #368]	; (8003590 <pwm_Config+0x19c>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	4a5b      	ldr	r2, [pc, #364]	; (8003590 <pwm_Config+0x19c>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	6413      	str	r3, [r2, #64]	; 0x40
 800342a:	e024      	b.n	8003476 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a58      	ldr	r2, [pc, #352]	; (8003594 <pwm_Config+0x1a0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d106      	bne.n	8003444 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8003436:	4b56      	ldr	r3, [pc, #344]	; (8003590 <pwm_Config+0x19c>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	4a55      	ldr	r2, [pc, #340]	; (8003590 <pwm_Config+0x19c>)
 800343c:	f043 0302 	orr.w	r3, r3, #2
 8003440:	6413      	str	r3, [r2, #64]	; 0x40
 8003442:	e018      	b.n	8003476 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a53      	ldr	r2, [pc, #332]	; (8003598 <pwm_Config+0x1a4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d106      	bne.n	800345c <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800344e:	4b50      	ldr	r3, [pc, #320]	; (8003590 <pwm_Config+0x19c>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	4a4f      	ldr	r2, [pc, #316]	; (8003590 <pwm_Config+0x19c>)
 8003454:	f043 0304 	orr.w	r3, r3, #4
 8003458:	6413      	str	r3, [r2, #64]	; 0x40
 800345a:	e00c      	b.n	8003476 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a4e      	ldr	r2, [pc, #312]	; (800359c <pwm_Config+0x1a8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d106      	bne.n	8003474 <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8003466:	4b4a      	ldr	r3, [pc, #296]	; (8003590 <pwm_Config+0x19c>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	4a49      	ldr	r2, [pc, #292]	; (8003590 <pwm_Config+0x19c>)
 800346c:	f043 0308 	orr.w	r3, r3, #8
 8003470:	6413      	str	r3, [r2, #64]	; 0x40
 8003472:	e000      	b.n	8003476 <pwm_Config+0x82>
	}
	else{
		__NOP();
 8003474:	bf00      	nop
	}

	/* 1. Cargamos la frecuencia deseada */
	setFrequency(ptrPwmHandler);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f8f6 	bl	8003668 <setFrequency>

	/* 2. Cargamos el valor del dutty-Cycle*/
	setDuttyCycle(ptrPwmHandler);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f91b 	bl	80036b8 <setDuttyCycle>

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0210 	bic.w	r2, r2, #16
 8003490:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2200      	movs	r2, #0
 8003498:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	791b      	ldrb	r3, [r3, #4]
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d86e      	bhi.n	8003580 <pwm_Config+0x18c>
 80034a2:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <pwm_Config+0xb4>)
 80034a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a8:	080034b9 	.word	0x080034b9
 80034ac:	080034eb 	.word	0x080034eb
 80034b0:	0800351d 	.word	0x0800351d
 80034b4:	0800354f 	.word	0x0800354f
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699a      	ldr	r2, [r3, #24]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0203 	bic.w	r2, r2, #3
 80034c6:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80034d6:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0208 	orr.w	r2, r2, #8
 80034e6:	619a      	str	r2, [r3, #24]

		break;
 80034e8:	e04b      	b.n	8003582 <pwm_Config+0x18e>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699a      	ldr	r2, [r3, #24]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034f8:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699a      	ldr	r2, [r3, #24]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003508:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699a      	ldr	r2, [r3, #24]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003518:	619a      	str	r2, [r3, #24]

		break;
 800351a:	e032      	b.n	8003582 <pwm_Config+0x18e>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69da      	ldr	r2, [r3, #28]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0203 	bic.w	r2, r2, #3
 800352a:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69da      	ldr	r2, [r3, #28]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800353a:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69da      	ldr	r2, [r3, #28]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0208 	orr.w	r2, r2, #8
 800354a:	61da      	str	r2, [r3, #28]

		break;
 800354c:	e019      	b.n	8003582 <pwm_Config+0x18e>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800355c:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800356c:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69da      	ldr	r2, [r3, #28]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800357c:	61da      	str	r2, [r3, #28]

		break;
 800357e:	e000      	b.n	8003582 <pwm_Config+0x18e>
	}

	default:{
		break;
 8003580:	bf00      	nop

	/* 6. Activamos la salida seleccionada */

	}// fin del switch-case

}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40010000 	.word	0x40010000
 8003590:	40023800 	.word	0x40023800
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800
 800359c:	40000c00 	.word	0x40000c00

080035a0 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
	enableOutput(ptrPwmHandler);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f817 	bl	80035ec <enableOutput>

}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <stopPwmSignal>:

/* Función para desactivar el Timer y detener todo el módulo PWM*/
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0201 	bic.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
	disableOutput(ptrPwmHandler);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f8da 	bl	8003798 <disableOutput>
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <enableOutput>:

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
void enableOutput(PWM_Handler_t *ptrPwmHandler) {
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	switch (ptrPwmHandler->config.channel) {
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	791b      	ldrb	r3, [r3, #4]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d82f      	bhi.n	800365c <enableOutput+0x70>
 80035fc:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <enableOutput+0x18>)
 80035fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003602:	bf00      	nop
 8003604:	08003615 	.word	0x08003615
 8003608:	08003627 	.word	0x08003627
 800360c:	08003639 	.word	0x08003639
 8003610:	0800364b 	.word	0x0800364b
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6a1a      	ldr	r2, [r3, #32]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	621a      	str	r2, [r3, #32]

		break;
 8003624:	e01b      	b.n	800365e <enableOutput+0x72>
	}

	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6a1a      	ldr	r2, [r3, #32]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 0210 	orr.w	r2, r2, #16
 8003634:	621a      	str	r2, [r3, #32]

		break;
 8003636:	e012      	b.n	800365e <enableOutput+0x72>
	}

	case PWM_CHANNEL_3: {
		// Activamos la salida del canal 3
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6a1a      	ldr	r2, [r3, #32]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003646:	621a      	str	r2, [r3, #32]

		break;
 8003648:	e009      	b.n	800365e <enableOutput+0x72>
	}

	case PWM_CHANNEL_4: {
		// Activamos la salida del canal 4
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6a1a      	ldr	r2, [r3, #32]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003658:	621a      	str	r2, [r3, #32]

		break;
 800365a:	e000      	b.n	800365e <enableOutput+0x72>
	}

	default: {
		break;
 800365c:	bf00      	nop
	}
	}
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr

08003668 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6892      	ldr	r2, [r2, #8]
 8003678:	629a      	str	r2, [r3, #40]	; 0x28

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	899a      	ldrh	r2, [r3, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr

0800368e <updateFrequency>:


/* Función para actualizar la frecuencia, funciona de la mano con setFrequency */
void updateFrequency(PWM_Handler_t *ptrPwmHandler, uint16_t newFreq){
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	460b      	mov	r3, r1
 8003698:	807b      	strh	r3, [r7, #2]
	// Actualizamos el registro que manipula el periodo
    ptrPwmHandler->config.periodo = newFreq*10;
 800369a:	887b      	ldrh	r3, [r7, #2]
 800369c:	461a      	mov	r2, r3
 800369e:	0092      	lsls	r2, r2, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	819a      	strh	r2, [r3, #12]

	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff ffdc 	bl	8003668 <setFrequency>
}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <setDuttyCycle>:

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	791b      	ldrb	r3, [r3, #4]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d84f      	bhi.n	8003768 <setDuttyCycle+0xb0>
 80036c8:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <setDuttyCycle+0x18>)
 80036ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ce:	bf00      	nop
 80036d0:	080036e1 	.word	0x080036e1
 80036d4:	08003703 	.word	0x08003703
 80036d8:	08003725 	.word	0x08003725
 80036dc:	08003747 	.word	0x08003747
	case PWM_CHANNEL_1:{
		uint32_t op = (ptrPwmHandler->config.duttyCicle) * (ptrPwmHandler->config.periodo);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	89db      	ldrh	r3, [r3, #14]
 80036e4:	461a      	mov	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	899b      	ldrh	r3, [r3, #12]
 80036ea:	fb03 f302 	mul.w	r3, r3, r2
 80036ee:	60bb      	str	r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	491f      	ldr	r1, [pc, #124]	; (8003774 <setDuttyCycle+0xbc>)
 80036f8:	fba1 1202 	umull	r1, r2, r1, r2
 80036fc:	0952      	lsrs	r2, r2, #5
 80036fe:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8003700:	e033      	b.n	800376a <setDuttyCycle+0xb2>
	}

	case PWM_CHANNEL_2:{
		uint32_t op = (ptrPwmHandler->config.duttyCicle) * (ptrPwmHandler->config.periodo);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	89db      	ldrh	r3, [r3, #14]
 8003706:	461a      	mov	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	899b      	ldrh	r3, [r3, #12]
 800370c:	fb03 f302 	mul.w	r3, r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4916      	ldr	r1, [pc, #88]	; (8003774 <setDuttyCycle+0xbc>)
 800371a:	fba1 1202 	umull	r1, r2, r1, r2
 800371e:	0952      	lsrs	r2, r2, #5
 8003720:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8003722:	e022      	b.n	800376a <setDuttyCycle+0xb2>
	}

	case PWM_CHANNEL_3:{
		uint32_t op = (ptrPwmHandler->config.duttyCicle) * (ptrPwmHandler->config.periodo);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	89db      	ldrh	r3, [r3, #14]
 8003728:	461a      	mov	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	899b      	ldrh	r3, [r3, #12]
 800372e:	fb03 f302 	mul.w	r3, r3, r2
 8003732:	613b      	str	r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	490e      	ldr	r1, [pc, #56]	; (8003774 <setDuttyCycle+0xbc>)
 800373c:	fba1 1202 	umull	r1, r2, r1, r2
 8003740:	0952      	lsrs	r2, r2, #5
 8003742:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8003744:	e011      	b.n	800376a <setDuttyCycle+0xb2>
	}

	case PWM_CHANNEL_4:{
		uint32_t op = (ptrPwmHandler->config.duttyCicle) * (ptrPwmHandler->config.periodo);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	89db      	ldrh	r3, [r3, #14]
 800374a:	461a      	mov	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	899b      	ldrh	r3, [r3, #12]
 8003750:	fb03 f302 	mul.w	r3, r3, r2
 8003754:	617b      	str	r3, [r7, #20]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4905      	ldr	r1, [pc, #20]	; (8003774 <setDuttyCycle+0xbc>)
 800375e:	fba1 1202 	umull	r1, r2, r1, r2
 8003762:	0952      	lsrs	r2, r2, #5
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8003766:	e000      	b.n	800376a <setDuttyCycle+0xb2>
	}

	default:{
		break;
 8003768:	bf00      	nop
	}

	}// fin del switch-case

}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	51eb851f 	.word	0x51eb851f

08003778 <updateDuttyCycle>:


/* Función para actualizar el Dutty, funciona de la mano con setDuttyCycle */
void updateDuttyCycle(PWM_Handler_t *ptrPwmHandler, uint16_t newDutty){
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	807b      	strh	r3, [r7, #2]
	// Actualizamos el registro que manipula el dutty
    ptrPwmHandler->config.duttyCicle = newDutty;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	887a      	ldrh	r2, [r7, #2]
 8003788:	81da      	strh	r2, [r3, #14]

	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
    setDuttyCycle(ptrPwmHandler);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff ff94 	bl	80036b8 <setDuttyCycle>
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <disableOutput>:
		}
		}
}


void disableOutput(PWM_Handler_t *ptrPwmHandler){
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	791b      	ldrb	r3, [r3, #4]
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d82f      	bhi.n	8003808 <disableOutput+0x70>
 80037a8:	a201      	add	r2, pc, #4	; (adr r2, 80037b0 <disableOutput+0x18>)
 80037aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ae:	bf00      	nop
 80037b0:	080037c1 	.word	0x080037c1
 80037b4:	080037d3 	.word	0x080037d3
 80037b8:	080037e5 	.word	0x080037e5
 80037bc:	080037f7 	.word	0x080037f7
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6a1a      	ldr	r2, [r3, #32]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	621a      	str	r2, [r3, #32]

			break;
 80037d0:	e01b      	b.n	800380a <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6a1a      	ldr	r2, [r3, #32]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0210 	bic.w	r2, r2, #16
 80037e0:	621a      	str	r2, [r3, #32]

			break;
 80037e2:	e012      	b.n	800380a <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6a1a      	ldr	r2, [r3, #32]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037f2:	621a      	str	r2, [r3, #32]

			break;
 80037f4:	e009      	b.n	800380a <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6a1a      	ldr	r2, [r3, #32]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003804:	621a      	str	r2, [r3, #32]

			break;
 8003806:	e000      	b.n	800380a <disableOutput+0x72>
		}

		default: {
			break;
 8003808:	bf00      	nop
		}
		}

}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <Rtc_Congif>:

uint8_t actualTime[7];



void Rtc_Congif (RTC_Handler_t *ptrHandlerRtc){
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	//Activamos el PWR parapoder desactivar su sistema de bloqueo en el RTC
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800381c:	4b89      	ldr	r3, [pc, #548]	; (8003a44 <Rtc_Congif+0x230>)
 800381e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003822:	641a      	str	r2, [r3, #64]	; 0x40
	//Desactivamos la proteccion de PWR para modificar registros
	PWR->CR |= PWR_CR_DBP;
 8003824:	4b88      	ldr	r3, [pc, #544]	; (8003a48 <Rtc_Congif+0x234>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a87      	ldr	r2, [pc, #540]	; (8003a48 <Rtc_Congif+0x234>)
 800382a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382e:	6013      	str	r3, [r2, #0]

	/* 1. Debemos activar el LSE */

	//Encendemos el LSE clock
	RCC->BDCR |= RCC_BDCR_LSEON;
 8003830:	4b84      	ldr	r3, [pc, #528]	; (8003a44 <Rtc_Congif+0x230>)
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	4a83      	ldr	r2, [pc, #524]	; (8003a44 <Rtc_Congif+0x230>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6713      	str	r3, [r2, #112]	; 0x70
	// Esperamos hasta que el LSE este listo para ser usado
	while(!(RCC->BDCR & RCC_BDCR_LSERDY)){
 800383c:	e000      	b.n	8003840 <Rtc_Congif+0x2c>
		__NOP();
 800383e:	bf00      	nop
	while(!(RCC->BDCR & RCC_BDCR_LSERDY)){
 8003840:	4b80      	ldr	r3, [pc, #512]	; (8003a44 <Rtc_Congif+0x230>)
 8003842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0f8      	beq.n	800383e <Rtc_Congif+0x2a>
	}
	// Seleccionamos el LSE para RTC
	RCC->BDCR |= (0b01 << RCC_BDCR_RTCSEL_Pos);
 800384c:	4b7d      	ldr	r3, [pc, #500]	; (8003a44 <Rtc_Congif+0x230>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003850:	4a7c      	ldr	r2, [pc, #496]	; (8003a44 <Rtc_Congif+0x230>)
 8003852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003856:	6713      	str	r3, [r2, #112]	; 0x70
	// Activamos el RTC clock
	RCC->BDCR |= RCC_BDCR_RTCEN;
 8003858:	4b7a      	ldr	r3, [pc, #488]	; (8003a44 <Rtc_Congif+0x230>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	4a79      	ldr	r2, [pc, #484]	; (8003a44 <Rtc_Congif+0x230>)
 800385e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003862:	6713      	str	r3, [r2, #112]	; 0x70


	//Activamos el modo escritura de los registros RTC
	ptrHandlerRtc->ptrRTC->WPR =  0xCA;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	22ca      	movs	r2, #202	; 0xca
 800386a:	625a      	str	r2, [r3, #36]	; 0x24
	ptrHandlerRtc->ptrRTC->WPR =  0x53;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2253      	movs	r2, #83	; 0x53
 8003872:	625a      	str	r2, [r3, #36]	; 0x24

	//CONFIGURACION DEL CALENDARIO :
	//Seteamos el bit INIT para entrar en el initialization mode
	ptrHandlerRtc->ptrRTC->ISR |= RTC_ISR_INIT;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003882:	60da      	str	r2, [r3, #12]
	// Y permitimos las actualizaciones del calendario
	ptrHandlerRtc->ptrRTC->ISR |= RTC_ISR_INITF;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003892:	60da      	str	r2, [r3, #12]

	//Configuramos para que tengamos un reloj de un segundo de precision
	// Para ello ponemos PREDIV_A y PREDIV_S en RTC_PRER
	ptrHandlerRtc->ptrRTC->PRER |= (0x0FF << RTC_PRER_PREDIV_S_Pos);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80038a2:	611a      	str	r2, [r3, #16]
	ptrHandlerRtc->ptrRTC->PRER |= (0x07F << RTC_PRER_PREDIV_A_Pos);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
 80038b2:	611a      	str	r2, [r3, #16]

	//Seteamos el horario actual en formato 24H

	Rtc_BDC_Convertion(ptrHandlerRtc);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f8e3 	bl	8003a80 <Rtc_BDC_Convertion>

	//Sincronizamos el contador del calendario con los valores iniciales puestos en los registros de la hora
	ptrHandlerRtc->ptrRTC->CR |= RTC_CR_BYPSHAD;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0220 	orr.w	r2, r2, #32
 80038c8:	609a      	str	r2, [r3, #8]

	//Seteamos la hora, minutos y segundos
	ptrHandlerRtc->ptrRTC->TR = 0;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]

	//Seteamos el formato de 24 horas
	ptrHandlerRtc->ptrRTC->TR &= ~(RTC_TR_PM);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80038e0:	601a      	str	r2, [r3, #0]

	ptrHandlerRtc->ptrRTC->TR |= (SU << RTC_TR_SU_Pos);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b58      	ldr	r3, [pc, #352]	; (8003a4c <Rtc_Congif+0x238>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	4619      	mov	r1, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]
	ptrHandlerRtc->ptrRTC->TR |= (SD << RTC_TR_ST_Pos);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4b54      	ldr	r3, [pc, #336]	; (8003a50 <Rtc_Congif+0x23c>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	4619      	mov	r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	601a      	str	r2, [r3, #0]
	ptrHandlerRtc->ptrRTC->TR |= (MU << RTC_TR_MNU_Pos);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4b50      	ldr	r3, [pc, #320]	; (8003a54 <Rtc_Congif+0x240>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	4619      	mov	r1, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	601a      	str	r2, [r3, #0]
	ptrHandlerRtc->ptrRTC->TR |= (MD << RTC_TR_MNT_Pos);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4b4b      	ldr	r3, [pc, #300]	; (8003a58 <Rtc_Congif+0x244>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	031b      	lsls	r3, r3, #12
 800392e:	4619      	mov	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	601a      	str	r2, [r3, #0]
	ptrHandlerRtc->ptrRTC->TR |= (HU << RTC_TR_HU_Pos);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	4b47      	ldr	r3, [pc, #284]	; (8003a5c <Rtc_Congif+0x248>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	041b      	lsls	r3, r3, #16
 8003944:	4619      	mov	r1, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	601a      	str	r2, [r3, #0]
	ptrHandlerRtc->ptrRTC->TR |= (HD << RTC_TR_HT_Pos);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	4b42      	ldr	r3, [pc, #264]	; (8003a60 <Rtc_Congif+0x24c>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	051b      	lsls	r3, r3, #20
 800395a:	4619      	mov	r1, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	601a      	str	r2, [r3, #0]

	//Seteamos la fecha, dias, mes y año

	ptrHandlerRtc->ptrRTC->DR = 0;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2200      	movs	r2, #0
 800396a:	605a      	str	r2, [r3, #4]

	ptrHandlerRtc->ptrRTC->DR |= (DU << RTC_DR_DU_Pos);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	4b3c      	ldr	r3, [pc, #240]	; (8003a64 <Rtc_Congif+0x250>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	4619      	mov	r1, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	605a      	str	r2, [r3, #4]
	ptrHandlerRtc->ptrRTC->DR |= (DD << RTC_DR_DT_Pos);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	4b38      	ldr	r3, [pc, #224]	; (8003a68 <Rtc_Congif+0x254>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	4619      	mov	r1, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
	ptrHandlerRtc->ptrRTC->DR |= (MoU << RTC_DR_MU_Pos);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	4b33      	ldr	r3, [pc, #204]	; (8003a6c <Rtc_Congif+0x258>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	4619      	mov	r1, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	605a      	str	r2, [r3, #4]
	ptrHandlerRtc->ptrRTC->DR |= (MoD << RTC_DR_MT_Pos);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	4b2f      	ldr	r3, [pc, #188]	; (8003a70 <Rtc_Congif+0x25c>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	031b      	lsls	r3, r3, #12
 80039b8:	4619      	mov	r1, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
	ptrHandlerRtc->ptrRTC->DR |= (ptrHandlerRtc->RTC_config.rtcWeekDay << RTC_DR_WDU_Pos);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	799b      	ldrb	r3, [r3, #6]
 80039cc:	035b      	lsls	r3, r3, #13
 80039ce:	4619      	mov	r1, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]
	ptrHandlerRtc->ptrRTC->DR |= (YU << RTC_DR_YU_Pos);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	4b25      	ldr	r3, [pc, #148]	; (8003a74 <Rtc_Congif+0x260>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	041b      	lsls	r3, r3, #16
 80039e4:	4619      	mov	r1, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]
	ptrHandlerRtc->ptrRTC->DR |= (YD << RTC_DR_YT_Pos);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	4b20      	ldr	r3, [pc, #128]	; (8003a78 <Rtc_Congif+0x264>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	051b      	lsls	r3, r3, #20
 80039fa:	4619      	mov	r1, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	605a      	str	r2, [r3, #4]

	//Salimos del modo INIT de inicializacion
	RCC->BDCR |= RCC_BDCR_RTCEN;
 8003a04:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <Rtc_Congif+0x230>)
 8003a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a08:	4a0e      	ldr	r2, [pc, #56]	; (8003a44 <Rtc_Congif+0x230>)
 8003a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a0e:	6713      	str	r3, [r2, #112]	; 0x70
	RTC->ISR &= ~RTC_ISR_INIT;
 8003a10:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <Rtc_Congif+0x268>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4a19      	ldr	r2, [pc, #100]	; (8003a7c <Rtc_Congif+0x268>)
 8003a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a1a:	60d3      	str	r3, [r2, #12]
	PWR->CR &= ~ PWR_CR_DBP;
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <Rtc_Congif+0x234>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a09      	ldr	r2, [pc, #36]	; (8003a48 <Rtc_Congif+0x234>)
 8003a22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a26:	6013      	str	r3, [r2, #0]

	RTC->CR &= ~RTC_CR_BYPSHAD;
 8003a28:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <Rtc_Congif+0x268>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a13      	ldr	r2, [pc, #76]	; (8003a7c <Rtc_Congif+0x268>)
 8003a2e:	f023 0320 	bic.w	r3, r3, #32
 8003a32:	6093      	str	r3, [r2, #8]
	RTC->WPR = (0xFF); // Key Lock write protection
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <Rtc_Congif+0x268>)
 8003a36:	22ff      	movs	r2, #255	; 0xff
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24



}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	200003b5 	.word	0x200003b5
 8003a50:	200003b6 	.word	0x200003b6
 8003a54:	200003b3 	.word	0x200003b3
 8003a58:	200003b4 	.word	0x200003b4
 8003a5c:	200003b1 	.word	0x200003b1
 8003a60:	200003b2 	.word	0x200003b2
 8003a64:	200003b9 	.word	0x200003b9
 8003a68:	200003ba 	.word	0x200003ba
 8003a6c:	200003b7 	.word	0x200003b7
 8003a70:	200003b8 	.word	0x200003b8
 8003a74:	200003bb 	.word	0x200003bb
 8003a78:	200003bc 	.word	0x200003bc
 8003a7c:	40002800 	.word	0x40002800

08003a80 <Rtc_BDC_Convertion>:

 void Rtc_BDC_Convertion (RTC_Handler_t *ptrHandlerRtc){
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
	// convertimos el formato de horas en BDC
	 HU = (ptrHandlerRtc->RTC_config.rtcHours%10);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	7a9a      	ldrb	r2, [r3, #10]
 8003a8c:	4b76      	ldr	r3, [pc, #472]	; (8003c68 <Rtc_BDC_Convertion+0x1e8>)
 8003a8e:	fba3 1302 	umull	r1, r3, r3, r2
 8003a92:	08d9      	lsrs	r1, r3, #3
 8003a94:	460b      	mov	r3, r1
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	4b72      	ldr	r3, [pc, #456]	; (8003c6c <Rtc_BDC_Convertion+0x1ec>)
 8003aa2:	701a      	strb	r2, [r3, #0]
	 HD = (ptrHandlerRtc->RTC_config.rtcHours-ptrHandlerRtc->RTC_config.rtcHours%10)/10;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	7a9b      	ldrb	r3, [r3, #10]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	7a9a      	ldrb	r2, [r3, #10]
 8003aae:	4b6e      	ldr	r3, [pc, #440]	; (8003c68 <Rtc_BDC_Convertion+0x1e8>)
 8003ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab4:	08d9      	lsrs	r1, r3, #3
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	1ac3      	subs	r3, r0, r3
 8003ac4:	4a6a      	ldr	r2, [pc, #424]	; (8003c70 <Rtc_BDC_Convertion+0x1f0>)
 8003ac6:	fb82 1203 	smull	r1, r2, r2, r3
 8003aca:	1092      	asrs	r2, r2, #2
 8003acc:	17db      	asrs	r3, r3, #31
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	4b68      	ldr	r3, [pc, #416]	; (8003c74 <Rtc_BDC_Convertion+0x1f4>)
 8003ad4:	701a      	strb	r2, [r3, #0]
	 // convertimos el formato de Minutos en BDC
	 MU = (ptrHandlerRtc->RTC_config.rtcMinutes%10);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	7ada      	ldrb	r2, [r3, #11]
 8003ada:	4b63      	ldr	r3, [pc, #396]	; (8003c68 <Rtc_BDC_Convertion+0x1e8>)
 8003adc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae0:	08d9      	lsrs	r1, r3, #3
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	4b62      	ldr	r3, [pc, #392]	; (8003c78 <Rtc_BDC_Convertion+0x1f8>)
 8003af0:	701a      	strb	r2, [r3, #0]
	 MD = (ptrHandlerRtc->RTC_config.rtcMinutes-ptrHandlerRtc->RTC_config.rtcMinutes%10)/10;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	7adb      	ldrb	r3, [r3, #11]
 8003af6:	4618      	mov	r0, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	7ada      	ldrb	r2, [r3, #11]
 8003afc:	4b5a      	ldr	r3, [pc, #360]	; (8003c68 <Rtc_BDC_Convertion+0x1e8>)
 8003afe:	fba3 1302 	umull	r1, r3, r3, r2
 8003b02:	08d9      	lsrs	r1, r3, #3
 8003b04:	460b      	mov	r3, r1
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	1ac3      	subs	r3, r0, r3
 8003b12:	4a57      	ldr	r2, [pc, #348]	; (8003c70 <Rtc_BDC_Convertion+0x1f0>)
 8003b14:	fb82 1203 	smull	r1, r2, r2, r3
 8003b18:	1092      	asrs	r2, r2, #2
 8003b1a:	17db      	asrs	r3, r3, #31
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	4b56      	ldr	r3, [pc, #344]	; (8003c7c <Rtc_BDC_Convertion+0x1fc>)
 8003b22:	701a      	strb	r2, [r3, #0]
	 // convertimos el formato de segundos en BDC
	 SU = (ptrHandlerRtc->RTC_config.rtcSeconds%10);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	7b1a      	ldrb	r2, [r3, #12]
 8003b28:	4b4f      	ldr	r3, [pc, #316]	; (8003c68 <Rtc_BDC_Convertion+0x1e8>)
 8003b2a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b2e:	08d9      	lsrs	r1, r3, #3
 8003b30:	460b      	mov	r3, r1
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	4b50      	ldr	r3, [pc, #320]	; (8003c80 <Rtc_BDC_Convertion+0x200>)
 8003b3e:	701a      	strb	r2, [r3, #0]
	 SD = (ptrHandlerRtc->RTC_config.rtcSeconds-ptrHandlerRtc->RTC_config.rtcSeconds%10)/10;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	7b1b      	ldrb	r3, [r3, #12]
 8003b44:	4618      	mov	r0, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	7b1a      	ldrb	r2, [r3, #12]
 8003b4a:	4b47      	ldr	r3, [pc, #284]	; (8003c68 <Rtc_BDC_Convertion+0x1e8>)
 8003b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b50:	08d9      	lsrs	r1, r3, #3
 8003b52:	460b      	mov	r3, r1
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	1ac3      	subs	r3, r0, r3
 8003b60:	4a43      	ldr	r2, [pc, #268]	; (8003c70 <Rtc_BDC_Convertion+0x1f0>)
 8003b62:	fb82 1203 	smull	r1, r2, r2, r3
 8003b66:	1092      	asrs	r2, r2, #2
 8003b68:	17db      	asrs	r3, r3, #31
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	4b45      	ldr	r3, [pc, #276]	; (8003c84 <Rtc_BDC_Convertion+0x204>)
 8003b70:	701a      	strb	r2, [r3, #0]
	 // convertimos el formato de meses en BDC
	 MoU = (ptrHandlerRtc->RTC_config.rtcMonth%10);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	795a      	ldrb	r2, [r3, #5]
 8003b76:	4b3c      	ldr	r3, [pc, #240]	; (8003c68 <Rtc_BDC_Convertion+0x1e8>)
 8003b78:	fba3 1302 	umull	r1, r3, r3, r2
 8003b7c:	08d9      	lsrs	r1, r3, #3
 8003b7e:	460b      	mov	r3, r1
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	4b3f      	ldr	r3, [pc, #252]	; (8003c88 <Rtc_BDC_Convertion+0x208>)
 8003b8c:	701a      	strb	r2, [r3, #0]
	 MoD = (ptrHandlerRtc->RTC_config.rtcMonth-ptrHandlerRtc->RTC_config.rtcMonth%10)/10;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	795b      	ldrb	r3, [r3, #5]
 8003b92:	4618      	mov	r0, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	795a      	ldrb	r2, [r3, #5]
 8003b98:	4b33      	ldr	r3, [pc, #204]	; (8003c68 <Rtc_BDC_Convertion+0x1e8>)
 8003b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b9e:	08d9      	lsrs	r1, r3, #3
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	1ac3      	subs	r3, r0, r3
 8003bae:	4a30      	ldr	r2, [pc, #192]	; (8003c70 <Rtc_BDC_Convertion+0x1f0>)
 8003bb0:	fb82 1203 	smull	r1, r2, r2, r3
 8003bb4:	1092      	asrs	r2, r2, #2
 8003bb6:	17db      	asrs	r3, r3, #31
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	4b33      	ldr	r3, [pc, #204]	; (8003c8c <Rtc_BDC_Convertion+0x20c>)
 8003bbe:	701a      	strb	r2, [r3, #0]
	 // convertimos el formato de dias en BDC
	 DU = (ptrHandlerRtc->RTC_config.rtcDay%10);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	891a      	ldrh	r2, [r3, #8]
 8003bc4:	4b28      	ldr	r3, [pc, #160]	; (8003c68 <Rtc_BDC_Convertion+0x1e8>)
 8003bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8003bca:	08d9      	lsrs	r1, r3, #3
 8003bcc:	460b      	mov	r3, r1
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	4b2d      	ldr	r3, [pc, #180]	; (8003c90 <Rtc_BDC_Convertion+0x210>)
 8003bdc:	701a      	strb	r2, [r3, #0]
	 DD = (ptrHandlerRtc->RTC_config.rtcDay-ptrHandlerRtc->RTC_config.rtcDay%10)/10;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	891b      	ldrh	r3, [r3, #8]
 8003be2:	4618      	mov	r0, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	891a      	ldrh	r2, [r3, #8]
 8003be8:	4b1f      	ldr	r3, [pc, #124]	; (8003c68 <Rtc_BDC_Convertion+0x1e8>)
 8003bea:	fba3 1302 	umull	r1, r3, r3, r2
 8003bee:	08d9      	lsrs	r1, r3, #3
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	1ac3      	subs	r3, r0, r3
 8003bfe:	4a1c      	ldr	r2, [pc, #112]	; (8003c70 <Rtc_BDC_Convertion+0x1f0>)
 8003c00:	fb82 1203 	smull	r1, r2, r2, r3
 8003c04:	1092      	asrs	r2, r2, #2
 8003c06:	17db      	asrs	r3, r3, #31
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <Rtc_BDC_Convertion+0x214>)
 8003c0e:	701a      	strb	r2, [r3, #0]
	 //Convertimos el formato de años en BBC
	 YU = (ptrHandlerRtc->RTC_config.rtcYear%10);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	791a      	ldrb	r2, [r3, #4]
 8003c14:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <Rtc_BDC_Convertion+0x1e8>)
 8003c16:	fba3 1302 	umull	r1, r3, r3, r2
 8003c1a:	08d9      	lsrs	r1, r3, #3
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <Rtc_BDC_Convertion+0x218>)
 8003c2a:	701a      	strb	r2, [r3, #0]
	 YD = (ptrHandlerRtc->RTC_config.rtcYear-ptrHandlerRtc->RTC_config.rtcYear%10)/10;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	791b      	ldrb	r3, [r3, #4]
 8003c30:	4618      	mov	r0, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	791a      	ldrb	r2, [r3, #4]
 8003c36:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <Rtc_BDC_Convertion+0x1e8>)
 8003c38:	fba3 1302 	umull	r1, r3, r3, r2
 8003c3c:	08d9      	lsrs	r1, r3, #3
 8003c3e:	460b      	mov	r3, r1
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	1ac3      	subs	r3, r0, r3
 8003c4c:	4a08      	ldr	r2, [pc, #32]	; (8003c70 <Rtc_BDC_Convertion+0x1f0>)
 8003c4e:	fb82 1203 	smull	r1, r2, r2, r3
 8003c52:	1092      	asrs	r2, r2, #2
 8003c54:	17db      	asrs	r3, r3, #31
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <Rtc_BDC_Convertion+0x21c>)
 8003c5c:	701a      	strb	r2, [r3, #0]
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr
 8003c68:	cccccccd 	.word	0xcccccccd
 8003c6c:	200003b1 	.word	0x200003b1
 8003c70:	66666667 	.word	0x66666667
 8003c74:	200003b2 	.word	0x200003b2
 8003c78:	200003b3 	.word	0x200003b3
 8003c7c:	200003b4 	.word	0x200003b4
 8003c80:	200003b5 	.word	0x200003b5
 8003c84:	200003b6 	.word	0x200003b6
 8003c88:	200003b7 	.word	0x200003b7
 8003c8c:	200003b8 	.word	0x200003b8
 8003c90:	200003b9 	.word	0x200003b9
 8003c94:	200003ba 	.word	0x200003ba
 8003c98:	200003bb 	.word	0x200003bb
 8003c9c:	200003bc 	.word	0x200003bc

08003ca0 <getDate>:

uint8_t actualTime[7] = {0};


uint8_t *getDate(void){
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0


	Time = RTC->TR;
 8003ca4:	4b31      	ldr	r3, [pc, #196]	; (8003d6c <getDate+0xcc>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a31      	ldr	r2, [pc, #196]	; (8003d70 <getDate+0xd0>)
 8003caa:	6013      	str	r3, [r2, #0]
	Date = RTC->DR;
 8003cac:	4b2f      	ldr	r3, [pc, #188]	; (8003d6c <getDate+0xcc>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	4a30      	ldr	r2, [pc, #192]	; (8003d74 <getDate+0xd4>)
 8003cb2:	6013      	str	r3, [r2, #0]

	Hour	= (Time & 0x3F0000) >> RTC_TR_HU_Pos;
 8003cb4:	4b2e      	ldr	r3, [pc, #184]	; (8003d70 <getDate+0xd0>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	0c1b      	lsrs	r3, r3, #16
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	4b2d      	ldr	r3, [pc, #180]	; (8003d78 <getDate+0xd8>)
 8003cc4:	701a      	strb	r2, [r3, #0]
	Minutes = (Time & 0x007F00) >> RTC_TR_MNU_Pos;
 8003cc6:	4b2a      	ldr	r3, [pc, #168]	; (8003d70 <getDate+0xd0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	0a1b      	lsrs	r3, r3, #8
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	4b29      	ldr	r3, [pc, #164]	; (8003d7c <getDate+0xdc>)
 8003cd6:	701a      	strb	r2, [r3, #0]
	Seconds = Time  & 0x7F;
 8003cd8:	4b25      	ldr	r3, [pc, #148]	; (8003d70 <getDate+0xd0>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	4b26      	ldr	r3, [pc, #152]	; (8003d80 <getDate+0xe0>)
 8003ce6:	701a      	strb	r2, [r3, #0]
	Weekday = (Date & 0xE000)   >> RTC_DR_WDU_Pos;
 8003ce8:	4b22      	ldr	r3, [pc, #136]	; (8003d74 <getDate+0xd4>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	0b5b      	lsrs	r3, r3, #13
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	4b23      	ldr	r3, [pc, #140]	; (8003d84 <getDate+0xe4>)
 8003cf8:	701a      	strb	r2, [r3, #0]
	Year    = (Date & 0xFF0000) >> RTC_DR_YU_Pos;
 8003cfa:	4b1e      	ldr	r3, [pc, #120]	; (8003d74 <getDate+0xd4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	0c1b      	lsrs	r3, r3, #16
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	4b21      	ldr	r3, [pc, #132]	; (8003d88 <getDate+0xe8>)
 8003d04:	701a      	strb	r2, [r3, #0]
	Month   = (Date & 0x1F00)   >> RTC_DR_MU_Pos;
 8003d06:	4b1b      	ldr	r3, [pc, #108]	; (8003d74 <getDate+0xd4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	0a1b      	lsrs	r3, r3, #8
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f003 031f 	and.w	r3, r3, #31
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	4b1d      	ldr	r3, [pc, #116]	; (8003d8c <getDate+0xec>)
 8003d16:	701a      	strb	r2, [r3, #0]
	Day     =  Date  & 0x3F;
 8003d18:	4b16      	ldr	r3, [pc, #88]	; (8003d74 <getDate+0xd4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	4b1a      	ldr	r3, [pc, #104]	; (8003d90 <getDate+0xf0>)
 8003d26:	801a      	strh	r2, [r3, #0]

	actualTime[0] = Seconds;
 8003d28:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <getDate+0xe0>)
 8003d2a:	781a      	ldrb	r2, [r3, #0]
 8003d2c:	4b19      	ldr	r3, [pc, #100]	; (8003d94 <getDate+0xf4>)
 8003d2e:	701a      	strb	r2, [r3, #0]
	actualTime[1] = Minutes;
 8003d30:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <getDate+0xdc>)
 8003d32:	781a      	ldrb	r2, [r3, #0]
 8003d34:	4b17      	ldr	r3, [pc, #92]	; (8003d94 <getDate+0xf4>)
 8003d36:	705a      	strb	r2, [r3, #1]
	actualTime[2] = Hour;
 8003d38:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <getDate+0xd8>)
 8003d3a:	781a      	ldrb	r2, [r3, #0]
 8003d3c:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <getDate+0xf4>)
 8003d3e:	709a      	strb	r2, [r3, #2]
	actualTime[3] = Weekday;
 8003d40:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <getDate+0xe4>)
 8003d42:	781a      	ldrb	r2, [r3, #0]
 8003d44:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <getDate+0xf4>)
 8003d46:	70da      	strb	r2, [r3, #3]
	actualTime[4] = Day;
 8003d48:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <getDate+0xf0>)
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <getDate+0xf4>)
 8003d50:	711a      	strb	r2, [r3, #4]
	actualTime[5] = Month;
 8003d52:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <getDate+0xec>)
 8003d54:	781a      	ldrb	r2, [r3, #0]
 8003d56:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <getDate+0xf4>)
 8003d58:	715a      	strb	r2, [r3, #5]
	actualTime[6] = Year;
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <getDate+0xe8>)
 8003d5c:	781a      	ldrb	r2, [r3, #0]
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <getDate+0xf4>)
 8003d60:	719a      	strb	r2, [r3, #6]

	return actualTime;
 8003d62:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <getDate+0xf4>)
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr
 8003d6c:	40002800 	.word	0x40002800
 8003d70:	200003c8 	.word	0x200003c8
 8003d74:	200003cc 	.word	0x200003cc
 8003d78:	200003bd 	.word	0x200003bd
 8003d7c:	200003be 	.word	0x200003be
 8003d80:	200003bf 	.word	0x200003bf
 8003d84:	200003c4 	.word	0x200003c4
 8003d88:	200003c0 	.word	0x200003c0
 8003d8c:	200003c1 	.word	0x200003c1
 8003d90:	200003c2 	.word	0x200003c2
 8003d94:	200003d0 	.word	0x200003d0

08003d98 <__NVIC_EnableIRQ>:
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	db0b      	blt.n	8003dc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	f003 021f 	and.w	r2, r3, #31
 8003db0:	4906      	ldr	r1, [pc, #24]	; (8003dcc <__NVIC_EnableIRQ+0x34>)
 8003db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db6:	095b      	lsrs	r3, r3, #5
 8003db8:	2001      	movs	r0, #1
 8003dba:	fa00 f202 	lsl.w	r2, r0, r2
 8003dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr
 8003dcc:	e000e100 	.word	0xe000e100

08003dd0 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003dd8:	b672      	cpsid	i
}
 8003dda:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a8e      	ldr	r2, [pc, #568]	; (800401c <USART_Config+0x24c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d106      	bne.n	8003df4 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8003de6:	4b8e      	ldr	r3, [pc, #568]	; (8004020 <USART_Config+0x250>)
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	4a8d      	ldr	r2, [pc, #564]	; (8004020 <USART_Config+0x250>)
 8003dec:	f043 0310 	orr.w	r3, r3, #16
 8003df0:	6453      	str	r3, [r2, #68]	; 0x44
 8003df2:	e018      	b.n	8003e26 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a8a      	ldr	r2, [pc, #552]	; (8004024 <USART_Config+0x254>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d106      	bne.n	8003e0c <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8003dfe:	4b88      	ldr	r3, [pc, #544]	; (8004020 <USART_Config+0x250>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	4a87      	ldr	r2, [pc, #540]	; (8004020 <USART_Config+0x250>)
 8003e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e08:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0a:	e00c      	b.n	8003e26 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a85      	ldr	r2, [pc, #532]	; (8004028 <USART_Config+0x258>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d106      	bne.n	8003e24 <USART_Config+0x54>
			RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8003e16:	4b82      	ldr	r3, [pc, #520]	; (8004020 <USART_Config+0x250>)
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	4a81      	ldr	r2, [pc, #516]	; (8004020 <USART_Config+0x250>)
 8003e1c:	f043 0320 	orr.w	r3, r3, #32
 8003e20:	6453      	str	r3, [r2, #68]	; 0x44
 8003e22:	e000      	b.n	8003e26 <USART_Config+0x56>
	}
	else{
		__NOP();
 8003e24:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2200      	movs	r2, #0
 8003e34:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	7a5b      	ldrb	r3, [r3, #9]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d025      	beq.n	8003e8a <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	7a5b      	ldrb	r3, [r3, #9]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d110      	bne.n	8003e68 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e54:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e64:	60da      	str	r2, [r3, #12]
 8003e66:	e018      	b.n	8003e9a <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e76:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e86:	60da      	str	r2, [r3, #12]
 8003e88:	e007      	b.n	8003e9a <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e98:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	7a1b      	ldrb	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d108      	bne.n	8003eb4 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003eb0:	60da      	str	r2, [r3, #12]
 8003eb2:	e007      	b.n	8003ec4 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ec2:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	7a9b      	ldrb	r3, [r3, #10]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d82f      	bhi.n	8003f2c <USART_Config+0x15c>
 8003ecc:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <USART_Config+0x104>)
 8003ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed2:	bf00      	nop
 8003ed4:	08003ee5 	.word	0x08003ee5
 8003ed8:	08003ef7 	.word	0x08003ef7
 8003edc:	08003f09 	.word	0x08003f09
 8003ee0:	08003f1b 	.word	0x08003f1b
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003ef2:	611a      	str	r2, [r3, #16]
		break;
 8003ef4:	e023      	b.n	8003f3e <USART_Config+0x16e>
	}
	case USART_STOPBIT_0_5: {
		// Debemoscargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f04:	611a      	str	r2, [r3, #16]
		break;
 8003f06:	e01a      	b.n	8003f3e <USART_Config+0x16e>
	}
	case USART_STOPBIT_2: {
		// Debemoscargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f16:	611a      	str	r2, [r3, #16]
		break;
 8003f18:	e011      	b.n	8003f3e <USART_Config+0x16e>
	}
	case USART_STOPBIT_1_5: {
		// Debemoscargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003f28:	611a      	str	r2, [r3, #16]
		break;
 8003f2a:	e008      	b.n	8003f3e <USART_Config+0x16e>
	}
	default: {
		// En el caso por defecto seleccionamos 1 bit de parada
		ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003f3a:	611a      	str	r2, [r3, #16]
		break;
 8003f3c:	bf00      	nop
	}
	}

	// 2.5 Configuracion del Baudrate (SFR USART_BRR)
	// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	79db      	ldrb	r3, [r3, #7]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d105      	bne.n	8003f52 <USART_Config+0x182>
		// El valor a cargar es 104.1875 -> Mantiza = 104,fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x0683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f240 6283 	movw	r2, #1667	; 0x683
 8003f4e:	609a      	str	r2, [r3, #8]
 8003f50:	e01b      	b.n	8003f8a <USART_Config+0x1ba>
	}

	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	79db      	ldrb	r3, [r3, #7]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d105      	bne.n	8003f66 <USART_Config+0x196>
		// El valor a cargar es 52.0625 -> Mantiza = 52,fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0 = 1
		//Configurando el Baudrate generator para una velocidad de 19200bps
		ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f240 3241 	movw	r2, #833	; 0x341
 8003f62:	609a      	str	r2, [r3, #8]
 8003f64:	e011      	b.n	8003f8a <USART_Config+0x1ba>
	}

	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_28800){
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	79db      	ldrb	r3, [r3, #7]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d105      	bne.n	8003f7a <USART_Config+0x1aa>
		// El valor a cargar es 34,7222 -> Mantiza = 34, fraction = 0.7222
		// Mantiza = 34 = 0x22, fraction = 16 * 0.7222 = 11,55 = C
		//Configurando el Baudrate generator para una velocidad de 115200bps
		ptrUsartHandler->ptrUSARTx->BRR = 0x22C;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	e007      	b.n	8003f8a <USART_Config+0x1ba>

	}

	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	79db      	ldrb	r3, [r3, #7]
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d103      	bne.n	8003f8a <USART_Config+0x1ba>
		// El valor a cargar es 8.6875 -> Mantiza = 8,fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11
		//Configurando el Baudrate generator para una velocidad de 115200bps
		ptrUsartHandler->ptrUSARTx->BRR = 0x08B;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	228b      	movs	r2, #139	; 0x8b
 8003f88:	609a      	str	r2, [r3, #8]

	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	799b      	ldrb	r3, [r3, #6]
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d82e      	bhi.n	8003ff0 <USART_Config+0x220>
 8003f92:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <USART_Config+0x1c8>)
 8003f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f98:	08003fa9 	.word	0x08003fa9
 8003f9c:	08003fbb 	.word	0x08003fbb
 8003fa0:	08003fcd 	.word	0x08003fcd
 8003fa4:	08003fdf 	.word	0x08003fdf
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0208 	orr.w	r2, r2, #8
 8003fb6:	60da      	str	r2, [r3, #12]
		break;
 8003fb8:	e023      	b.n	8004002 <USART_Config+0x232>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f042 0204 	orr.w	r2, r2, #4
 8003fc8:	60da      	str	r2, [r3, #12]
		break;
 8003fca:	e01a      	b.n	8004002 <USART_Config+0x232>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 020c 	orr.w	r2, r2, #12
 8003fda:	60da      	str	r2, [r3, #12]
		break;
 8003fdc:	e011      	b.n	8004002 <USART_Config+0x232>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 020c 	bic.w	r2, r2, #12
 8003fec:	60da      	str	r2, [r3, #12]
		break;
 8003fee:	e008      	b.n	8004002 <USART_Config+0x232>
	}
	
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 020c 	bic.w	r2, r2, #12
 8003ffe:	60da      	str	r2, [r3, #12]
		break;
 8004000:	bf00      	nop
	}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	799b      	ldrb	r3, [r3, #6]
 8004006:	2b03      	cmp	r3, #3
 8004008:	d010      	beq.n	800402c <USART_Config+0x25c>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004018:	60da      	str	r2, [r3, #12]
 800401a:	e00f      	b.n	800403c <USART_Config+0x26c>
 800401c:	40011000 	.word	0x40011000
 8004020:	40023800 	.word	0x40023800
 8004024:	40004400 	.word	0x40004400
 8004028:	40011400 	.word	0x40011400
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800403a:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	795b      	ldrb	r3, [r3, #5]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d124      	bne.n	800408e <USART_Config+0x2be>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0220 	orr.w	r2, r2, #32
 8004052:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a2c      	ldr	r2, [pc, #176]	; (800410c <USART_Config+0x33c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d103      	bne.n	8004066 <USART_Config+0x296>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 800405e:	2025      	movs	r0, #37	; 0x25
 8004060:	f7ff fe9a 	bl	8003d98 <__NVIC_EnableIRQ>
 8004064:	e01b      	b.n	800409e <USART_Config+0x2ce>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a29      	ldr	r2, [pc, #164]	; (8004110 <USART_Config+0x340>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d103      	bne.n	8004078 <USART_Config+0x2a8>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8004070:	2026      	movs	r0, #38	; 0x26
 8004072:	f7ff fe91 	bl	8003d98 <__NVIC_EnableIRQ>
 8004076:	e012      	b.n	800409e <USART_Config+0x2ce>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a25      	ldr	r2, [pc, #148]	; (8004114 <USART_Config+0x344>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d103      	bne.n	800408a <USART_Config+0x2ba>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8004082:	2047      	movs	r0, #71	; 0x47
 8004084:	f7ff fe88 	bl	8003d98 <__NVIC_EnableIRQ>
 8004088:	e009      	b.n	800409e <USART_Config+0x2ce>
		}
		else{
				__NOP();
 800408a:	bf00      	nop
 800408c:	e007      	b.n	800409e <USART_Config+0x2ce>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0220 	bic.w	r2, r2, #32
 800409c:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	791b      	ldrb	r3, [r3, #4]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d124      	bne.n	80040f0 <USART_Config+0x320>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040b4:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a14      	ldr	r2, [pc, #80]	; (800410c <USART_Config+0x33c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d103      	bne.n	80040c8 <USART_Config+0x2f8>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 80040c0:	2025      	movs	r0, #37	; 0x25
 80040c2:	f7ff fe69 	bl	8003d98 <__NVIC_EnableIRQ>
 80040c6:	e01b      	b.n	8004100 <USART_Config+0x330>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a10      	ldr	r2, [pc, #64]	; (8004110 <USART_Config+0x340>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d103      	bne.n	80040da <USART_Config+0x30a>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 80040d2:	2026      	movs	r0, #38	; 0x26
 80040d4:	f7ff fe60 	bl	8003d98 <__NVIC_EnableIRQ>
 80040d8:	e012      	b.n	8004100 <USART_Config+0x330>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a0d      	ldr	r2, [pc, #52]	; (8004114 <USART_Config+0x344>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d103      	bne.n	80040ec <USART_Config+0x31c>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 80040e4:	2047      	movs	r0, #71	; 0x47
 80040e6:	f7ff fe57 	bl	8003d98 <__NVIC_EnableIRQ>
 80040ea:	e009      	b.n	8004100 <USART_Config+0x330>
		}
		else{
				__NOP();
 80040ec:	bf00      	nop
 80040ee:	e007      	b.n	8004100 <USART_Config+0x330>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040fe:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8004100:	b662      	cpsie	i
}
 8004102:	bf00      	nop
	}

	__enable_irq();
}
 8004104:	bf00      	nop
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40011000 	.word	0x40011000
 8004110:	40004400 	.word	0x40004400
 8004114:	40011400 	.word	0x40011400

08004118 <writeChar>:

/* funcion para escribir un solo char */
int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8004122:	e000      	b.n	8004126 <writeChar+0xe>
		__NOP();
 8004124:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0f7      	beq.n	8004124 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	605a      	str	r2, [r3, #4]

	return dataToSend;
 800413c:	683b      	ldr	r3, [r7, #0]
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr

08004148 <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 8004152:	e008      	b.n	8004166 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	4619      	mov	r1, r3
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff ffdc 	bl	8004118 <writeChar>
		msgToSend ++ ;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	3301      	adds	r3, #1
 8004164:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f2      	bne.n	8004154 <writeMsg+0xc>
	}
}
 800416e:	bf00      	nop
 8004170:	bf00      	nop
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <usart2Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
	__NOP();
 800417c:	bf00      	nop
}
 800417e:	bf00      	nop
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr

08004186 <usart6Rx_Callback>:
__attribute__((weak))	void usart1Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart6Rx_Callback(void){
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0
	__NOP();
 800418a:	bf00      	nop
}
 800418c:	bf00      	nop
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
	return auxRxData;
 8004198:	4b02      	ldr	r3, [pc, #8]	; (80041a4 <getRxData+0x10>)
 800419a:	781b      	ldrb	r3, [r3, #0]
}
 800419c:	4618      	mov	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr
 80041a4:	200003d7 	.word	0x200003d7

080041a8 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0

	USART_Handler_t *ptrUSARTHandler = {0};
 80041ae:	2300      	movs	r3, #0
 80041b0:	607b      	str	r3, [r7, #4]

	if(!(USART2->SR & USART_SR_PE)){
 80041b2:	4b15      	ldr	r3, [pc, #84]	; (8004208 <USART2_IRQHandler+0x60>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10d      	bne.n	80041da <USART2_IRQHandler+0x32>

		if(USART2->SR & USART_SR_RXNE){
 80041be:	4b12      	ldr	r3, [pc, #72]	; (8004208 <USART2_IRQHandler+0x60>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d011      	beq.n	80041ee <USART2_IRQHandler+0x46>
			auxRxData = (uint8_t) USART2->DR;
 80041ca:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <USART2_IRQHandler+0x60>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	4b0e      	ldr	r3, [pc, #56]	; (800420c <USART2_IRQHandler+0x64>)
 80041d2:	701a      	strb	r2, [r3, #0]
			usart2Rx_Callback();
 80041d4:	f7ff ffd0 	bl	8004178 <usart2Rx_Callback>
 80041d8:	e009      	b.n	80041ee <USART2_IRQHandler+0x46>
		}

	}else{
		USART2->SR &= ~(USART_SR_PE);
 80041da:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <USART2_IRQHandler+0x60>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a0a      	ldr	r2, [pc, #40]	; (8004208 <USART2_IRQHandler+0x60>)
 80041e0:	f023 0301 	bic.w	r3, r3, #1
 80041e4:	6013      	str	r3, [r2, #0]
		writeMsg(ptrUSARTHandler, "Mensaje corrompido, enviar de nuevo");
 80041e6:	490a      	ldr	r1, [pc, #40]	; (8004210 <USART2_IRQHandler+0x68>)
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff ffad 	bl	8004148 <writeMsg>
	}
	if(USART2->SR & USART_SR_TXE){
 80041ee:	4b06      	ldr	r3, [pc, #24]	; (8004208 <USART2_IRQHandler+0x60>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <USART2_IRQHandler+0x56>
		usart2Rx_Callback();
 80041fa:	f7ff ffbd 	bl	8004178 <usart2Rx_Callback>
	}
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40004400 	.word	0x40004400
 800420c:	200003d7 	.word	0x200003d7
 8004210:	08009b08 	.word	0x08009b08

08004214 <USART1_IRQHandler>:

void USART1_IRQHandler(void){
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0

	USART_Handler_t *ptrUSARTHandler = {0};
 800421a:	2300      	movs	r3, #0
 800421c:	607b      	str	r3, [r7, #4]

	if(!(USART1->SR & USART_SR_PE)){
 800421e:	4b15      	ldr	r3, [pc, #84]	; (8004274 <USART1_IRQHandler+0x60>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10d      	bne.n	8004246 <USART1_IRQHandler+0x32>

		if(USART1->SR & USART_SR_RXNE){
 800422a:	4b12      	ldr	r3, [pc, #72]	; (8004274 <USART1_IRQHandler+0x60>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	d011      	beq.n	800425a <USART1_IRQHandler+0x46>
			auxRxData = (uint8_t) USART1->DR;
 8004236:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <USART1_IRQHandler+0x60>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	b2da      	uxtb	r2, r3
 800423c:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <USART1_IRQHandler+0x64>)
 800423e:	701a      	strb	r2, [r3, #0]
			usart6Rx_Callback();
 8004240:	f7ff ffa1 	bl	8004186 <usart6Rx_Callback>
 8004244:	e009      	b.n	800425a <USART1_IRQHandler+0x46>
		}

	}else{
		USART1->SR &= ~(USART_SR_PE);
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <USART1_IRQHandler+0x60>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a0a      	ldr	r2, [pc, #40]	; (8004274 <USART1_IRQHandler+0x60>)
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	6013      	str	r3, [r2, #0]
		writeMsg(ptrUSARTHandler, "Mensaje corrompido, enviar de nuevo");
 8004252:	490a      	ldr	r1, [pc, #40]	; (800427c <USART1_IRQHandler+0x68>)
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff ff77 	bl	8004148 <writeMsg>
	}
	if(USART1->SR & USART_SR_TXE){
 800425a:	4b06      	ldr	r3, [pc, #24]	; (8004274 <USART1_IRQHandler+0x60>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <USART1_IRQHandler+0x56>
		usart1Rx_Callback();
 8004266:	f7fd fa7d 	bl	8001764 <usart1Rx_Callback>
	}

}
 800426a:	bf00      	nop
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40011000 	.word	0x40011000
 8004278:	200003d7 	.word	0x200003d7
 800427c:	08009b08 	.word	0x08009b08

08004280 <USART6_IRQHandler>:

void USART6_IRQHandler(void){
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0

	USART_Handler_t *ptrUSARTHandler = {0};
 8004286:	2300      	movs	r3, #0
 8004288:	607b      	str	r3, [r7, #4]
	if(!(USART6->SR & USART_SR_PE)){
 800428a:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <USART6_IRQHandler+0x60>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10d      	bne.n	80042b2 <USART6_IRQHandler+0x32>

		if(USART6->SR & USART_SR_RXNE){
 8004296:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <USART6_IRQHandler+0x60>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d011      	beq.n	80042c6 <USART6_IRQHandler+0x46>
			auxRxData = (uint8_t) USART6->DR;
 80042a2:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <USART6_IRQHandler+0x60>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	4b0e      	ldr	r3, [pc, #56]	; (80042e4 <USART6_IRQHandler+0x64>)
 80042aa:	701a      	strb	r2, [r3, #0]
			usart6Rx_Callback();
 80042ac:	f7ff ff6b 	bl	8004186 <usart6Rx_Callback>
 80042b0:	e009      	b.n	80042c6 <USART6_IRQHandler+0x46>
		}

	}else{
		USART6->SR &= ~(USART_SR_PE);
 80042b2:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <USART6_IRQHandler+0x60>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <USART6_IRQHandler+0x60>)
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	6013      	str	r3, [r2, #0]
		writeMsg(ptrUSARTHandler, "Mensaje corrompido, enviar de nuevo");
 80042be:	490a      	ldr	r1, [pc, #40]	; (80042e8 <USART6_IRQHandler+0x68>)
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff ff41 	bl	8004148 <writeMsg>
	}
	if(USART6->SR & USART_SR_TXE){
 80042c6:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <USART6_IRQHandler+0x60>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <USART6_IRQHandler+0x56>
		usart6Rx_Callback();
 80042d2:	f7ff ff58 	bl	8004186 <usart6Rx_Callback>
	}
}
 80042d6:	bf00      	nop
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40011400 	.word	0x40011400
 80042e4:	200003d7 	.word	0x200003d7
 80042e8:	08009b08 	.word	0x08009b08

080042ec <__errno>:
 80042ec:	4b01      	ldr	r3, [pc, #4]	; (80042f4 <__errno+0x8>)
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000000 	.word	0x20000000

080042f8 <__libc_init_array>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	4d0d      	ldr	r5, [pc, #52]	; (8004330 <__libc_init_array+0x38>)
 80042fc:	4c0d      	ldr	r4, [pc, #52]	; (8004334 <__libc_init_array+0x3c>)
 80042fe:	1b64      	subs	r4, r4, r5
 8004300:	10a4      	asrs	r4, r4, #2
 8004302:	2600      	movs	r6, #0
 8004304:	42a6      	cmp	r6, r4
 8004306:	d109      	bne.n	800431c <__libc_init_array+0x24>
 8004308:	4d0b      	ldr	r5, [pc, #44]	; (8004338 <__libc_init_array+0x40>)
 800430a:	4c0c      	ldr	r4, [pc, #48]	; (800433c <__libc_init_array+0x44>)
 800430c:	f005 faaa 	bl	8009864 <_init>
 8004310:	1b64      	subs	r4, r4, r5
 8004312:	10a4      	asrs	r4, r4, #2
 8004314:	2600      	movs	r6, #0
 8004316:	42a6      	cmp	r6, r4
 8004318:	d105      	bne.n	8004326 <__libc_init_array+0x2e>
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004320:	4798      	blx	r3
 8004322:	3601      	adds	r6, #1
 8004324:	e7ee      	b.n	8004304 <__libc_init_array+0xc>
 8004326:	f855 3b04 	ldr.w	r3, [r5], #4
 800432a:	4798      	blx	r3
 800432c:	3601      	adds	r6, #1
 800432e:	e7f2      	b.n	8004316 <__libc_init_array+0x1e>
 8004330:	0800a078 	.word	0x0800a078
 8004334:	0800a078 	.word	0x0800a078
 8004338:	0800a078 	.word	0x0800a078
 800433c:	0800a07c 	.word	0x0800a07c

08004340 <memset>:
 8004340:	4402      	add	r2, r0
 8004342:	4603      	mov	r3, r0
 8004344:	4293      	cmp	r3, r2
 8004346:	d100      	bne.n	800434a <memset+0xa>
 8004348:	4770      	bx	lr
 800434a:	f803 1b01 	strb.w	r1, [r3], #1
 800434e:	e7f9      	b.n	8004344 <memset+0x4>

08004350 <__cvt>:
 8004350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004354:	b088      	sub	sp, #32
 8004356:	2b00      	cmp	r3, #0
 8004358:	461f      	mov	r7, r3
 800435a:	4614      	mov	r4, r2
 800435c:	bfb8      	it	lt
 800435e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004362:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004364:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004366:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800436a:	bfb6      	itet	lt
 800436c:	461f      	movlt	r7, r3
 800436e:	2300      	movge	r3, #0
 8004370:	232d      	movlt	r3, #45	; 0x2d
 8004372:	7013      	strb	r3, [r2, #0]
 8004374:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004376:	f023 0820 	bic.w	r8, r3, #32
 800437a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800437e:	d005      	beq.n	800438c <__cvt+0x3c>
 8004380:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004384:	d100      	bne.n	8004388 <__cvt+0x38>
 8004386:	3501      	adds	r5, #1
 8004388:	2302      	movs	r3, #2
 800438a:	e000      	b.n	800438e <__cvt+0x3e>
 800438c:	2303      	movs	r3, #3
 800438e:	aa07      	add	r2, sp, #28
 8004390:	9204      	str	r2, [sp, #16]
 8004392:	aa06      	add	r2, sp, #24
 8004394:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004398:	e9cd 3500 	strd	r3, r5, [sp]
 800439c:	4622      	mov	r2, r4
 800439e:	463b      	mov	r3, r7
 80043a0:	f001 fe26 	bl	8005ff0 <_dtoa_r>
 80043a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80043a8:	4606      	mov	r6, r0
 80043aa:	d102      	bne.n	80043b2 <__cvt+0x62>
 80043ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80043ae:	07db      	lsls	r3, r3, #31
 80043b0:	d522      	bpl.n	80043f8 <__cvt+0xa8>
 80043b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043b6:	eb06 0905 	add.w	r9, r6, r5
 80043ba:	d110      	bne.n	80043de <__cvt+0x8e>
 80043bc:	7833      	ldrb	r3, [r6, #0]
 80043be:	2b30      	cmp	r3, #48	; 0x30
 80043c0:	d10a      	bne.n	80043d8 <__cvt+0x88>
 80043c2:	2200      	movs	r2, #0
 80043c4:	2300      	movs	r3, #0
 80043c6:	4620      	mov	r0, r4
 80043c8:	4639      	mov	r1, r7
 80043ca:	f7fc fb95 	bl	8000af8 <__aeabi_dcmpeq>
 80043ce:	b918      	cbnz	r0, 80043d8 <__cvt+0x88>
 80043d0:	f1c5 0501 	rsb	r5, r5, #1
 80043d4:	f8ca 5000 	str.w	r5, [sl]
 80043d8:	f8da 3000 	ldr.w	r3, [sl]
 80043dc:	4499      	add	r9, r3
 80043de:	2200      	movs	r2, #0
 80043e0:	2300      	movs	r3, #0
 80043e2:	4620      	mov	r0, r4
 80043e4:	4639      	mov	r1, r7
 80043e6:	f7fc fb87 	bl	8000af8 <__aeabi_dcmpeq>
 80043ea:	b108      	cbz	r0, 80043f0 <__cvt+0xa0>
 80043ec:	f8cd 901c 	str.w	r9, [sp, #28]
 80043f0:	2230      	movs	r2, #48	; 0x30
 80043f2:	9b07      	ldr	r3, [sp, #28]
 80043f4:	454b      	cmp	r3, r9
 80043f6:	d307      	bcc.n	8004408 <__cvt+0xb8>
 80043f8:	9b07      	ldr	r3, [sp, #28]
 80043fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80043fc:	1b9b      	subs	r3, r3, r6
 80043fe:	4630      	mov	r0, r6
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	b008      	add	sp, #32
 8004404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004408:	1c59      	adds	r1, r3, #1
 800440a:	9107      	str	r1, [sp, #28]
 800440c:	701a      	strb	r2, [r3, #0]
 800440e:	e7f0      	b.n	80043f2 <__cvt+0xa2>

08004410 <__exponent>:
 8004410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004412:	4603      	mov	r3, r0
 8004414:	2900      	cmp	r1, #0
 8004416:	bfb8      	it	lt
 8004418:	4249      	neglt	r1, r1
 800441a:	f803 2b02 	strb.w	r2, [r3], #2
 800441e:	bfb4      	ite	lt
 8004420:	222d      	movlt	r2, #45	; 0x2d
 8004422:	222b      	movge	r2, #43	; 0x2b
 8004424:	2909      	cmp	r1, #9
 8004426:	7042      	strb	r2, [r0, #1]
 8004428:	dd2a      	ble.n	8004480 <__exponent+0x70>
 800442a:	f10d 0407 	add.w	r4, sp, #7
 800442e:	46a4      	mov	ip, r4
 8004430:	270a      	movs	r7, #10
 8004432:	46a6      	mov	lr, r4
 8004434:	460a      	mov	r2, r1
 8004436:	fb91 f6f7 	sdiv	r6, r1, r7
 800443a:	fb07 1516 	mls	r5, r7, r6, r1
 800443e:	3530      	adds	r5, #48	; 0x30
 8004440:	2a63      	cmp	r2, #99	; 0x63
 8004442:	f104 34ff 	add.w	r4, r4, #4294967295
 8004446:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800444a:	4631      	mov	r1, r6
 800444c:	dcf1      	bgt.n	8004432 <__exponent+0x22>
 800444e:	3130      	adds	r1, #48	; 0x30
 8004450:	f1ae 0502 	sub.w	r5, lr, #2
 8004454:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004458:	1c44      	adds	r4, r0, #1
 800445a:	4629      	mov	r1, r5
 800445c:	4561      	cmp	r1, ip
 800445e:	d30a      	bcc.n	8004476 <__exponent+0x66>
 8004460:	f10d 0209 	add.w	r2, sp, #9
 8004464:	eba2 020e 	sub.w	r2, r2, lr
 8004468:	4565      	cmp	r5, ip
 800446a:	bf88      	it	hi
 800446c:	2200      	movhi	r2, #0
 800446e:	4413      	add	r3, r2
 8004470:	1a18      	subs	r0, r3, r0
 8004472:	b003      	add	sp, #12
 8004474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004476:	f811 2b01 	ldrb.w	r2, [r1], #1
 800447a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800447e:	e7ed      	b.n	800445c <__exponent+0x4c>
 8004480:	2330      	movs	r3, #48	; 0x30
 8004482:	3130      	adds	r1, #48	; 0x30
 8004484:	7083      	strb	r3, [r0, #2]
 8004486:	70c1      	strb	r1, [r0, #3]
 8004488:	1d03      	adds	r3, r0, #4
 800448a:	e7f1      	b.n	8004470 <__exponent+0x60>

0800448c <_printf_float>:
 800448c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004490:	b091      	sub	sp, #68	; 0x44
 8004492:	460c      	mov	r4, r1
 8004494:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004498:	4616      	mov	r6, r2
 800449a:	461f      	mov	r7, r3
 800449c:	4605      	mov	r5, r0
 800449e:	f002 fef9 	bl	8007294 <_localeconv_r>
 80044a2:	6803      	ldr	r3, [r0, #0]
 80044a4:	9309      	str	r3, [sp, #36]	; 0x24
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fb fea4 	bl	80001f4 <strlen>
 80044ac:	2300      	movs	r3, #0
 80044ae:	930e      	str	r3, [sp, #56]	; 0x38
 80044b0:	f8d8 3000 	ldr.w	r3, [r8]
 80044b4:	900a      	str	r0, [sp, #40]	; 0x28
 80044b6:	3307      	adds	r3, #7
 80044b8:	f023 0307 	bic.w	r3, r3, #7
 80044bc:	f103 0208 	add.w	r2, r3, #8
 80044c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80044c4:	f8d4 b000 	ldr.w	fp, [r4]
 80044c8:	f8c8 2000 	str.w	r2, [r8]
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80044d4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80044d8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80044dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80044de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044e0:	4b9c      	ldr	r3, [pc, #624]	; (8004754 <_printf_float+0x2c8>)
 80044e2:	f04f 32ff 	mov.w	r2, #4294967295
 80044e6:	4640      	mov	r0, r8
 80044e8:	f7fc fb38 	bl	8000b5c <__aeabi_dcmpun>
 80044ec:	bb70      	cbnz	r0, 800454c <_printf_float+0xc0>
 80044ee:	4b99      	ldr	r3, [pc, #612]	; (8004754 <_printf_float+0x2c8>)
 80044f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044f2:	f04f 32ff 	mov.w	r2, #4294967295
 80044f6:	4640      	mov	r0, r8
 80044f8:	f7fc fb12 	bl	8000b20 <__aeabi_dcmple>
 80044fc:	bb30      	cbnz	r0, 800454c <_printf_float+0xc0>
 80044fe:	2200      	movs	r2, #0
 8004500:	2300      	movs	r3, #0
 8004502:	4640      	mov	r0, r8
 8004504:	4651      	mov	r1, sl
 8004506:	f7fc fb01 	bl	8000b0c <__aeabi_dcmplt>
 800450a:	b110      	cbz	r0, 8004512 <_printf_float+0x86>
 800450c:	232d      	movs	r3, #45	; 0x2d
 800450e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004512:	4b91      	ldr	r3, [pc, #580]	; (8004758 <_printf_float+0x2cc>)
 8004514:	4891      	ldr	r0, [pc, #580]	; (800475c <_printf_float+0x2d0>)
 8004516:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800451a:	bf94      	ite	ls
 800451c:	4698      	movls	r8, r3
 800451e:	4680      	movhi	r8, r0
 8004520:	2303      	movs	r3, #3
 8004522:	6123      	str	r3, [r4, #16]
 8004524:	f02b 0304 	bic.w	r3, fp, #4
 8004528:	6023      	str	r3, [r4, #0]
 800452a:	f04f 0a00 	mov.w	sl, #0
 800452e:	9700      	str	r7, [sp, #0]
 8004530:	4633      	mov	r3, r6
 8004532:	aa0f      	add	r2, sp, #60	; 0x3c
 8004534:	4621      	mov	r1, r4
 8004536:	4628      	mov	r0, r5
 8004538:	f000 f9d2 	bl	80048e0 <_printf_common>
 800453c:	3001      	adds	r0, #1
 800453e:	f040 808f 	bne.w	8004660 <_printf_float+0x1d4>
 8004542:	f04f 30ff 	mov.w	r0, #4294967295
 8004546:	b011      	add	sp, #68	; 0x44
 8004548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800454c:	4642      	mov	r2, r8
 800454e:	4653      	mov	r3, sl
 8004550:	4640      	mov	r0, r8
 8004552:	4651      	mov	r1, sl
 8004554:	f7fc fb02 	bl	8000b5c <__aeabi_dcmpun>
 8004558:	b140      	cbz	r0, 800456c <_printf_float+0xe0>
 800455a:	f1ba 0f00 	cmp.w	sl, #0
 800455e:	bfbc      	itt	lt
 8004560:	232d      	movlt	r3, #45	; 0x2d
 8004562:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004566:	487e      	ldr	r0, [pc, #504]	; (8004760 <_printf_float+0x2d4>)
 8004568:	4b7e      	ldr	r3, [pc, #504]	; (8004764 <_printf_float+0x2d8>)
 800456a:	e7d4      	b.n	8004516 <_printf_float+0x8a>
 800456c:	6863      	ldr	r3, [r4, #4]
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004574:	d142      	bne.n	80045fc <_printf_float+0x170>
 8004576:	2306      	movs	r3, #6
 8004578:	6063      	str	r3, [r4, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	9206      	str	r2, [sp, #24]
 800457e:	aa0e      	add	r2, sp, #56	; 0x38
 8004580:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004584:	aa0d      	add	r2, sp, #52	; 0x34
 8004586:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800458a:	9203      	str	r2, [sp, #12]
 800458c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004590:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	6863      	ldr	r3, [r4, #4]
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	4642      	mov	r2, r8
 800459c:	4653      	mov	r3, sl
 800459e:	4628      	mov	r0, r5
 80045a0:	910b      	str	r1, [sp, #44]	; 0x2c
 80045a2:	f7ff fed5 	bl	8004350 <__cvt>
 80045a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045a8:	2947      	cmp	r1, #71	; 0x47
 80045aa:	4680      	mov	r8, r0
 80045ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80045ae:	d108      	bne.n	80045c2 <_printf_float+0x136>
 80045b0:	1cc8      	adds	r0, r1, #3
 80045b2:	db02      	blt.n	80045ba <_printf_float+0x12e>
 80045b4:	6863      	ldr	r3, [r4, #4]
 80045b6:	4299      	cmp	r1, r3
 80045b8:	dd40      	ble.n	800463c <_printf_float+0x1b0>
 80045ba:	f1a9 0902 	sub.w	r9, r9, #2
 80045be:	fa5f f989 	uxtb.w	r9, r9
 80045c2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80045c6:	d81f      	bhi.n	8004608 <_printf_float+0x17c>
 80045c8:	3901      	subs	r1, #1
 80045ca:	464a      	mov	r2, r9
 80045cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80045d0:	910d      	str	r1, [sp, #52]	; 0x34
 80045d2:	f7ff ff1d 	bl	8004410 <__exponent>
 80045d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045d8:	1813      	adds	r3, r2, r0
 80045da:	2a01      	cmp	r2, #1
 80045dc:	4682      	mov	sl, r0
 80045de:	6123      	str	r3, [r4, #16]
 80045e0:	dc02      	bgt.n	80045e8 <_printf_float+0x15c>
 80045e2:	6822      	ldr	r2, [r4, #0]
 80045e4:	07d2      	lsls	r2, r2, #31
 80045e6:	d501      	bpl.n	80045ec <_printf_float+0x160>
 80045e8:	3301      	adds	r3, #1
 80045ea:	6123      	str	r3, [r4, #16]
 80045ec:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d09c      	beq.n	800452e <_printf_float+0xa2>
 80045f4:	232d      	movs	r3, #45	; 0x2d
 80045f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045fa:	e798      	b.n	800452e <_printf_float+0xa2>
 80045fc:	2947      	cmp	r1, #71	; 0x47
 80045fe:	d1bc      	bne.n	800457a <_printf_float+0xee>
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1ba      	bne.n	800457a <_printf_float+0xee>
 8004604:	2301      	movs	r3, #1
 8004606:	e7b7      	b.n	8004578 <_printf_float+0xec>
 8004608:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800460c:	d118      	bne.n	8004640 <_printf_float+0x1b4>
 800460e:	2900      	cmp	r1, #0
 8004610:	6863      	ldr	r3, [r4, #4]
 8004612:	dd0b      	ble.n	800462c <_printf_float+0x1a0>
 8004614:	6121      	str	r1, [r4, #16]
 8004616:	b913      	cbnz	r3, 800461e <_printf_float+0x192>
 8004618:	6822      	ldr	r2, [r4, #0]
 800461a:	07d0      	lsls	r0, r2, #31
 800461c:	d502      	bpl.n	8004624 <_printf_float+0x198>
 800461e:	3301      	adds	r3, #1
 8004620:	440b      	add	r3, r1
 8004622:	6123      	str	r3, [r4, #16]
 8004624:	65a1      	str	r1, [r4, #88]	; 0x58
 8004626:	f04f 0a00 	mov.w	sl, #0
 800462a:	e7df      	b.n	80045ec <_printf_float+0x160>
 800462c:	b913      	cbnz	r3, 8004634 <_printf_float+0x1a8>
 800462e:	6822      	ldr	r2, [r4, #0]
 8004630:	07d2      	lsls	r2, r2, #31
 8004632:	d501      	bpl.n	8004638 <_printf_float+0x1ac>
 8004634:	3302      	adds	r3, #2
 8004636:	e7f4      	b.n	8004622 <_printf_float+0x196>
 8004638:	2301      	movs	r3, #1
 800463a:	e7f2      	b.n	8004622 <_printf_float+0x196>
 800463c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004642:	4299      	cmp	r1, r3
 8004644:	db05      	blt.n	8004652 <_printf_float+0x1c6>
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	6121      	str	r1, [r4, #16]
 800464a:	07d8      	lsls	r0, r3, #31
 800464c:	d5ea      	bpl.n	8004624 <_printf_float+0x198>
 800464e:	1c4b      	adds	r3, r1, #1
 8004650:	e7e7      	b.n	8004622 <_printf_float+0x196>
 8004652:	2900      	cmp	r1, #0
 8004654:	bfd4      	ite	le
 8004656:	f1c1 0202 	rsble	r2, r1, #2
 800465a:	2201      	movgt	r2, #1
 800465c:	4413      	add	r3, r2
 800465e:	e7e0      	b.n	8004622 <_printf_float+0x196>
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	055a      	lsls	r2, r3, #21
 8004664:	d407      	bmi.n	8004676 <_printf_float+0x1ea>
 8004666:	6923      	ldr	r3, [r4, #16]
 8004668:	4642      	mov	r2, r8
 800466a:	4631      	mov	r1, r6
 800466c:	4628      	mov	r0, r5
 800466e:	47b8      	blx	r7
 8004670:	3001      	adds	r0, #1
 8004672:	d12b      	bne.n	80046cc <_printf_float+0x240>
 8004674:	e765      	b.n	8004542 <_printf_float+0xb6>
 8004676:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800467a:	f240 80dc 	bls.w	8004836 <_printf_float+0x3aa>
 800467e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004682:	2200      	movs	r2, #0
 8004684:	2300      	movs	r3, #0
 8004686:	f7fc fa37 	bl	8000af8 <__aeabi_dcmpeq>
 800468a:	2800      	cmp	r0, #0
 800468c:	d033      	beq.n	80046f6 <_printf_float+0x26a>
 800468e:	4a36      	ldr	r2, [pc, #216]	; (8004768 <_printf_float+0x2dc>)
 8004690:	2301      	movs	r3, #1
 8004692:	4631      	mov	r1, r6
 8004694:	4628      	mov	r0, r5
 8004696:	47b8      	blx	r7
 8004698:	3001      	adds	r0, #1
 800469a:	f43f af52 	beq.w	8004542 <_printf_float+0xb6>
 800469e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046a2:	429a      	cmp	r2, r3
 80046a4:	db02      	blt.n	80046ac <_printf_float+0x220>
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	07d8      	lsls	r0, r3, #31
 80046aa:	d50f      	bpl.n	80046cc <_printf_float+0x240>
 80046ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046b0:	4631      	mov	r1, r6
 80046b2:	4628      	mov	r0, r5
 80046b4:	47b8      	blx	r7
 80046b6:	3001      	adds	r0, #1
 80046b8:	f43f af43 	beq.w	8004542 <_printf_float+0xb6>
 80046bc:	f04f 0800 	mov.w	r8, #0
 80046c0:	f104 091a 	add.w	r9, r4, #26
 80046c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046c6:	3b01      	subs	r3, #1
 80046c8:	4543      	cmp	r3, r8
 80046ca:	dc09      	bgt.n	80046e0 <_printf_float+0x254>
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	079b      	lsls	r3, r3, #30
 80046d0:	f100 8101 	bmi.w	80048d6 <_printf_float+0x44a>
 80046d4:	68e0      	ldr	r0, [r4, #12]
 80046d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046d8:	4298      	cmp	r0, r3
 80046da:	bfb8      	it	lt
 80046dc:	4618      	movlt	r0, r3
 80046de:	e732      	b.n	8004546 <_printf_float+0xba>
 80046e0:	2301      	movs	r3, #1
 80046e2:	464a      	mov	r2, r9
 80046e4:	4631      	mov	r1, r6
 80046e6:	4628      	mov	r0, r5
 80046e8:	47b8      	blx	r7
 80046ea:	3001      	adds	r0, #1
 80046ec:	f43f af29 	beq.w	8004542 <_printf_float+0xb6>
 80046f0:	f108 0801 	add.w	r8, r8, #1
 80046f4:	e7e6      	b.n	80046c4 <_printf_float+0x238>
 80046f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	dc37      	bgt.n	800476c <_printf_float+0x2e0>
 80046fc:	4a1a      	ldr	r2, [pc, #104]	; (8004768 <_printf_float+0x2dc>)
 80046fe:	2301      	movs	r3, #1
 8004700:	4631      	mov	r1, r6
 8004702:	4628      	mov	r0, r5
 8004704:	47b8      	blx	r7
 8004706:	3001      	adds	r0, #1
 8004708:	f43f af1b 	beq.w	8004542 <_printf_float+0xb6>
 800470c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004710:	4313      	orrs	r3, r2
 8004712:	d102      	bne.n	800471a <_printf_float+0x28e>
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	07d9      	lsls	r1, r3, #31
 8004718:	d5d8      	bpl.n	80046cc <_printf_float+0x240>
 800471a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800471e:	4631      	mov	r1, r6
 8004720:	4628      	mov	r0, r5
 8004722:	47b8      	blx	r7
 8004724:	3001      	adds	r0, #1
 8004726:	f43f af0c 	beq.w	8004542 <_printf_float+0xb6>
 800472a:	f04f 0900 	mov.w	r9, #0
 800472e:	f104 0a1a 	add.w	sl, r4, #26
 8004732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004734:	425b      	negs	r3, r3
 8004736:	454b      	cmp	r3, r9
 8004738:	dc01      	bgt.n	800473e <_printf_float+0x2b2>
 800473a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800473c:	e794      	b.n	8004668 <_printf_float+0x1dc>
 800473e:	2301      	movs	r3, #1
 8004740:	4652      	mov	r2, sl
 8004742:	4631      	mov	r1, r6
 8004744:	4628      	mov	r0, r5
 8004746:	47b8      	blx	r7
 8004748:	3001      	adds	r0, #1
 800474a:	f43f aefa 	beq.w	8004542 <_printf_float+0xb6>
 800474e:	f109 0901 	add.w	r9, r9, #1
 8004752:	e7ee      	b.n	8004732 <_printf_float+0x2a6>
 8004754:	7fefffff 	.word	0x7fefffff
 8004758:	08009b3c 	.word	0x08009b3c
 800475c:	08009b40 	.word	0x08009b40
 8004760:	08009b48 	.word	0x08009b48
 8004764:	08009b44 	.word	0x08009b44
 8004768:	08009f51 	.word	0x08009f51
 800476c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800476e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004770:	429a      	cmp	r2, r3
 8004772:	bfa8      	it	ge
 8004774:	461a      	movge	r2, r3
 8004776:	2a00      	cmp	r2, #0
 8004778:	4691      	mov	r9, r2
 800477a:	dc37      	bgt.n	80047ec <_printf_float+0x360>
 800477c:	f04f 0b00 	mov.w	fp, #0
 8004780:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004784:	f104 021a 	add.w	r2, r4, #26
 8004788:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800478c:	ebaa 0309 	sub.w	r3, sl, r9
 8004790:	455b      	cmp	r3, fp
 8004792:	dc33      	bgt.n	80047fc <_printf_float+0x370>
 8004794:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004798:	429a      	cmp	r2, r3
 800479a:	db3b      	blt.n	8004814 <_printf_float+0x388>
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	07da      	lsls	r2, r3, #31
 80047a0:	d438      	bmi.n	8004814 <_printf_float+0x388>
 80047a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80047a6:	eba2 030a 	sub.w	r3, r2, sl
 80047aa:	eba2 0901 	sub.w	r9, r2, r1
 80047ae:	4599      	cmp	r9, r3
 80047b0:	bfa8      	it	ge
 80047b2:	4699      	movge	r9, r3
 80047b4:	f1b9 0f00 	cmp.w	r9, #0
 80047b8:	dc34      	bgt.n	8004824 <_printf_float+0x398>
 80047ba:	f04f 0800 	mov.w	r8, #0
 80047be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047c2:	f104 0a1a 	add.w	sl, r4, #26
 80047c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	eba3 0309 	sub.w	r3, r3, r9
 80047d0:	4543      	cmp	r3, r8
 80047d2:	f77f af7b 	ble.w	80046cc <_printf_float+0x240>
 80047d6:	2301      	movs	r3, #1
 80047d8:	4652      	mov	r2, sl
 80047da:	4631      	mov	r1, r6
 80047dc:	4628      	mov	r0, r5
 80047de:	47b8      	blx	r7
 80047e0:	3001      	adds	r0, #1
 80047e2:	f43f aeae 	beq.w	8004542 <_printf_float+0xb6>
 80047e6:	f108 0801 	add.w	r8, r8, #1
 80047ea:	e7ec      	b.n	80047c6 <_printf_float+0x33a>
 80047ec:	4613      	mov	r3, r2
 80047ee:	4631      	mov	r1, r6
 80047f0:	4642      	mov	r2, r8
 80047f2:	4628      	mov	r0, r5
 80047f4:	47b8      	blx	r7
 80047f6:	3001      	adds	r0, #1
 80047f8:	d1c0      	bne.n	800477c <_printf_float+0x2f0>
 80047fa:	e6a2      	b.n	8004542 <_printf_float+0xb6>
 80047fc:	2301      	movs	r3, #1
 80047fe:	4631      	mov	r1, r6
 8004800:	4628      	mov	r0, r5
 8004802:	920b      	str	r2, [sp, #44]	; 0x2c
 8004804:	47b8      	blx	r7
 8004806:	3001      	adds	r0, #1
 8004808:	f43f ae9b 	beq.w	8004542 <_printf_float+0xb6>
 800480c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800480e:	f10b 0b01 	add.w	fp, fp, #1
 8004812:	e7b9      	b.n	8004788 <_printf_float+0x2fc>
 8004814:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004818:	4631      	mov	r1, r6
 800481a:	4628      	mov	r0, r5
 800481c:	47b8      	blx	r7
 800481e:	3001      	adds	r0, #1
 8004820:	d1bf      	bne.n	80047a2 <_printf_float+0x316>
 8004822:	e68e      	b.n	8004542 <_printf_float+0xb6>
 8004824:	464b      	mov	r3, r9
 8004826:	eb08 020a 	add.w	r2, r8, sl
 800482a:	4631      	mov	r1, r6
 800482c:	4628      	mov	r0, r5
 800482e:	47b8      	blx	r7
 8004830:	3001      	adds	r0, #1
 8004832:	d1c2      	bne.n	80047ba <_printf_float+0x32e>
 8004834:	e685      	b.n	8004542 <_printf_float+0xb6>
 8004836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004838:	2a01      	cmp	r2, #1
 800483a:	dc01      	bgt.n	8004840 <_printf_float+0x3b4>
 800483c:	07db      	lsls	r3, r3, #31
 800483e:	d537      	bpl.n	80048b0 <_printf_float+0x424>
 8004840:	2301      	movs	r3, #1
 8004842:	4642      	mov	r2, r8
 8004844:	4631      	mov	r1, r6
 8004846:	4628      	mov	r0, r5
 8004848:	47b8      	blx	r7
 800484a:	3001      	adds	r0, #1
 800484c:	f43f ae79 	beq.w	8004542 <_printf_float+0xb6>
 8004850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004854:	4631      	mov	r1, r6
 8004856:	4628      	mov	r0, r5
 8004858:	47b8      	blx	r7
 800485a:	3001      	adds	r0, #1
 800485c:	f43f ae71 	beq.w	8004542 <_printf_float+0xb6>
 8004860:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004864:	2200      	movs	r2, #0
 8004866:	2300      	movs	r3, #0
 8004868:	f7fc f946 	bl	8000af8 <__aeabi_dcmpeq>
 800486c:	b9d8      	cbnz	r0, 80048a6 <_printf_float+0x41a>
 800486e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004870:	f108 0201 	add.w	r2, r8, #1
 8004874:	3b01      	subs	r3, #1
 8004876:	4631      	mov	r1, r6
 8004878:	4628      	mov	r0, r5
 800487a:	47b8      	blx	r7
 800487c:	3001      	adds	r0, #1
 800487e:	d10e      	bne.n	800489e <_printf_float+0x412>
 8004880:	e65f      	b.n	8004542 <_printf_float+0xb6>
 8004882:	2301      	movs	r3, #1
 8004884:	464a      	mov	r2, r9
 8004886:	4631      	mov	r1, r6
 8004888:	4628      	mov	r0, r5
 800488a:	47b8      	blx	r7
 800488c:	3001      	adds	r0, #1
 800488e:	f43f ae58 	beq.w	8004542 <_printf_float+0xb6>
 8004892:	f108 0801 	add.w	r8, r8, #1
 8004896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004898:	3b01      	subs	r3, #1
 800489a:	4543      	cmp	r3, r8
 800489c:	dcf1      	bgt.n	8004882 <_printf_float+0x3f6>
 800489e:	4653      	mov	r3, sl
 80048a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80048a4:	e6e1      	b.n	800466a <_printf_float+0x1de>
 80048a6:	f04f 0800 	mov.w	r8, #0
 80048aa:	f104 091a 	add.w	r9, r4, #26
 80048ae:	e7f2      	b.n	8004896 <_printf_float+0x40a>
 80048b0:	2301      	movs	r3, #1
 80048b2:	4642      	mov	r2, r8
 80048b4:	e7df      	b.n	8004876 <_printf_float+0x3ea>
 80048b6:	2301      	movs	r3, #1
 80048b8:	464a      	mov	r2, r9
 80048ba:	4631      	mov	r1, r6
 80048bc:	4628      	mov	r0, r5
 80048be:	47b8      	blx	r7
 80048c0:	3001      	adds	r0, #1
 80048c2:	f43f ae3e 	beq.w	8004542 <_printf_float+0xb6>
 80048c6:	f108 0801 	add.w	r8, r8, #1
 80048ca:	68e3      	ldr	r3, [r4, #12]
 80048cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80048ce:	1a5b      	subs	r3, r3, r1
 80048d0:	4543      	cmp	r3, r8
 80048d2:	dcf0      	bgt.n	80048b6 <_printf_float+0x42a>
 80048d4:	e6fe      	b.n	80046d4 <_printf_float+0x248>
 80048d6:	f04f 0800 	mov.w	r8, #0
 80048da:	f104 0919 	add.w	r9, r4, #25
 80048de:	e7f4      	b.n	80048ca <_printf_float+0x43e>

080048e0 <_printf_common>:
 80048e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e4:	4616      	mov	r6, r2
 80048e6:	4699      	mov	r9, r3
 80048e8:	688a      	ldr	r2, [r1, #8]
 80048ea:	690b      	ldr	r3, [r1, #16]
 80048ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048f0:	4293      	cmp	r3, r2
 80048f2:	bfb8      	it	lt
 80048f4:	4613      	movlt	r3, r2
 80048f6:	6033      	str	r3, [r6, #0]
 80048f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048fc:	4607      	mov	r7, r0
 80048fe:	460c      	mov	r4, r1
 8004900:	b10a      	cbz	r2, 8004906 <_printf_common+0x26>
 8004902:	3301      	adds	r3, #1
 8004904:	6033      	str	r3, [r6, #0]
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	0699      	lsls	r1, r3, #26
 800490a:	bf42      	ittt	mi
 800490c:	6833      	ldrmi	r3, [r6, #0]
 800490e:	3302      	addmi	r3, #2
 8004910:	6033      	strmi	r3, [r6, #0]
 8004912:	6825      	ldr	r5, [r4, #0]
 8004914:	f015 0506 	ands.w	r5, r5, #6
 8004918:	d106      	bne.n	8004928 <_printf_common+0x48>
 800491a:	f104 0a19 	add.w	sl, r4, #25
 800491e:	68e3      	ldr	r3, [r4, #12]
 8004920:	6832      	ldr	r2, [r6, #0]
 8004922:	1a9b      	subs	r3, r3, r2
 8004924:	42ab      	cmp	r3, r5
 8004926:	dc26      	bgt.n	8004976 <_printf_common+0x96>
 8004928:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800492c:	1e13      	subs	r3, r2, #0
 800492e:	6822      	ldr	r2, [r4, #0]
 8004930:	bf18      	it	ne
 8004932:	2301      	movne	r3, #1
 8004934:	0692      	lsls	r2, r2, #26
 8004936:	d42b      	bmi.n	8004990 <_printf_common+0xb0>
 8004938:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800493c:	4649      	mov	r1, r9
 800493e:	4638      	mov	r0, r7
 8004940:	47c0      	blx	r8
 8004942:	3001      	adds	r0, #1
 8004944:	d01e      	beq.n	8004984 <_printf_common+0xa4>
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	68e5      	ldr	r5, [r4, #12]
 800494a:	6832      	ldr	r2, [r6, #0]
 800494c:	f003 0306 	and.w	r3, r3, #6
 8004950:	2b04      	cmp	r3, #4
 8004952:	bf08      	it	eq
 8004954:	1aad      	subeq	r5, r5, r2
 8004956:	68a3      	ldr	r3, [r4, #8]
 8004958:	6922      	ldr	r2, [r4, #16]
 800495a:	bf0c      	ite	eq
 800495c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004960:	2500      	movne	r5, #0
 8004962:	4293      	cmp	r3, r2
 8004964:	bfc4      	itt	gt
 8004966:	1a9b      	subgt	r3, r3, r2
 8004968:	18ed      	addgt	r5, r5, r3
 800496a:	2600      	movs	r6, #0
 800496c:	341a      	adds	r4, #26
 800496e:	42b5      	cmp	r5, r6
 8004970:	d11a      	bne.n	80049a8 <_printf_common+0xc8>
 8004972:	2000      	movs	r0, #0
 8004974:	e008      	b.n	8004988 <_printf_common+0xa8>
 8004976:	2301      	movs	r3, #1
 8004978:	4652      	mov	r2, sl
 800497a:	4649      	mov	r1, r9
 800497c:	4638      	mov	r0, r7
 800497e:	47c0      	blx	r8
 8004980:	3001      	adds	r0, #1
 8004982:	d103      	bne.n	800498c <_printf_common+0xac>
 8004984:	f04f 30ff 	mov.w	r0, #4294967295
 8004988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800498c:	3501      	adds	r5, #1
 800498e:	e7c6      	b.n	800491e <_printf_common+0x3e>
 8004990:	18e1      	adds	r1, r4, r3
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	2030      	movs	r0, #48	; 0x30
 8004996:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800499a:	4422      	add	r2, r4
 800499c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049a4:	3302      	adds	r3, #2
 80049a6:	e7c7      	b.n	8004938 <_printf_common+0x58>
 80049a8:	2301      	movs	r3, #1
 80049aa:	4622      	mov	r2, r4
 80049ac:	4649      	mov	r1, r9
 80049ae:	4638      	mov	r0, r7
 80049b0:	47c0      	blx	r8
 80049b2:	3001      	adds	r0, #1
 80049b4:	d0e6      	beq.n	8004984 <_printf_common+0xa4>
 80049b6:	3601      	adds	r6, #1
 80049b8:	e7d9      	b.n	800496e <_printf_common+0x8e>
	...

080049bc <_printf_i>:
 80049bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049c0:	460c      	mov	r4, r1
 80049c2:	4691      	mov	r9, r2
 80049c4:	7e27      	ldrb	r7, [r4, #24]
 80049c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80049c8:	2f78      	cmp	r7, #120	; 0x78
 80049ca:	4680      	mov	r8, r0
 80049cc:	469a      	mov	sl, r3
 80049ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049d2:	d807      	bhi.n	80049e4 <_printf_i+0x28>
 80049d4:	2f62      	cmp	r7, #98	; 0x62
 80049d6:	d80a      	bhi.n	80049ee <_printf_i+0x32>
 80049d8:	2f00      	cmp	r7, #0
 80049da:	f000 80d8 	beq.w	8004b8e <_printf_i+0x1d2>
 80049de:	2f58      	cmp	r7, #88	; 0x58
 80049e0:	f000 80a3 	beq.w	8004b2a <_printf_i+0x16e>
 80049e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049ec:	e03a      	b.n	8004a64 <_printf_i+0xa8>
 80049ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049f2:	2b15      	cmp	r3, #21
 80049f4:	d8f6      	bhi.n	80049e4 <_printf_i+0x28>
 80049f6:	a001      	add	r0, pc, #4	; (adr r0, 80049fc <_printf_i+0x40>)
 80049f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80049fc:	08004a55 	.word	0x08004a55
 8004a00:	08004a69 	.word	0x08004a69
 8004a04:	080049e5 	.word	0x080049e5
 8004a08:	080049e5 	.word	0x080049e5
 8004a0c:	080049e5 	.word	0x080049e5
 8004a10:	080049e5 	.word	0x080049e5
 8004a14:	08004a69 	.word	0x08004a69
 8004a18:	080049e5 	.word	0x080049e5
 8004a1c:	080049e5 	.word	0x080049e5
 8004a20:	080049e5 	.word	0x080049e5
 8004a24:	080049e5 	.word	0x080049e5
 8004a28:	08004b75 	.word	0x08004b75
 8004a2c:	08004a99 	.word	0x08004a99
 8004a30:	08004b57 	.word	0x08004b57
 8004a34:	080049e5 	.word	0x080049e5
 8004a38:	080049e5 	.word	0x080049e5
 8004a3c:	08004b97 	.word	0x08004b97
 8004a40:	080049e5 	.word	0x080049e5
 8004a44:	08004a99 	.word	0x08004a99
 8004a48:	080049e5 	.word	0x080049e5
 8004a4c:	080049e5 	.word	0x080049e5
 8004a50:	08004b5f 	.word	0x08004b5f
 8004a54:	680b      	ldr	r3, [r1, #0]
 8004a56:	1d1a      	adds	r2, r3, #4
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	600a      	str	r2, [r1, #0]
 8004a5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0a3      	b.n	8004bb0 <_printf_i+0x1f4>
 8004a68:	6825      	ldr	r5, [r4, #0]
 8004a6a:	6808      	ldr	r0, [r1, #0]
 8004a6c:	062e      	lsls	r6, r5, #24
 8004a6e:	f100 0304 	add.w	r3, r0, #4
 8004a72:	d50a      	bpl.n	8004a8a <_printf_i+0xce>
 8004a74:	6805      	ldr	r5, [r0, #0]
 8004a76:	600b      	str	r3, [r1, #0]
 8004a78:	2d00      	cmp	r5, #0
 8004a7a:	da03      	bge.n	8004a84 <_printf_i+0xc8>
 8004a7c:	232d      	movs	r3, #45	; 0x2d
 8004a7e:	426d      	negs	r5, r5
 8004a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a84:	485e      	ldr	r0, [pc, #376]	; (8004c00 <_printf_i+0x244>)
 8004a86:	230a      	movs	r3, #10
 8004a88:	e019      	b.n	8004abe <_printf_i+0x102>
 8004a8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a8e:	6805      	ldr	r5, [r0, #0]
 8004a90:	600b      	str	r3, [r1, #0]
 8004a92:	bf18      	it	ne
 8004a94:	b22d      	sxthne	r5, r5
 8004a96:	e7ef      	b.n	8004a78 <_printf_i+0xbc>
 8004a98:	680b      	ldr	r3, [r1, #0]
 8004a9a:	6825      	ldr	r5, [r4, #0]
 8004a9c:	1d18      	adds	r0, r3, #4
 8004a9e:	6008      	str	r0, [r1, #0]
 8004aa0:	0628      	lsls	r0, r5, #24
 8004aa2:	d501      	bpl.n	8004aa8 <_printf_i+0xec>
 8004aa4:	681d      	ldr	r5, [r3, #0]
 8004aa6:	e002      	b.n	8004aae <_printf_i+0xf2>
 8004aa8:	0669      	lsls	r1, r5, #25
 8004aaa:	d5fb      	bpl.n	8004aa4 <_printf_i+0xe8>
 8004aac:	881d      	ldrh	r5, [r3, #0]
 8004aae:	4854      	ldr	r0, [pc, #336]	; (8004c00 <_printf_i+0x244>)
 8004ab0:	2f6f      	cmp	r7, #111	; 0x6f
 8004ab2:	bf0c      	ite	eq
 8004ab4:	2308      	moveq	r3, #8
 8004ab6:	230a      	movne	r3, #10
 8004ab8:	2100      	movs	r1, #0
 8004aba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004abe:	6866      	ldr	r6, [r4, #4]
 8004ac0:	60a6      	str	r6, [r4, #8]
 8004ac2:	2e00      	cmp	r6, #0
 8004ac4:	bfa2      	ittt	ge
 8004ac6:	6821      	ldrge	r1, [r4, #0]
 8004ac8:	f021 0104 	bicge.w	r1, r1, #4
 8004acc:	6021      	strge	r1, [r4, #0]
 8004ace:	b90d      	cbnz	r5, 8004ad4 <_printf_i+0x118>
 8004ad0:	2e00      	cmp	r6, #0
 8004ad2:	d04d      	beq.n	8004b70 <_printf_i+0x1b4>
 8004ad4:	4616      	mov	r6, r2
 8004ad6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ada:	fb03 5711 	mls	r7, r3, r1, r5
 8004ade:	5dc7      	ldrb	r7, [r0, r7]
 8004ae0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ae4:	462f      	mov	r7, r5
 8004ae6:	42bb      	cmp	r3, r7
 8004ae8:	460d      	mov	r5, r1
 8004aea:	d9f4      	bls.n	8004ad6 <_printf_i+0x11a>
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d10b      	bne.n	8004b08 <_printf_i+0x14c>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	07df      	lsls	r7, r3, #31
 8004af4:	d508      	bpl.n	8004b08 <_printf_i+0x14c>
 8004af6:	6923      	ldr	r3, [r4, #16]
 8004af8:	6861      	ldr	r1, [r4, #4]
 8004afa:	4299      	cmp	r1, r3
 8004afc:	bfde      	ittt	le
 8004afe:	2330      	movle	r3, #48	; 0x30
 8004b00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b08:	1b92      	subs	r2, r2, r6
 8004b0a:	6122      	str	r2, [r4, #16]
 8004b0c:	f8cd a000 	str.w	sl, [sp]
 8004b10:	464b      	mov	r3, r9
 8004b12:	aa03      	add	r2, sp, #12
 8004b14:	4621      	mov	r1, r4
 8004b16:	4640      	mov	r0, r8
 8004b18:	f7ff fee2 	bl	80048e0 <_printf_common>
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	d14c      	bne.n	8004bba <_printf_i+0x1fe>
 8004b20:	f04f 30ff 	mov.w	r0, #4294967295
 8004b24:	b004      	add	sp, #16
 8004b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2a:	4835      	ldr	r0, [pc, #212]	; (8004c00 <_printf_i+0x244>)
 8004b2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	680e      	ldr	r6, [r1, #0]
 8004b34:	061f      	lsls	r7, r3, #24
 8004b36:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b3a:	600e      	str	r6, [r1, #0]
 8004b3c:	d514      	bpl.n	8004b68 <_printf_i+0x1ac>
 8004b3e:	07d9      	lsls	r1, r3, #31
 8004b40:	bf44      	itt	mi
 8004b42:	f043 0320 	orrmi.w	r3, r3, #32
 8004b46:	6023      	strmi	r3, [r4, #0]
 8004b48:	b91d      	cbnz	r5, 8004b52 <_printf_i+0x196>
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	f023 0320 	bic.w	r3, r3, #32
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	2310      	movs	r3, #16
 8004b54:	e7b0      	b.n	8004ab8 <_printf_i+0xfc>
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	f043 0320 	orr.w	r3, r3, #32
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	2378      	movs	r3, #120	; 0x78
 8004b60:	4828      	ldr	r0, [pc, #160]	; (8004c04 <_printf_i+0x248>)
 8004b62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b66:	e7e3      	b.n	8004b30 <_printf_i+0x174>
 8004b68:	065e      	lsls	r6, r3, #25
 8004b6a:	bf48      	it	mi
 8004b6c:	b2ad      	uxthmi	r5, r5
 8004b6e:	e7e6      	b.n	8004b3e <_printf_i+0x182>
 8004b70:	4616      	mov	r6, r2
 8004b72:	e7bb      	b.n	8004aec <_printf_i+0x130>
 8004b74:	680b      	ldr	r3, [r1, #0]
 8004b76:	6826      	ldr	r6, [r4, #0]
 8004b78:	6960      	ldr	r0, [r4, #20]
 8004b7a:	1d1d      	adds	r5, r3, #4
 8004b7c:	600d      	str	r5, [r1, #0]
 8004b7e:	0635      	lsls	r5, r6, #24
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	d501      	bpl.n	8004b88 <_printf_i+0x1cc>
 8004b84:	6018      	str	r0, [r3, #0]
 8004b86:	e002      	b.n	8004b8e <_printf_i+0x1d2>
 8004b88:	0671      	lsls	r1, r6, #25
 8004b8a:	d5fb      	bpl.n	8004b84 <_printf_i+0x1c8>
 8004b8c:	8018      	strh	r0, [r3, #0]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	6123      	str	r3, [r4, #16]
 8004b92:	4616      	mov	r6, r2
 8004b94:	e7ba      	b.n	8004b0c <_printf_i+0x150>
 8004b96:	680b      	ldr	r3, [r1, #0]
 8004b98:	1d1a      	adds	r2, r3, #4
 8004b9a:	600a      	str	r2, [r1, #0]
 8004b9c:	681e      	ldr	r6, [r3, #0]
 8004b9e:	6862      	ldr	r2, [r4, #4]
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	f7fb fb34 	bl	8000210 <memchr>
 8004ba8:	b108      	cbz	r0, 8004bae <_printf_i+0x1f2>
 8004baa:	1b80      	subs	r0, r0, r6
 8004bac:	6060      	str	r0, [r4, #4]
 8004bae:	6863      	ldr	r3, [r4, #4]
 8004bb0:	6123      	str	r3, [r4, #16]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bb8:	e7a8      	b.n	8004b0c <_printf_i+0x150>
 8004bba:	6923      	ldr	r3, [r4, #16]
 8004bbc:	4632      	mov	r2, r6
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	4640      	mov	r0, r8
 8004bc2:	47d0      	blx	sl
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d0ab      	beq.n	8004b20 <_printf_i+0x164>
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	079b      	lsls	r3, r3, #30
 8004bcc:	d413      	bmi.n	8004bf6 <_printf_i+0x23a>
 8004bce:	68e0      	ldr	r0, [r4, #12]
 8004bd0:	9b03      	ldr	r3, [sp, #12]
 8004bd2:	4298      	cmp	r0, r3
 8004bd4:	bfb8      	it	lt
 8004bd6:	4618      	movlt	r0, r3
 8004bd8:	e7a4      	b.n	8004b24 <_printf_i+0x168>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	4632      	mov	r2, r6
 8004bde:	4649      	mov	r1, r9
 8004be0:	4640      	mov	r0, r8
 8004be2:	47d0      	blx	sl
 8004be4:	3001      	adds	r0, #1
 8004be6:	d09b      	beq.n	8004b20 <_printf_i+0x164>
 8004be8:	3501      	adds	r5, #1
 8004bea:	68e3      	ldr	r3, [r4, #12]
 8004bec:	9903      	ldr	r1, [sp, #12]
 8004bee:	1a5b      	subs	r3, r3, r1
 8004bf0:	42ab      	cmp	r3, r5
 8004bf2:	dcf2      	bgt.n	8004bda <_printf_i+0x21e>
 8004bf4:	e7eb      	b.n	8004bce <_printf_i+0x212>
 8004bf6:	2500      	movs	r5, #0
 8004bf8:	f104 0619 	add.w	r6, r4, #25
 8004bfc:	e7f5      	b.n	8004bea <_printf_i+0x22e>
 8004bfe:	bf00      	nop
 8004c00:	08009b4c 	.word	0x08009b4c
 8004c04:	08009b5d 	.word	0x08009b5d

08004c08 <_scanf_float>:
 8004c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c0c:	b087      	sub	sp, #28
 8004c0e:	4617      	mov	r7, r2
 8004c10:	9303      	str	r3, [sp, #12]
 8004c12:	688b      	ldr	r3, [r1, #8]
 8004c14:	1e5a      	subs	r2, r3, #1
 8004c16:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004c1a:	bf83      	ittte	hi
 8004c1c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004c20:	195b      	addhi	r3, r3, r5
 8004c22:	9302      	strhi	r3, [sp, #8]
 8004c24:	2300      	movls	r3, #0
 8004c26:	bf86      	itte	hi
 8004c28:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004c2c:	608b      	strhi	r3, [r1, #8]
 8004c2e:	9302      	strls	r3, [sp, #8]
 8004c30:	680b      	ldr	r3, [r1, #0]
 8004c32:	468b      	mov	fp, r1
 8004c34:	2500      	movs	r5, #0
 8004c36:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004c3a:	f84b 3b1c 	str.w	r3, [fp], #28
 8004c3e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004c42:	4680      	mov	r8, r0
 8004c44:	460c      	mov	r4, r1
 8004c46:	465e      	mov	r6, fp
 8004c48:	46aa      	mov	sl, r5
 8004c4a:	46a9      	mov	r9, r5
 8004c4c:	9501      	str	r5, [sp, #4]
 8004c4e:	68a2      	ldr	r2, [r4, #8]
 8004c50:	b152      	cbz	r2, 8004c68 <_scanf_float+0x60>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b4e      	cmp	r3, #78	; 0x4e
 8004c58:	d864      	bhi.n	8004d24 <_scanf_float+0x11c>
 8004c5a:	2b40      	cmp	r3, #64	; 0x40
 8004c5c:	d83c      	bhi.n	8004cd8 <_scanf_float+0xd0>
 8004c5e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004c62:	b2c8      	uxtb	r0, r1
 8004c64:	280e      	cmp	r0, #14
 8004c66:	d93a      	bls.n	8004cde <_scanf_float+0xd6>
 8004c68:	f1b9 0f00 	cmp.w	r9, #0
 8004c6c:	d003      	beq.n	8004c76 <_scanf_float+0x6e>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c74:	6023      	str	r3, [r4, #0]
 8004c76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c7a:	f1ba 0f01 	cmp.w	sl, #1
 8004c7e:	f200 8113 	bhi.w	8004ea8 <_scanf_float+0x2a0>
 8004c82:	455e      	cmp	r6, fp
 8004c84:	f200 8105 	bhi.w	8004e92 <_scanf_float+0x28a>
 8004c88:	2501      	movs	r5, #1
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	b007      	add	sp, #28
 8004c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c92:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004c96:	2a0d      	cmp	r2, #13
 8004c98:	d8e6      	bhi.n	8004c68 <_scanf_float+0x60>
 8004c9a:	a101      	add	r1, pc, #4	; (adr r1, 8004ca0 <_scanf_float+0x98>)
 8004c9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004ca0:	08004ddf 	.word	0x08004ddf
 8004ca4:	08004c69 	.word	0x08004c69
 8004ca8:	08004c69 	.word	0x08004c69
 8004cac:	08004c69 	.word	0x08004c69
 8004cb0:	08004e3f 	.word	0x08004e3f
 8004cb4:	08004e17 	.word	0x08004e17
 8004cb8:	08004c69 	.word	0x08004c69
 8004cbc:	08004c69 	.word	0x08004c69
 8004cc0:	08004ded 	.word	0x08004ded
 8004cc4:	08004c69 	.word	0x08004c69
 8004cc8:	08004c69 	.word	0x08004c69
 8004ccc:	08004c69 	.word	0x08004c69
 8004cd0:	08004c69 	.word	0x08004c69
 8004cd4:	08004da5 	.word	0x08004da5
 8004cd8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004cdc:	e7db      	b.n	8004c96 <_scanf_float+0x8e>
 8004cde:	290e      	cmp	r1, #14
 8004ce0:	d8c2      	bhi.n	8004c68 <_scanf_float+0x60>
 8004ce2:	a001      	add	r0, pc, #4	; (adr r0, 8004ce8 <_scanf_float+0xe0>)
 8004ce4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004ce8:	08004d97 	.word	0x08004d97
 8004cec:	08004c69 	.word	0x08004c69
 8004cf0:	08004d97 	.word	0x08004d97
 8004cf4:	08004e2b 	.word	0x08004e2b
 8004cf8:	08004c69 	.word	0x08004c69
 8004cfc:	08004d45 	.word	0x08004d45
 8004d00:	08004d81 	.word	0x08004d81
 8004d04:	08004d81 	.word	0x08004d81
 8004d08:	08004d81 	.word	0x08004d81
 8004d0c:	08004d81 	.word	0x08004d81
 8004d10:	08004d81 	.word	0x08004d81
 8004d14:	08004d81 	.word	0x08004d81
 8004d18:	08004d81 	.word	0x08004d81
 8004d1c:	08004d81 	.word	0x08004d81
 8004d20:	08004d81 	.word	0x08004d81
 8004d24:	2b6e      	cmp	r3, #110	; 0x6e
 8004d26:	d809      	bhi.n	8004d3c <_scanf_float+0x134>
 8004d28:	2b60      	cmp	r3, #96	; 0x60
 8004d2a:	d8b2      	bhi.n	8004c92 <_scanf_float+0x8a>
 8004d2c:	2b54      	cmp	r3, #84	; 0x54
 8004d2e:	d077      	beq.n	8004e20 <_scanf_float+0x218>
 8004d30:	2b59      	cmp	r3, #89	; 0x59
 8004d32:	d199      	bne.n	8004c68 <_scanf_float+0x60>
 8004d34:	2d07      	cmp	r5, #7
 8004d36:	d197      	bne.n	8004c68 <_scanf_float+0x60>
 8004d38:	2508      	movs	r5, #8
 8004d3a:	e029      	b.n	8004d90 <_scanf_float+0x188>
 8004d3c:	2b74      	cmp	r3, #116	; 0x74
 8004d3e:	d06f      	beq.n	8004e20 <_scanf_float+0x218>
 8004d40:	2b79      	cmp	r3, #121	; 0x79
 8004d42:	e7f6      	b.n	8004d32 <_scanf_float+0x12a>
 8004d44:	6821      	ldr	r1, [r4, #0]
 8004d46:	05c8      	lsls	r0, r1, #23
 8004d48:	d51a      	bpl.n	8004d80 <_scanf_float+0x178>
 8004d4a:	9b02      	ldr	r3, [sp, #8]
 8004d4c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004d50:	6021      	str	r1, [r4, #0]
 8004d52:	f109 0901 	add.w	r9, r9, #1
 8004d56:	b11b      	cbz	r3, 8004d60 <_scanf_float+0x158>
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	3201      	adds	r2, #1
 8004d5c:	9302      	str	r3, [sp, #8]
 8004d5e:	60a2      	str	r2, [r4, #8]
 8004d60:	68a3      	ldr	r3, [r4, #8]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	60a3      	str	r3, [r4, #8]
 8004d66:	6923      	ldr	r3, [r4, #16]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	6123      	str	r3, [r4, #16]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	607b      	str	r3, [r7, #4]
 8004d74:	f340 8084 	ble.w	8004e80 <_scanf_float+0x278>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	603b      	str	r3, [r7, #0]
 8004d7e:	e766      	b.n	8004c4e <_scanf_float+0x46>
 8004d80:	eb1a 0f05 	cmn.w	sl, r5
 8004d84:	f47f af70 	bne.w	8004c68 <_scanf_float+0x60>
 8004d88:	6822      	ldr	r2, [r4, #0]
 8004d8a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004d8e:	6022      	str	r2, [r4, #0]
 8004d90:	f806 3b01 	strb.w	r3, [r6], #1
 8004d94:	e7e4      	b.n	8004d60 <_scanf_float+0x158>
 8004d96:	6822      	ldr	r2, [r4, #0]
 8004d98:	0610      	lsls	r0, r2, #24
 8004d9a:	f57f af65 	bpl.w	8004c68 <_scanf_float+0x60>
 8004d9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004da2:	e7f4      	b.n	8004d8e <_scanf_float+0x186>
 8004da4:	f1ba 0f00 	cmp.w	sl, #0
 8004da8:	d10e      	bne.n	8004dc8 <_scanf_float+0x1c0>
 8004daa:	f1b9 0f00 	cmp.w	r9, #0
 8004dae:	d10e      	bne.n	8004dce <_scanf_float+0x1c6>
 8004db0:	6822      	ldr	r2, [r4, #0]
 8004db2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004db6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004dba:	d108      	bne.n	8004dce <_scanf_float+0x1c6>
 8004dbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004dc0:	6022      	str	r2, [r4, #0]
 8004dc2:	f04f 0a01 	mov.w	sl, #1
 8004dc6:	e7e3      	b.n	8004d90 <_scanf_float+0x188>
 8004dc8:	f1ba 0f02 	cmp.w	sl, #2
 8004dcc:	d055      	beq.n	8004e7a <_scanf_float+0x272>
 8004dce:	2d01      	cmp	r5, #1
 8004dd0:	d002      	beq.n	8004dd8 <_scanf_float+0x1d0>
 8004dd2:	2d04      	cmp	r5, #4
 8004dd4:	f47f af48 	bne.w	8004c68 <_scanf_float+0x60>
 8004dd8:	3501      	adds	r5, #1
 8004dda:	b2ed      	uxtb	r5, r5
 8004ddc:	e7d8      	b.n	8004d90 <_scanf_float+0x188>
 8004dde:	f1ba 0f01 	cmp.w	sl, #1
 8004de2:	f47f af41 	bne.w	8004c68 <_scanf_float+0x60>
 8004de6:	f04f 0a02 	mov.w	sl, #2
 8004dea:	e7d1      	b.n	8004d90 <_scanf_float+0x188>
 8004dec:	b97d      	cbnz	r5, 8004e0e <_scanf_float+0x206>
 8004dee:	f1b9 0f00 	cmp.w	r9, #0
 8004df2:	f47f af3c 	bne.w	8004c6e <_scanf_float+0x66>
 8004df6:	6822      	ldr	r2, [r4, #0]
 8004df8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004dfc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004e00:	f47f af39 	bne.w	8004c76 <_scanf_float+0x6e>
 8004e04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004e08:	6022      	str	r2, [r4, #0]
 8004e0a:	2501      	movs	r5, #1
 8004e0c:	e7c0      	b.n	8004d90 <_scanf_float+0x188>
 8004e0e:	2d03      	cmp	r5, #3
 8004e10:	d0e2      	beq.n	8004dd8 <_scanf_float+0x1d0>
 8004e12:	2d05      	cmp	r5, #5
 8004e14:	e7de      	b.n	8004dd4 <_scanf_float+0x1cc>
 8004e16:	2d02      	cmp	r5, #2
 8004e18:	f47f af26 	bne.w	8004c68 <_scanf_float+0x60>
 8004e1c:	2503      	movs	r5, #3
 8004e1e:	e7b7      	b.n	8004d90 <_scanf_float+0x188>
 8004e20:	2d06      	cmp	r5, #6
 8004e22:	f47f af21 	bne.w	8004c68 <_scanf_float+0x60>
 8004e26:	2507      	movs	r5, #7
 8004e28:	e7b2      	b.n	8004d90 <_scanf_float+0x188>
 8004e2a:	6822      	ldr	r2, [r4, #0]
 8004e2c:	0591      	lsls	r1, r2, #22
 8004e2e:	f57f af1b 	bpl.w	8004c68 <_scanf_float+0x60>
 8004e32:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004e36:	6022      	str	r2, [r4, #0]
 8004e38:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e3c:	e7a8      	b.n	8004d90 <_scanf_float+0x188>
 8004e3e:	6822      	ldr	r2, [r4, #0]
 8004e40:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004e44:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004e48:	d006      	beq.n	8004e58 <_scanf_float+0x250>
 8004e4a:	0550      	lsls	r0, r2, #21
 8004e4c:	f57f af0c 	bpl.w	8004c68 <_scanf_float+0x60>
 8004e50:	f1b9 0f00 	cmp.w	r9, #0
 8004e54:	f43f af0f 	beq.w	8004c76 <_scanf_float+0x6e>
 8004e58:	0591      	lsls	r1, r2, #22
 8004e5a:	bf58      	it	pl
 8004e5c:	9901      	ldrpl	r1, [sp, #4]
 8004e5e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004e62:	bf58      	it	pl
 8004e64:	eba9 0101 	subpl.w	r1, r9, r1
 8004e68:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004e6c:	bf58      	it	pl
 8004e6e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004e72:	6022      	str	r2, [r4, #0]
 8004e74:	f04f 0900 	mov.w	r9, #0
 8004e78:	e78a      	b.n	8004d90 <_scanf_float+0x188>
 8004e7a:	f04f 0a03 	mov.w	sl, #3
 8004e7e:	e787      	b.n	8004d90 <_scanf_float+0x188>
 8004e80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004e84:	4639      	mov	r1, r7
 8004e86:	4640      	mov	r0, r8
 8004e88:	4798      	blx	r3
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	f43f aedf 	beq.w	8004c4e <_scanf_float+0x46>
 8004e90:	e6ea      	b.n	8004c68 <_scanf_float+0x60>
 8004e92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e9a:	463a      	mov	r2, r7
 8004e9c:	4640      	mov	r0, r8
 8004e9e:	4798      	blx	r3
 8004ea0:	6923      	ldr	r3, [r4, #16]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	6123      	str	r3, [r4, #16]
 8004ea6:	e6ec      	b.n	8004c82 <_scanf_float+0x7a>
 8004ea8:	1e6b      	subs	r3, r5, #1
 8004eaa:	2b06      	cmp	r3, #6
 8004eac:	d825      	bhi.n	8004efa <_scanf_float+0x2f2>
 8004eae:	2d02      	cmp	r5, #2
 8004eb0:	d836      	bhi.n	8004f20 <_scanf_float+0x318>
 8004eb2:	455e      	cmp	r6, fp
 8004eb4:	f67f aee8 	bls.w	8004c88 <_scanf_float+0x80>
 8004eb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ebc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ec0:	463a      	mov	r2, r7
 8004ec2:	4640      	mov	r0, r8
 8004ec4:	4798      	blx	r3
 8004ec6:	6923      	ldr	r3, [r4, #16]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	6123      	str	r3, [r4, #16]
 8004ecc:	e7f1      	b.n	8004eb2 <_scanf_float+0x2aa>
 8004ece:	9802      	ldr	r0, [sp, #8]
 8004ed0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ed4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004ed8:	9002      	str	r0, [sp, #8]
 8004eda:	463a      	mov	r2, r7
 8004edc:	4640      	mov	r0, r8
 8004ede:	4798      	blx	r3
 8004ee0:	6923      	ldr	r3, [r4, #16]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	6123      	str	r3, [r4, #16]
 8004ee6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004eea:	fa5f fa8a 	uxtb.w	sl, sl
 8004eee:	f1ba 0f02 	cmp.w	sl, #2
 8004ef2:	d1ec      	bne.n	8004ece <_scanf_float+0x2c6>
 8004ef4:	3d03      	subs	r5, #3
 8004ef6:	b2ed      	uxtb	r5, r5
 8004ef8:	1b76      	subs	r6, r6, r5
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	05da      	lsls	r2, r3, #23
 8004efe:	d52f      	bpl.n	8004f60 <_scanf_float+0x358>
 8004f00:	055b      	lsls	r3, r3, #21
 8004f02:	d510      	bpl.n	8004f26 <_scanf_float+0x31e>
 8004f04:	455e      	cmp	r6, fp
 8004f06:	f67f aebf 	bls.w	8004c88 <_scanf_float+0x80>
 8004f0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f12:	463a      	mov	r2, r7
 8004f14:	4640      	mov	r0, r8
 8004f16:	4798      	blx	r3
 8004f18:	6923      	ldr	r3, [r4, #16]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	6123      	str	r3, [r4, #16]
 8004f1e:	e7f1      	b.n	8004f04 <_scanf_float+0x2fc>
 8004f20:	46aa      	mov	sl, r5
 8004f22:	9602      	str	r6, [sp, #8]
 8004f24:	e7df      	b.n	8004ee6 <_scanf_float+0x2de>
 8004f26:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004f2a:	6923      	ldr	r3, [r4, #16]
 8004f2c:	2965      	cmp	r1, #101	; 0x65
 8004f2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f32:	f106 35ff 	add.w	r5, r6, #4294967295
 8004f36:	6123      	str	r3, [r4, #16]
 8004f38:	d00c      	beq.n	8004f54 <_scanf_float+0x34c>
 8004f3a:	2945      	cmp	r1, #69	; 0x45
 8004f3c:	d00a      	beq.n	8004f54 <_scanf_float+0x34c>
 8004f3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f42:	463a      	mov	r2, r7
 8004f44:	4640      	mov	r0, r8
 8004f46:	4798      	blx	r3
 8004f48:	6923      	ldr	r3, [r4, #16]
 8004f4a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	1eb5      	subs	r5, r6, #2
 8004f52:	6123      	str	r3, [r4, #16]
 8004f54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f58:	463a      	mov	r2, r7
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	4798      	blx	r3
 8004f5e:	462e      	mov	r6, r5
 8004f60:	6825      	ldr	r5, [r4, #0]
 8004f62:	f015 0510 	ands.w	r5, r5, #16
 8004f66:	d159      	bne.n	800501c <_scanf_float+0x414>
 8004f68:	7035      	strb	r5, [r6, #0]
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f74:	d11c      	bne.n	8004fb0 <_scanf_float+0x3a8>
 8004f76:	9b01      	ldr	r3, [sp, #4]
 8004f78:	454b      	cmp	r3, r9
 8004f7a:	eba3 0209 	sub.w	r2, r3, r9
 8004f7e:	d124      	bne.n	8004fca <_scanf_float+0x3c2>
 8004f80:	2200      	movs	r2, #0
 8004f82:	4659      	mov	r1, fp
 8004f84:	4640      	mov	r0, r8
 8004f86:	f000 fef7 	bl	8005d78 <_strtod_r>
 8004f8a:	f8d4 c000 	ldr.w	ip, [r4]
 8004f8e:	9b03      	ldr	r3, [sp, #12]
 8004f90:	f01c 0f02 	tst.w	ip, #2
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4606      	mov	r6, r0
 8004f98:	460f      	mov	r7, r1
 8004f9a:	d021      	beq.n	8004fe0 <_scanf_float+0x3d8>
 8004f9c:	9903      	ldr	r1, [sp, #12]
 8004f9e:	1d1a      	adds	r2, r3, #4
 8004fa0:	600a      	str	r2, [r1, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	e9c3 6700 	strd	r6, r7, [r3]
 8004fa8:	68e3      	ldr	r3, [r4, #12]
 8004faa:	3301      	adds	r3, #1
 8004fac:	60e3      	str	r3, [r4, #12]
 8004fae:	e66c      	b.n	8004c8a <_scanf_float+0x82>
 8004fb0:	9b04      	ldr	r3, [sp, #16]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0e4      	beq.n	8004f80 <_scanf_float+0x378>
 8004fb6:	9905      	ldr	r1, [sp, #20]
 8004fb8:	230a      	movs	r3, #10
 8004fba:	462a      	mov	r2, r5
 8004fbc:	3101      	adds	r1, #1
 8004fbe:	4640      	mov	r0, r8
 8004fc0:	f000 ff66 	bl	8005e90 <_strtol_r>
 8004fc4:	9b04      	ldr	r3, [sp, #16]
 8004fc6:	9e05      	ldr	r6, [sp, #20]
 8004fc8:	1ac2      	subs	r2, r0, r3
 8004fca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004fce:	429e      	cmp	r6, r3
 8004fd0:	bf28      	it	cs
 8004fd2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004fd6:	4912      	ldr	r1, [pc, #72]	; (8005020 <_scanf_float+0x418>)
 8004fd8:	4630      	mov	r0, r6
 8004fda:	f000 f829 	bl	8005030 <siprintf>
 8004fde:	e7cf      	b.n	8004f80 <_scanf_float+0x378>
 8004fe0:	f01c 0f04 	tst.w	ip, #4
 8004fe4:	f103 0e04 	add.w	lr, r3, #4
 8004fe8:	d003      	beq.n	8004ff2 <_scanf_float+0x3ea>
 8004fea:	9903      	ldr	r1, [sp, #12]
 8004fec:	f8c1 e000 	str.w	lr, [r1]
 8004ff0:	e7d7      	b.n	8004fa2 <_scanf_float+0x39a>
 8004ff2:	9a03      	ldr	r2, [sp, #12]
 8004ff4:	f8c2 e000 	str.w	lr, [r2]
 8004ff8:	f8d3 8000 	ldr.w	r8, [r3]
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	f7fb fdac 	bl	8000b5c <__aeabi_dcmpun>
 8005004:	b128      	cbz	r0, 8005012 <_scanf_float+0x40a>
 8005006:	4807      	ldr	r0, [pc, #28]	; (8005024 <_scanf_float+0x41c>)
 8005008:	f000 f80e 	bl	8005028 <nanf>
 800500c:	f8c8 0000 	str.w	r0, [r8]
 8005010:	e7ca      	b.n	8004fa8 <_scanf_float+0x3a0>
 8005012:	4630      	mov	r0, r6
 8005014:	4639      	mov	r1, r7
 8005016:	f7fb fdff 	bl	8000c18 <__aeabi_d2f>
 800501a:	e7f7      	b.n	800500c <_scanf_float+0x404>
 800501c:	2500      	movs	r5, #0
 800501e:	e634      	b.n	8004c8a <_scanf_float+0x82>
 8005020:	08009b6e 	.word	0x08009b6e
 8005024:	08009fa3 	.word	0x08009fa3

08005028 <nanf>:
 8005028:	4800      	ldr	r0, [pc, #0]	; (800502c <nanf+0x4>)
 800502a:	4770      	bx	lr
 800502c:	7fc00000 	.word	0x7fc00000

08005030 <siprintf>:
 8005030:	b40e      	push	{r1, r2, r3}
 8005032:	b500      	push	{lr}
 8005034:	b09c      	sub	sp, #112	; 0x70
 8005036:	ab1d      	add	r3, sp, #116	; 0x74
 8005038:	9002      	str	r0, [sp, #8]
 800503a:	9006      	str	r0, [sp, #24]
 800503c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005040:	4809      	ldr	r0, [pc, #36]	; (8005068 <siprintf+0x38>)
 8005042:	9107      	str	r1, [sp, #28]
 8005044:	9104      	str	r1, [sp, #16]
 8005046:	4909      	ldr	r1, [pc, #36]	; (800506c <siprintf+0x3c>)
 8005048:	f853 2b04 	ldr.w	r2, [r3], #4
 800504c:	9105      	str	r1, [sp, #20]
 800504e:	6800      	ldr	r0, [r0, #0]
 8005050:	9301      	str	r3, [sp, #4]
 8005052:	a902      	add	r1, sp, #8
 8005054:	f002 ff22 	bl	8007e9c <_svfiprintf_r>
 8005058:	9b02      	ldr	r3, [sp, #8]
 800505a:	2200      	movs	r2, #0
 800505c:	701a      	strb	r2, [r3, #0]
 800505e:	b01c      	add	sp, #112	; 0x70
 8005060:	f85d eb04 	ldr.w	lr, [sp], #4
 8005064:	b003      	add	sp, #12
 8005066:	4770      	bx	lr
 8005068:	20000000 	.word	0x20000000
 800506c:	ffff0208 	.word	0xffff0208

08005070 <siscanf>:
 8005070:	b40e      	push	{r1, r2, r3}
 8005072:	b530      	push	{r4, r5, lr}
 8005074:	b09c      	sub	sp, #112	; 0x70
 8005076:	ac1f      	add	r4, sp, #124	; 0x7c
 8005078:	f44f 7201 	mov.w	r2, #516	; 0x204
 800507c:	f854 5b04 	ldr.w	r5, [r4], #4
 8005080:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005084:	9002      	str	r0, [sp, #8]
 8005086:	9006      	str	r0, [sp, #24]
 8005088:	f7fb f8b4 	bl	80001f4 <strlen>
 800508c:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <siscanf+0x4c>)
 800508e:	9003      	str	r0, [sp, #12]
 8005090:	9007      	str	r0, [sp, #28]
 8005092:	930b      	str	r3, [sp, #44]	; 0x2c
 8005094:	480a      	ldr	r0, [pc, #40]	; (80050c0 <siscanf+0x50>)
 8005096:	9401      	str	r4, [sp, #4]
 8005098:	2300      	movs	r3, #0
 800509a:	930f      	str	r3, [sp, #60]	; 0x3c
 800509c:	9314      	str	r3, [sp, #80]	; 0x50
 800509e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050a2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80050a6:	462a      	mov	r2, r5
 80050a8:	4623      	mov	r3, r4
 80050aa:	a902      	add	r1, sp, #8
 80050ac:	6800      	ldr	r0, [r0, #0]
 80050ae:	f003 f84f 	bl	8008150 <__ssvfiscanf_r>
 80050b2:	b01c      	add	sp, #112	; 0x70
 80050b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050b8:	b003      	add	sp, #12
 80050ba:	4770      	bx	lr
 80050bc:	080050e7 	.word	0x080050e7
 80050c0:	20000000 	.word	0x20000000

080050c4 <__sread>:
 80050c4:	b510      	push	{r4, lr}
 80050c6:	460c      	mov	r4, r1
 80050c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050cc:	f003 fb04 	bl	80086d8 <_read_r>
 80050d0:	2800      	cmp	r0, #0
 80050d2:	bfab      	itete	ge
 80050d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050d6:	89a3      	ldrhlt	r3, [r4, #12]
 80050d8:	181b      	addge	r3, r3, r0
 80050da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050de:	bfac      	ite	ge
 80050e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80050e2:	81a3      	strhlt	r3, [r4, #12]
 80050e4:	bd10      	pop	{r4, pc}

080050e6 <__seofread>:
 80050e6:	2000      	movs	r0, #0
 80050e8:	4770      	bx	lr

080050ea <__swrite>:
 80050ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ee:	461f      	mov	r7, r3
 80050f0:	898b      	ldrh	r3, [r1, #12]
 80050f2:	05db      	lsls	r3, r3, #23
 80050f4:	4605      	mov	r5, r0
 80050f6:	460c      	mov	r4, r1
 80050f8:	4616      	mov	r6, r2
 80050fa:	d505      	bpl.n	8005108 <__swrite+0x1e>
 80050fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005100:	2302      	movs	r3, #2
 8005102:	2200      	movs	r2, #0
 8005104:	f002 f8ca 	bl	800729c <_lseek_r>
 8005108:	89a3      	ldrh	r3, [r4, #12]
 800510a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800510e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005112:	81a3      	strh	r3, [r4, #12]
 8005114:	4632      	mov	r2, r6
 8005116:	463b      	mov	r3, r7
 8005118:	4628      	mov	r0, r5
 800511a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800511e:	f000 beb9 	b.w	8005e94 <_write_r>

08005122 <__sseek>:
 8005122:	b510      	push	{r4, lr}
 8005124:	460c      	mov	r4, r1
 8005126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800512a:	f002 f8b7 	bl	800729c <_lseek_r>
 800512e:	1c43      	adds	r3, r0, #1
 8005130:	89a3      	ldrh	r3, [r4, #12]
 8005132:	bf15      	itete	ne
 8005134:	6560      	strne	r0, [r4, #84]	; 0x54
 8005136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800513a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800513e:	81a3      	strheq	r3, [r4, #12]
 8005140:	bf18      	it	ne
 8005142:	81a3      	strhne	r3, [r4, #12]
 8005144:	bd10      	pop	{r4, pc}

08005146 <__sclose>:
 8005146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800514a:	f000 beb5 	b.w	8005eb8 <_close_r>

0800514e <sulp>:
 800514e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005152:	460f      	mov	r7, r1
 8005154:	4690      	mov	r8, r2
 8005156:	f002 fc47 	bl	80079e8 <__ulp>
 800515a:	4604      	mov	r4, r0
 800515c:	460d      	mov	r5, r1
 800515e:	f1b8 0f00 	cmp.w	r8, #0
 8005162:	d011      	beq.n	8005188 <sulp+0x3a>
 8005164:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005168:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800516c:	2b00      	cmp	r3, #0
 800516e:	dd0b      	ble.n	8005188 <sulp+0x3a>
 8005170:	051b      	lsls	r3, r3, #20
 8005172:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005176:	2400      	movs	r4, #0
 8005178:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800517c:	4622      	mov	r2, r4
 800517e:	462b      	mov	r3, r5
 8005180:	f7fb fa52 	bl	8000628 <__aeabi_dmul>
 8005184:	4604      	mov	r4, r0
 8005186:	460d      	mov	r5, r1
 8005188:	4620      	mov	r0, r4
 800518a:	4629      	mov	r1, r5
 800518c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005190 <_strtod_l>:
 8005190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005194:	b0a1      	sub	sp, #132	; 0x84
 8005196:	469b      	mov	fp, r3
 8005198:	2300      	movs	r3, #0
 800519a:	931c      	str	r3, [sp, #112]	; 0x70
 800519c:	4ba1      	ldr	r3, [pc, #644]	; (8005424 <_strtod_l+0x294>)
 800519e:	9217      	str	r2, [sp, #92]	; 0x5c
 80051a0:	681f      	ldr	r7, [r3, #0]
 80051a2:	4682      	mov	sl, r0
 80051a4:	4638      	mov	r0, r7
 80051a6:	460e      	mov	r6, r1
 80051a8:	f7fb f824 	bl	80001f4 <strlen>
 80051ac:	f04f 0800 	mov.w	r8, #0
 80051b0:	4604      	mov	r4, r0
 80051b2:	f04f 0900 	mov.w	r9, #0
 80051b6:	961b      	str	r6, [sp, #108]	; 0x6c
 80051b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80051ba:	781a      	ldrb	r2, [r3, #0]
 80051bc:	2a2b      	cmp	r2, #43	; 0x2b
 80051be:	d04c      	beq.n	800525a <_strtod_l+0xca>
 80051c0:	d83a      	bhi.n	8005238 <_strtod_l+0xa8>
 80051c2:	2a0d      	cmp	r2, #13
 80051c4:	d833      	bhi.n	800522e <_strtod_l+0x9e>
 80051c6:	2a08      	cmp	r2, #8
 80051c8:	d833      	bhi.n	8005232 <_strtod_l+0xa2>
 80051ca:	2a00      	cmp	r2, #0
 80051cc:	d03d      	beq.n	800524a <_strtod_l+0xba>
 80051ce:	2300      	movs	r3, #0
 80051d0:	930c      	str	r3, [sp, #48]	; 0x30
 80051d2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80051d4:	782b      	ldrb	r3, [r5, #0]
 80051d6:	2b30      	cmp	r3, #48	; 0x30
 80051d8:	f040 80af 	bne.w	800533a <_strtod_l+0x1aa>
 80051dc:	786b      	ldrb	r3, [r5, #1]
 80051de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80051e2:	2b58      	cmp	r3, #88	; 0x58
 80051e4:	d16c      	bne.n	80052c0 <_strtod_l+0x130>
 80051e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051e8:	9301      	str	r3, [sp, #4]
 80051ea:	ab1c      	add	r3, sp, #112	; 0x70
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	4a8e      	ldr	r2, [pc, #568]	; (8005428 <_strtod_l+0x298>)
 80051f0:	f8cd b008 	str.w	fp, [sp, #8]
 80051f4:	ab1d      	add	r3, sp, #116	; 0x74
 80051f6:	a91b      	add	r1, sp, #108	; 0x6c
 80051f8:	4650      	mov	r0, sl
 80051fa:	f001 fd4f 	bl	8006c9c <__gethex>
 80051fe:	f010 0607 	ands.w	r6, r0, #7
 8005202:	4604      	mov	r4, r0
 8005204:	d005      	beq.n	8005212 <_strtod_l+0x82>
 8005206:	2e06      	cmp	r6, #6
 8005208:	d129      	bne.n	800525e <_strtod_l+0xce>
 800520a:	3501      	adds	r5, #1
 800520c:	2300      	movs	r3, #0
 800520e:	951b      	str	r5, [sp, #108]	; 0x6c
 8005210:	930c      	str	r3, [sp, #48]	; 0x30
 8005212:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005214:	2b00      	cmp	r3, #0
 8005216:	f040 8596 	bne.w	8005d46 <_strtod_l+0xbb6>
 800521a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800521c:	b1d3      	cbz	r3, 8005254 <_strtod_l+0xc4>
 800521e:	4642      	mov	r2, r8
 8005220:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005224:	4610      	mov	r0, r2
 8005226:	4619      	mov	r1, r3
 8005228:	b021      	add	sp, #132	; 0x84
 800522a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522e:	2a20      	cmp	r2, #32
 8005230:	d1cd      	bne.n	80051ce <_strtod_l+0x3e>
 8005232:	3301      	adds	r3, #1
 8005234:	931b      	str	r3, [sp, #108]	; 0x6c
 8005236:	e7bf      	b.n	80051b8 <_strtod_l+0x28>
 8005238:	2a2d      	cmp	r2, #45	; 0x2d
 800523a:	d1c8      	bne.n	80051ce <_strtod_l+0x3e>
 800523c:	2201      	movs	r2, #1
 800523e:	920c      	str	r2, [sp, #48]	; 0x30
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	921b      	str	r2, [sp, #108]	; 0x6c
 8005244:	785b      	ldrb	r3, [r3, #1]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1c3      	bne.n	80051d2 <_strtod_l+0x42>
 800524a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800524c:	961b      	str	r6, [sp, #108]	; 0x6c
 800524e:	2b00      	cmp	r3, #0
 8005250:	f040 8577 	bne.w	8005d42 <_strtod_l+0xbb2>
 8005254:	4642      	mov	r2, r8
 8005256:	464b      	mov	r3, r9
 8005258:	e7e4      	b.n	8005224 <_strtod_l+0x94>
 800525a:	2200      	movs	r2, #0
 800525c:	e7ef      	b.n	800523e <_strtod_l+0xae>
 800525e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005260:	b13a      	cbz	r2, 8005272 <_strtod_l+0xe2>
 8005262:	2135      	movs	r1, #53	; 0x35
 8005264:	a81e      	add	r0, sp, #120	; 0x78
 8005266:	f002 fcc3 	bl	8007bf0 <__copybits>
 800526a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800526c:	4650      	mov	r0, sl
 800526e:	f002 f88f 	bl	8007390 <_Bfree>
 8005272:	3e01      	subs	r6, #1
 8005274:	2e05      	cmp	r6, #5
 8005276:	d807      	bhi.n	8005288 <_strtod_l+0xf8>
 8005278:	e8df f006 	tbb	[pc, r6]
 800527c:	1d180b0e 	.word	0x1d180b0e
 8005280:	030e      	.short	0x030e
 8005282:	f04f 0900 	mov.w	r9, #0
 8005286:	46c8      	mov	r8, r9
 8005288:	0721      	lsls	r1, r4, #28
 800528a:	d5c2      	bpl.n	8005212 <_strtod_l+0x82>
 800528c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005290:	e7bf      	b.n	8005212 <_strtod_l+0x82>
 8005292:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8005296:	e7f7      	b.n	8005288 <_strtod_l+0xf8>
 8005298:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800529c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800529e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80052a2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80052a6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80052aa:	e7ed      	b.n	8005288 <_strtod_l+0xf8>
 80052ac:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800542c <_strtod_l+0x29c>
 80052b0:	f04f 0800 	mov.w	r8, #0
 80052b4:	e7e8      	b.n	8005288 <_strtod_l+0xf8>
 80052b6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80052ba:	f04f 38ff 	mov.w	r8, #4294967295
 80052be:	e7e3      	b.n	8005288 <_strtod_l+0xf8>
 80052c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	921b      	str	r2, [sp, #108]	; 0x6c
 80052c6:	785b      	ldrb	r3, [r3, #1]
 80052c8:	2b30      	cmp	r3, #48	; 0x30
 80052ca:	d0f9      	beq.n	80052c0 <_strtod_l+0x130>
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0a0      	beq.n	8005212 <_strtod_l+0x82>
 80052d0:	2301      	movs	r3, #1
 80052d2:	9307      	str	r3, [sp, #28]
 80052d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052d6:	9308      	str	r3, [sp, #32]
 80052d8:	2300      	movs	r3, #0
 80052da:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80052de:	469b      	mov	fp, r3
 80052e0:	220a      	movs	r2, #10
 80052e2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80052e4:	7805      	ldrb	r5, [r0, #0]
 80052e6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80052ea:	b2d9      	uxtb	r1, r3
 80052ec:	2909      	cmp	r1, #9
 80052ee:	d926      	bls.n	800533e <_strtod_l+0x1ae>
 80052f0:	4622      	mov	r2, r4
 80052f2:	4639      	mov	r1, r7
 80052f4:	f003 fa52 	bl	800879c <strncmp>
 80052f8:	2800      	cmp	r0, #0
 80052fa:	d032      	beq.n	8005362 <_strtod_l+0x1d2>
 80052fc:	2000      	movs	r0, #0
 80052fe:	462b      	mov	r3, r5
 8005300:	465c      	mov	r4, fp
 8005302:	9004      	str	r0, [sp, #16]
 8005304:	4602      	mov	r2, r0
 8005306:	2b65      	cmp	r3, #101	; 0x65
 8005308:	d001      	beq.n	800530e <_strtod_l+0x17e>
 800530a:	2b45      	cmp	r3, #69	; 0x45
 800530c:	d113      	bne.n	8005336 <_strtod_l+0x1a6>
 800530e:	b91c      	cbnz	r4, 8005318 <_strtod_l+0x188>
 8005310:	9b07      	ldr	r3, [sp, #28]
 8005312:	4303      	orrs	r3, r0
 8005314:	d099      	beq.n	800524a <_strtod_l+0xba>
 8005316:	2400      	movs	r4, #0
 8005318:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800531a:	1c73      	adds	r3, r6, #1
 800531c:	931b      	str	r3, [sp, #108]	; 0x6c
 800531e:	7873      	ldrb	r3, [r6, #1]
 8005320:	2b2b      	cmp	r3, #43	; 0x2b
 8005322:	d078      	beq.n	8005416 <_strtod_l+0x286>
 8005324:	2b2d      	cmp	r3, #45	; 0x2d
 8005326:	d07b      	beq.n	8005420 <_strtod_l+0x290>
 8005328:	2700      	movs	r7, #0
 800532a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800532e:	2909      	cmp	r1, #9
 8005330:	f240 8082 	bls.w	8005438 <_strtod_l+0x2a8>
 8005334:	961b      	str	r6, [sp, #108]	; 0x6c
 8005336:	2500      	movs	r5, #0
 8005338:	e09e      	b.n	8005478 <_strtod_l+0x2e8>
 800533a:	2300      	movs	r3, #0
 800533c:	e7c9      	b.n	80052d2 <_strtod_l+0x142>
 800533e:	f1bb 0f08 	cmp.w	fp, #8
 8005342:	bfd5      	itete	le
 8005344:	9906      	ldrle	r1, [sp, #24]
 8005346:	9905      	ldrgt	r1, [sp, #20]
 8005348:	fb02 3301 	mlale	r3, r2, r1, r3
 800534c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005350:	f100 0001 	add.w	r0, r0, #1
 8005354:	bfd4      	ite	le
 8005356:	9306      	strle	r3, [sp, #24]
 8005358:	9305      	strgt	r3, [sp, #20]
 800535a:	f10b 0b01 	add.w	fp, fp, #1
 800535e:	901b      	str	r0, [sp, #108]	; 0x6c
 8005360:	e7bf      	b.n	80052e2 <_strtod_l+0x152>
 8005362:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005364:	191a      	adds	r2, r3, r4
 8005366:	921b      	str	r2, [sp, #108]	; 0x6c
 8005368:	5d1b      	ldrb	r3, [r3, r4]
 800536a:	f1bb 0f00 	cmp.w	fp, #0
 800536e:	d036      	beq.n	80053de <_strtod_l+0x24e>
 8005370:	9004      	str	r0, [sp, #16]
 8005372:	465c      	mov	r4, fp
 8005374:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005378:	2a09      	cmp	r2, #9
 800537a:	d912      	bls.n	80053a2 <_strtod_l+0x212>
 800537c:	2201      	movs	r2, #1
 800537e:	e7c2      	b.n	8005306 <_strtod_l+0x176>
 8005380:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	921b      	str	r2, [sp, #108]	; 0x6c
 8005386:	785b      	ldrb	r3, [r3, #1]
 8005388:	3001      	adds	r0, #1
 800538a:	2b30      	cmp	r3, #48	; 0x30
 800538c:	d0f8      	beq.n	8005380 <_strtod_l+0x1f0>
 800538e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005392:	2a08      	cmp	r2, #8
 8005394:	f200 84dc 	bhi.w	8005d50 <_strtod_l+0xbc0>
 8005398:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800539a:	9004      	str	r0, [sp, #16]
 800539c:	2000      	movs	r0, #0
 800539e:	9208      	str	r2, [sp, #32]
 80053a0:	4604      	mov	r4, r0
 80053a2:	3b30      	subs	r3, #48	; 0x30
 80053a4:	f100 0201 	add.w	r2, r0, #1
 80053a8:	d013      	beq.n	80053d2 <_strtod_l+0x242>
 80053aa:	9904      	ldr	r1, [sp, #16]
 80053ac:	4411      	add	r1, r2
 80053ae:	9104      	str	r1, [sp, #16]
 80053b0:	4622      	mov	r2, r4
 80053b2:	1905      	adds	r5, r0, r4
 80053b4:	210a      	movs	r1, #10
 80053b6:	42aa      	cmp	r2, r5
 80053b8:	d113      	bne.n	80053e2 <_strtod_l+0x252>
 80053ba:	1822      	adds	r2, r4, r0
 80053bc:	2a08      	cmp	r2, #8
 80053be:	f104 0401 	add.w	r4, r4, #1
 80053c2:	4404      	add	r4, r0
 80053c4:	dc1b      	bgt.n	80053fe <_strtod_l+0x26e>
 80053c6:	9906      	ldr	r1, [sp, #24]
 80053c8:	220a      	movs	r2, #10
 80053ca:	fb02 3301 	mla	r3, r2, r1, r3
 80053ce:	9306      	str	r3, [sp, #24]
 80053d0:	2200      	movs	r2, #0
 80053d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053d4:	1c59      	adds	r1, r3, #1
 80053d6:	911b      	str	r1, [sp, #108]	; 0x6c
 80053d8:	785b      	ldrb	r3, [r3, #1]
 80053da:	4610      	mov	r0, r2
 80053dc:	e7ca      	b.n	8005374 <_strtod_l+0x1e4>
 80053de:	4658      	mov	r0, fp
 80053e0:	e7d3      	b.n	800538a <_strtod_l+0x1fa>
 80053e2:	2a08      	cmp	r2, #8
 80053e4:	dc04      	bgt.n	80053f0 <_strtod_l+0x260>
 80053e6:	9f06      	ldr	r7, [sp, #24]
 80053e8:	434f      	muls	r7, r1
 80053ea:	9706      	str	r7, [sp, #24]
 80053ec:	3201      	adds	r2, #1
 80053ee:	e7e2      	b.n	80053b6 <_strtod_l+0x226>
 80053f0:	1c57      	adds	r7, r2, #1
 80053f2:	2f10      	cmp	r7, #16
 80053f4:	bfde      	ittt	le
 80053f6:	9f05      	ldrle	r7, [sp, #20]
 80053f8:	434f      	mulle	r7, r1
 80053fa:	9705      	strle	r7, [sp, #20]
 80053fc:	e7f6      	b.n	80053ec <_strtod_l+0x25c>
 80053fe:	2c10      	cmp	r4, #16
 8005400:	bfdf      	itttt	le
 8005402:	9905      	ldrle	r1, [sp, #20]
 8005404:	220a      	movle	r2, #10
 8005406:	fb02 3301 	mlale	r3, r2, r1, r3
 800540a:	9305      	strle	r3, [sp, #20]
 800540c:	e7e0      	b.n	80053d0 <_strtod_l+0x240>
 800540e:	2300      	movs	r3, #0
 8005410:	9304      	str	r3, [sp, #16]
 8005412:	2201      	movs	r2, #1
 8005414:	e77c      	b.n	8005310 <_strtod_l+0x180>
 8005416:	2700      	movs	r7, #0
 8005418:	1cb3      	adds	r3, r6, #2
 800541a:	931b      	str	r3, [sp, #108]	; 0x6c
 800541c:	78b3      	ldrb	r3, [r6, #2]
 800541e:	e784      	b.n	800532a <_strtod_l+0x19a>
 8005420:	2701      	movs	r7, #1
 8005422:	e7f9      	b.n	8005418 <_strtod_l+0x288>
 8005424:	08009dc8 	.word	0x08009dc8
 8005428:	08009b74 	.word	0x08009b74
 800542c:	7ff00000 	.word	0x7ff00000
 8005430:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005432:	1c59      	adds	r1, r3, #1
 8005434:	911b      	str	r1, [sp, #108]	; 0x6c
 8005436:	785b      	ldrb	r3, [r3, #1]
 8005438:	2b30      	cmp	r3, #48	; 0x30
 800543a:	d0f9      	beq.n	8005430 <_strtod_l+0x2a0>
 800543c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8005440:	2908      	cmp	r1, #8
 8005442:	f63f af78 	bhi.w	8005336 <_strtod_l+0x1a6>
 8005446:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800544a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800544c:	9309      	str	r3, [sp, #36]	; 0x24
 800544e:	f04f 0e0a 	mov.w	lr, #10
 8005452:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005454:	1c59      	adds	r1, r3, #1
 8005456:	911b      	str	r1, [sp, #108]	; 0x6c
 8005458:	785b      	ldrb	r3, [r3, #1]
 800545a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800545e:	2d09      	cmp	r5, #9
 8005460:	d935      	bls.n	80054ce <_strtod_l+0x33e>
 8005462:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005464:	1b49      	subs	r1, r1, r5
 8005466:	2908      	cmp	r1, #8
 8005468:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800546c:	dc02      	bgt.n	8005474 <_strtod_l+0x2e4>
 800546e:	4565      	cmp	r5, ip
 8005470:	bfa8      	it	ge
 8005472:	4665      	movge	r5, ip
 8005474:	b107      	cbz	r7, 8005478 <_strtod_l+0x2e8>
 8005476:	426d      	negs	r5, r5
 8005478:	2c00      	cmp	r4, #0
 800547a:	d14c      	bne.n	8005516 <_strtod_l+0x386>
 800547c:	9907      	ldr	r1, [sp, #28]
 800547e:	4301      	orrs	r1, r0
 8005480:	f47f aec7 	bne.w	8005212 <_strtod_l+0x82>
 8005484:	2a00      	cmp	r2, #0
 8005486:	f47f aee0 	bne.w	800524a <_strtod_l+0xba>
 800548a:	2b69      	cmp	r3, #105	; 0x69
 800548c:	d026      	beq.n	80054dc <_strtod_l+0x34c>
 800548e:	dc23      	bgt.n	80054d8 <_strtod_l+0x348>
 8005490:	2b49      	cmp	r3, #73	; 0x49
 8005492:	d023      	beq.n	80054dc <_strtod_l+0x34c>
 8005494:	2b4e      	cmp	r3, #78	; 0x4e
 8005496:	f47f aed8 	bne.w	800524a <_strtod_l+0xba>
 800549a:	499c      	ldr	r1, [pc, #624]	; (800570c <_strtod_l+0x57c>)
 800549c:	a81b      	add	r0, sp, #108	; 0x6c
 800549e:	f001 fe49 	bl	8007134 <__match>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	f43f aed1 	beq.w	800524a <_strtod_l+0xba>
 80054a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b28      	cmp	r3, #40	; 0x28
 80054ae:	d12c      	bne.n	800550a <_strtod_l+0x37a>
 80054b0:	4997      	ldr	r1, [pc, #604]	; (8005710 <_strtod_l+0x580>)
 80054b2:	aa1e      	add	r2, sp, #120	; 0x78
 80054b4:	a81b      	add	r0, sp, #108	; 0x6c
 80054b6:	f001 fe51 	bl	800715c <__hexnan>
 80054ba:	2805      	cmp	r0, #5
 80054bc:	d125      	bne.n	800550a <_strtod_l+0x37a>
 80054be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80054c0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80054c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80054c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80054cc:	e6a1      	b.n	8005212 <_strtod_l+0x82>
 80054ce:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80054d2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80054d6:	e7bc      	b.n	8005452 <_strtod_l+0x2c2>
 80054d8:	2b6e      	cmp	r3, #110	; 0x6e
 80054da:	e7dc      	b.n	8005496 <_strtod_l+0x306>
 80054dc:	498d      	ldr	r1, [pc, #564]	; (8005714 <_strtod_l+0x584>)
 80054de:	a81b      	add	r0, sp, #108	; 0x6c
 80054e0:	f001 fe28 	bl	8007134 <__match>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	f43f aeb0 	beq.w	800524a <_strtod_l+0xba>
 80054ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054ec:	498a      	ldr	r1, [pc, #552]	; (8005718 <_strtod_l+0x588>)
 80054ee:	3b01      	subs	r3, #1
 80054f0:	a81b      	add	r0, sp, #108	; 0x6c
 80054f2:	931b      	str	r3, [sp, #108]	; 0x6c
 80054f4:	f001 fe1e 	bl	8007134 <__match>
 80054f8:	b910      	cbnz	r0, 8005500 <_strtod_l+0x370>
 80054fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054fc:	3301      	adds	r3, #1
 80054fe:	931b      	str	r3, [sp, #108]	; 0x6c
 8005500:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8005728 <_strtod_l+0x598>
 8005504:	f04f 0800 	mov.w	r8, #0
 8005508:	e683      	b.n	8005212 <_strtod_l+0x82>
 800550a:	4884      	ldr	r0, [pc, #528]	; (800571c <_strtod_l+0x58c>)
 800550c:	f003 f8f6 	bl	80086fc <nan>
 8005510:	4680      	mov	r8, r0
 8005512:	4689      	mov	r9, r1
 8005514:	e67d      	b.n	8005212 <_strtod_l+0x82>
 8005516:	9b04      	ldr	r3, [sp, #16]
 8005518:	9806      	ldr	r0, [sp, #24]
 800551a:	1aeb      	subs	r3, r5, r3
 800551c:	f1bb 0f00 	cmp.w	fp, #0
 8005520:	bf08      	it	eq
 8005522:	46a3      	moveq	fp, r4
 8005524:	2c10      	cmp	r4, #16
 8005526:	9307      	str	r3, [sp, #28]
 8005528:	4626      	mov	r6, r4
 800552a:	bfa8      	it	ge
 800552c:	2610      	movge	r6, #16
 800552e:	f7fb f801 	bl	8000534 <__aeabi_ui2d>
 8005532:	2c09      	cmp	r4, #9
 8005534:	4680      	mov	r8, r0
 8005536:	4689      	mov	r9, r1
 8005538:	dd13      	ble.n	8005562 <_strtod_l+0x3d2>
 800553a:	4b79      	ldr	r3, [pc, #484]	; (8005720 <_strtod_l+0x590>)
 800553c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005540:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005544:	f7fb f870 	bl	8000628 <__aeabi_dmul>
 8005548:	4680      	mov	r8, r0
 800554a:	9805      	ldr	r0, [sp, #20]
 800554c:	4689      	mov	r9, r1
 800554e:	f7fa fff1 	bl	8000534 <__aeabi_ui2d>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4640      	mov	r0, r8
 8005558:	4649      	mov	r1, r9
 800555a:	f7fa feaf 	bl	80002bc <__adddf3>
 800555e:	4680      	mov	r8, r0
 8005560:	4689      	mov	r9, r1
 8005562:	2c0f      	cmp	r4, #15
 8005564:	dc36      	bgt.n	80055d4 <_strtod_l+0x444>
 8005566:	9b07      	ldr	r3, [sp, #28]
 8005568:	2b00      	cmp	r3, #0
 800556a:	f43f ae52 	beq.w	8005212 <_strtod_l+0x82>
 800556e:	dd22      	ble.n	80055b6 <_strtod_l+0x426>
 8005570:	2b16      	cmp	r3, #22
 8005572:	dc09      	bgt.n	8005588 <_strtod_l+0x3f8>
 8005574:	4c6a      	ldr	r4, [pc, #424]	; (8005720 <_strtod_l+0x590>)
 8005576:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800557a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800557e:	4642      	mov	r2, r8
 8005580:	464b      	mov	r3, r9
 8005582:	f7fb f851 	bl	8000628 <__aeabi_dmul>
 8005586:	e7c3      	b.n	8005510 <_strtod_l+0x380>
 8005588:	9a07      	ldr	r2, [sp, #28]
 800558a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800558e:	4293      	cmp	r3, r2
 8005590:	db20      	blt.n	80055d4 <_strtod_l+0x444>
 8005592:	4d63      	ldr	r5, [pc, #396]	; (8005720 <_strtod_l+0x590>)
 8005594:	f1c4 040f 	rsb	r4, r4, #15
 8005598:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800559c:	4642      	mov	r2, r8
 800559e:	464b      	mov	r3, r9
 80055a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055a4:	f7fb f840 	bl	8000628 <__aeabi_dmul>
 80055a8:	9b07      	ldr	r3, [sp, #28]
 80055aa:	1b1c      	subs	r4, r3, r4
 80055ac:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80055b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80055b4:	e7e5      	b.n	8005582 <_strtod_l+0x3f2>
 80055b6:	9b07      	ldr	r3, [sp, #28]
 80055b8:	3316      	adds	r3, #22
 80055ba:	db0b      	blt.n	80055d4 <_strtod_l+0x444>
 80055bc:	9b04      	ldr	r3, [sp, #16]
 80055be:	4a58      	ldr	r2, [pc, #352]	; (8005720 <_strtod_l+0x590>)
 80055c0:	1b5d      	subs	r5, r3, r5
 80055c2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80055c6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80055ca:	4640      	mov	r0, r8
 80055cc:	4649      	mov	r1, r9
 80055ce:	f7fb f955 	bl	800087c <__aeabi_ddiv>
 80055d2:	e79d      	b.n	8005510 <_strtod_l+0x380>
 80055d4:	9b07      	ldr	r3, [sp, #28]
 80055d6:	1ba6      	subs	r6, r4, r6
 80055d8:	441e      	add	r6, r3
 80055da:	2e00      	cmp	r6, #0
 80055dc:	dd71      	ble.n	80056c2 <_strtod_l+0x532>
 80055de:	f016 030f 	ands.w	r3, r6, #15
 80055e2:	d00a      	beq.n	80055fa <_strtod_l+0x46a>
 80055e4:	494e      	ldr	r1, [pc, #312]	; (8005720 <_strtod_l+0x590>)
 80055e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80055ea:	4642      	mov	r2, r8
 80055ec:	464b      	mov	r3, r9
 80055ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055f2:	f7fb f819 	bl	8000628 <__aeabi_dmul>
 80055f6:	4680      	mov	r8, r0
 80055f8:	4689      	mov	r9, r1
 80055fa:	f036 060f 	bics.w	r6, r6, #15
 80055fe:	d050      	beq.n	80056a2 <_strtod_l+0x512>
 8005600:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005604:	dd27      	ble.n	8005656 <_strtod_l+0x4c6>
 8005606:	f04f 0b00 	mov.w	fp, #0
 800560a:	f8cd b010 	str.w	fp, [sp, #16]
 800560e:	f8cd b020 	str.w	fp, [sp, #32]
 8005612:	f8cd b018 	str.w	fp, [sp, #24]
 8005616:	2322      	movs	r3, #34	; 0x22
 8005618:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8005728 <_strtod_l+0x598>
 800561c:	f8ca 3000 	str.w	r3, [sl]
 8005620:	f04f 0800 	mov.w	r8, #0
 8005624:	9b08      	ldr	r3, [sp, #32]
 8005626:	2b00      	cmp	r3, #0
 8005628:	f43f adf3 	beq.w	8005212 <_strtod_l+0x82>
 800562c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800562e:	4650      	mov	r0, sl
 8005630:	f001 feae 	bl	8007390 <_Bfree>
 8005634:	9906      	ldr	r1, [sp, #24]
 8005636:	4650      	mov	r0, sl
 8005638:	f001 feaa 	bl	8007390 <_Bfree>
 800563c:	9904      	ldr	r1, [sp, #16]
 800563e:	4650      	mov	r0, sl
 8005640:	f001 fea6 	bl	8007390 <_Bfree>
 8005644:	9908      	ldr	r1, [sp, #32]
 8005646:	4650      	mov	r0, sl
 8005648:	f001 fea2 	bl	8007390 <_Bfree>
 800564c:	4659      	mov	r1, fp
 800564e:	4650      	mov	r0, sl
 8005650:	f001 fe9e 	bl	8007390 <_Bfree>
 8005654:	e5dd      	b.n	8005212 <_strtod_l+0x82>
 8005656:	2300      	movs	r3, #0
 8005658:	1136      	asrs	r6, r6, #4
 800565a:	4640      	mov	r0, r8
 800565c:	4649      	mov	r1, r9
 800565e:	461f      	mov	r7, r3
 8005660:	2e01      	cmp	r6, #1
 8005662:	dc21      	bgt.n	80056a8 <_strtod_l+0x518>
 8005664:	b10b      	cbz	r3, 800566a <_strtod_l+0x4da>
 8005666:	4680      	mov	r8, r0
 8005668:	4689      	mov	r9, r1
 800566a:	4b2e      	ldr	r3, [pc, #184]	; (8005724 <_strtod_l+0x594>)
 800566c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005670:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005674:	4642      	mov	r2, r8
 8005676:	464b      	mov	r3, r9
 8005678:	e9d7 0100 	ldrd	r0, r1, [r7]
 800567c:	f7fa ffd4 	bl	8000628 <__aeabi_dmul>
 8005680:	4b29      	ldr	r3, [pc, #164]	; (8005728 <_strtod_l+0x598>)
 8005682:	460a      	mov	r2, r1
 8005684:	400b      	ands	r3, r1
 8005686:	4929      	ldr	r1, [pc, #164]	; (800572c <_strtod_l+0x59c>)
 8005688:	428b      	cmp	r3, r1
 800568a:	4680      	mov	r8, r0
 800568c:	d8bb      	bhi.n	8005606 <_strtod_l+0x476>
 800568e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005692:	428b      	cmp	r3, r1
 8005694:	bf86      	itte	hi
 8005696:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 8005730 <_strtod_l+0x5a0>
 800569a:	f04f 38ff 	movhi.w	r8, #4294967295
 800569e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80056a2:	2300      	movs	r3, #0
 80056a4:	9305      	str	r3, [sp, #20]
 80056a6:	e07e      	b.n	80057a6 <_strtod_l+0x616>
 80056a8:	07f2      	lsls	r2, r6, #31
 80056aa:	d507      	bpl.n	80056bc <_strtod_l+0x52c>
 80056ac:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <_strtod_l+0x594>)
 80056ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	f7fa ffb7 	bl	8000628 <__aeabi_dmul>
 80056ba:	2301      	movs	r3, #1
 80056bc:	3701      	adds	r7, #1
 80056be:	1076      	asrs	r6, r6, #1
 80056c0:	e7ce      	b.n	8005660 <_strtod_l+0x4d0>
 80056c2:	d0ee      	beq.n	80056a2 <_strtod_l+0x512>
 80056c4:	4276      	negs	r6, r6
 80056c6:	f016 020f 	ands.w	r2, r6, #15
 80056ca:	d00a      	beq.n	80056e2 <_strtod_l+0x552>
 80056cc:	4b14      	ldr	r3, [pc, #80]	; (8005720 <_strtod_l+0x590>)
 80056ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056d2:	4640      	mov	r0, r8
 80056d4:	4649      	mov	r1, r9
 80056d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056da:	f7fb f8cf 	bl	800087c <__aeabi_ddiv>
 80056de:	4680      	mov	r8, r0
 80056e0:	4689      	mov	r9, r1
 80056e2:	1136      	asrs	r6, r6, #4
 80056e4:	d0dd      	beq.n	80056a2 <_strtod_l+0x512>
 80056e6:	2e1f      	cmp	r6, #31
 80056e8:	dd24      	ble.n	8005734 <_strtod_l+0x5a4>
 80056ea:	f04f 0b00 	mov.w	fp, #0
 80056ee:	f8cd b010 	str.w	fp, [sp, #16]
 80056f2:	f8cd b020 	str.w	fp, [sp, #32]
 80056f6:	f8cd b018 	str.w	fp, [sp, #24]
 80056fa:	2322      	movs	r3, #34	; 0x22
 80056fc:	f04f 0800 	mov.w	r8, #0
 8005700:	f04f 0900 	mov.w	r9, #0
 8005704:	f8ca 3000 	str.w	r3, [sl]
 8005708:	e78c      	b.n	8005624 <_strtod_l+0x494>
 800570a:	bf00      	nop
 800570c:	08009b49 	.word	0x08009b49
 8005710:	08009b88 	.word	0x08009b88
 8005714:	08009b41 	.word	0x08009b41
 8005718:	08009ccc 	.word	0x08009ccc
 800571c:	08009fa3 	.word	0x08009fa3
 8005720:	08009e68 	.word	0x08009e68
 8005724:	08009e40 	.word	0x08009e40
 8005728:	7ff00000 	.word	0x7ff00000
 800572c:	7ca00000 	.word	0x7ca00000
 8005730:	7fefffff 	.word	0x7fefffff
 8005734:	f016 0310 	ands.w	r3, r6, #16
 8005738:	bf18      	it	ne
 800573a:	236a      	movne	r3, #106	; 0x6a
 800573c:	4fb3      	ldr	r7, [pc, #716]	; (8005a0c <_strtod_l+0x87c>)
 800573e:	9305      	str	r3, [sp, #20]
 8005740:	4640      	mov	r0, r8
 8005742:	4649      	mov	r1, r9
 8005744:	2300      	movs	r3, #0
 8005746:	07f2      	lsls	r2, r6, #31
 8005748:	d504      	bpl.n	8005754 <_strtod_l+0x5c4>
 800574a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800574e:	f7fa ff6b 	bl	8000628 <__aeabi_dmul>
 8005752:	2301      	movs	r3, #1
 8005754:	1076      	asrs	r6, r6, #1
 8005756:	f107 0708 	add.w	r7, r7, #8
 800575a:	d1f4      	bne.n	8005746 <_strtod_l+0x5b6>
 800575c:	b10b      	cbz	r3, 8005762 <_strtod_l+0x5d2>
 800575e:	4680      	mov	r8, r0
 8005760:	4689      	mov	r9, r1
 8005762:	9b05      	ldr	r3, [sp, #20]
 8005764:	b1bb      	cbz	r3, 8005796 <_strtod_l+0x606>
 8005766:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800576a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800576e:	2b00      	cmp	r3, #0
 8005770:	4649      	mov	r1, r9
 8005772:	dd10      	ble.n	8005796 <_strtod_l+0x606>
 8005774:	2b1f      	cmp	r3, #31
 8005776:	f340 8128 	ble.w	80059ca <_strtod_l+0x83a>
 800577a:	2b34      	cmp	r3, #52	; 0x34
 800577c:	bfde      	ittt	le
 800577e:	3b20      	suble	r3, #32
 8005780:	f04f 32ff 	movle.w	r2, #4294967295
 8005784:	fa02 f303 	lslle.w	r3, r2, r3
 8005788:	f04f 0800 	mov.w	r8, #0
 800578c:	bfcc      	ite	gt
 800578e:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005792:	ea03 0901 	andle.w	r9, r3, r1
 8005796:	2200      	movs	r2, #0
 8005798:	2300      	movs	r3, #0
 800579a:	4640      	mov	r0, r8
 800579c:	4649      	mov	r1, r9
 800579e:	f7fb f9ab 	bl	8000af8 <__aeabi_dcmpeq>
 80057a2:	2800      	cmp	r0, #0
 80057a4:	d1a1      	bne.n	80056ea <_strtod_l+0x55a>
 80057a6:	9b06      	ldr	r3, [sp, #24]
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	9908      	ldr	r1, [sp, #32]
 80057ac:	4623      	mov	r3, r4
 80057ae:	465a      	mov	r2, fp
 80057b0:	4650      	mov	r0, sl
 80057b2:	f001 fe59 	bl	8007468 <__s2b>
 80057b6:	9008      	str	r0, [sp, #32]
 80057b8:	2800      	cmp	r0, #0
 80057ba:	f43f af24 	beq.w	8005606 <_strtod_l+0x476>
 80057be:	9b04      	ldr	r3, [sp, #16]
 80057c0:	1b5d      	subs	r5, r3, r5
 80057c2:	9b07      	ldr	r3, [sp, #28]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	bfb4      	ite	lt
 80057c8:	462b      	movlt	r3, r5
 80057ca:	2300      	movge	r3, #0
 80057cc:	930e      	str	r3, [sp, #56]	; 0x38
 80057ce:	9b07      	ldr	r3, [sp, #28]
 80057d0:	f04f 0b00 	mov.w	fp, #0
 80057d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80057d8:	9316      	str	r3, [sp, #88]	; 0x58
 80057da:	f8cd b010 	str.w	fp, [sp, #16]
 80057de:	9b08      	ldr	r3, [sp, #32]
 80057e0:	4650      	mov	r0, sl
 80057e2:	6859      	ldr	r1, [r3, #4]
 80057e4:	f001 fd94 	bl	8007310 <_Balloc>
 80057e8:	9006      	str	r0, [sp, #24]
 80057ea:	2800      	cmp	r0, #0
 80057ec:	f43f af13 	beq.w	8005616 <_strtod_l+0x486>
 80057f0:	9b08      	ldr	r3, [sp, #32]
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	3202      	adds	r2, #2
 80057f6:	f103 010c 	add.w	r1, r3, #12
 80057fa:	0092      	lsls	r2, r2, #2
 80057fc:	300c      	adds	r0, #12
 80057fe:	f001 fd79 	bl	80072f4 <memcpy>
 8005802:	ab1e      	add	r3, sp, #120	; 0x78
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	ab1d      	add	r3, sp, #116	; 0x74
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	4642      	mov	r2, r8
 800580c:	464b      	mov	r3, r9
 800580e:	4650      	mov	r0, sl
 8005810:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8005814:	f002 f962 	bl	8007adc <__d2b>
 8005818:	901c      	str	r0, [sp, #112]	; 0x70
 800581a:	2800      	cmp	r0, #0
 800581c:	f43f aefb 	beq.w	8005616 <_strtod_l+0x486>
 8005820:	2101      	movs	r1, #1
 8005822:	4650      	mov	r0, sl
 8005824:	f001 feb8 	bl	8007598 <__i2b>
 8005828:	9004      	str	r0, [sp, #16]
 800582a:	4603      	mov	r3, r0
 800582c:	2800      	cmp	r0, #0
 800582e:	f43f aef2 	beq.w	8005616 <_strtod_l+0x486>
 8005832:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005834:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005836:	2d00      	cmp	r5, #0
 8005838:	bfab      	itete	ge
 800583a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800583c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800583e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005840:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005842:	bfac      	ite	ge
 8005844:	18ee      	addge	r6, r5, r3
 8005846:	1b5c      	sublt	r4, r3, r5
 8005848:	9b05      	ldr	r3, [sp, #20]
 800584a:	1aed      	subs	r5, r5, r3
 800584c:	4415      	add	r5, r2
 800584e:	4b70      	ldr	r3, [pc, #448]	; (8005a10 <_strtod_l+0x880>)
 8005850:	3d01      	subs	r5, #1
 8005852:	429d      	cmp	r5, r3
 8005854:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005858:	f280 80c9 	bge.w	80059ee <_strtod_l+0x85e>
 800585c:	1b5b      	subs	r3, r3, r5
 800585e:	2b1f      	cmp	r3, #31
 8005860:	eba2 0203 	sub.w	r2, r2, r3
 8005864:	f04f 0701 	mov.w	r7, #1
 8005868:	f300 80b6 	bgt.w	80059d8 <_strtod_l+0x848>
 800586c:	fa07 f303 	lsl.w	r3, r7, r3
 8005870:	930f      	str	r3, [sp, #60]	; 0x3c
 8005872:	2500      	movs	r5, #0
 8005874:	18b7      	adds	r7, r6, r2
 8005876:	9b05      	ldr	r3, [sp, #20]
 8005878:	42be      	cmp	r6, r7
 800587a:	4414      	add	r4, r2
 800587c:	441c      	add	r4, r3
 800587e:	4633      	mov	r3, r6
 8005880:	bfa8      	it	ge
 8005882:	463b      	movge	r3, r7
 8005884:	42a3      	cmp	r3, r4
 8005886:	bfa8      	it	ge
 8005888:	4623      	movge	r3, r4
 800588a:	2b00      	cmp	r3, #0
 800588c:	bfc2      	ittt	gt
 800588e:	1aff      	subgt	r7, r7, r3
 8005890:	1ae4      	subgt	r4, r4, r3
 8005892:	1af6      	subgt	r6, r6, r3
 8005894:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005896:	2b00      	cmp	r3, #0
 8005898:	dd17      	ble.n	80058ca <_strtod_l+0x73a>
 800589a:	9904      	ldr	r1, [sp, #16]
 800589c:	461a      	mov	r2, r3
 800589e:	4650      	mov	r0, sl
 80058a0:	f001 ff36 	bl	8007710 <__pow5mult>
 80058a4:	9004      	str	r0, [sp, #16]
 80058a6:	2800      	cmp	r0, #0
 80058a8:	f43f aeb5 	beq.w	8005616 <_strtod_l+0x486>
 80058ac:	4601      	mov	r1, r0
 80058ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80058b0:	4650      	mov	r0, sl
 80058b2:	f001 fe87 	bl	80075c4 <__multiply>
 80058b6:	9009      	str	r0, [sp, #36]	; 0x24
 80058b8:	2800      	cmp	r0, #0
 80058ba:	f43f aeac 	beq.w	8005616 <_strtod_l+0x486>
 80058be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80058c0:	4650      	mov	r0, sl
 80058c2:	f001 fd65 	bl	8007390 <_Bfree>
 80058c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c8:	931c      	str	r3, [sp, #112]	; 0x70
 80058ca:	2f00      	cmp	r7, #0
 80058cc:	f300 8093 	bgt.w	80059f6 <_strtod_l+0x866>
 80058d0:	9b07      	ldr	r3, [sp, #28]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	dd08      	ble.n	80058e8 <_strtod_l+0x758>
 80058d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80058d8:	9906      	ldr	r1, [sp, #24]
 80058da:	4650      	mov	r0, sl
 80058dc:	f001 ff18 	bl	8007710 <__pow5mult>
 80058e0:	9006      	str	r0, [sp, #24]
 80058e2:	2800      	cmp	r0, #0
 80058e4:	f43f ae97 	beq.w	8005616 <_strtod_l+0x486>
 80058e8:	2c00      	cmp	r4, #0
 80058ea:	dd08      	ble.n	80058fe <_strtod_l+0x76e>
 80058ec:	9906      	ldr	r1, [sp, #24]
 80058ee:	4622      	mov	r2, r4
 80058f0:	4650      	mov	r0, sl
 80058f2:	f001 ff67 	bl	80077c4 <__lshift>
 80058f6:	9006      	str	r0, [sp, #24]
 80058f8:	2800      	cmp	r0, #0
 80058fa:	f43f ae8c 	beq.w	8005616 <_strtod_l+0x486>
 80058fe:	2e00      	cmp	r6, #0
 8005900:	dd08      	ble.n	8005914 <_strtod_l+0x784>
 8005902:	9904      	ldr	r1, [sp, #16]
 8005904:	4632      	mov	r2, r6
 8005906:	4650      	mov	r0, sl
 8005908:	f001 ff5c 	bl	80077c4 <__lshift>
 800590c:	9004      	str	r0, [sp, #16]
 800590e:	2800      	cmp	r0, #0
 8005910:	f43f ae81 	beq.w	8005616 <_strtod_l+0x486>
 8005914:	9a06      	ldr	r2, [sp, #24]
 8005916:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005918:	4650      	mov	r0, sl
 800591a:	f001 ffdb 	bl	80078d4 <__mdiff>
 800591e:	4683      	mov	fp, r0
 8005920:	2800      	cmp	r0, #0
 8005922:	f43f ae78 	beq.w	8005616 <_strtod_l+0x486>
 8005926:	2400      	movs	r4, #0
 8005928:	68c3      	ldr	r3, [r0, #12]
 800592a:	9904      	ldr	r1, [sp, #16]
 800592c:	60c4      	str	r4, [r0, #12]
 800592e:	930d      	str	r3, [sp, #52]	; 0x34
 8005930:	f001 ffb4 	bl	800789c <__mcmp>
 8005934:	42a0      	cmp	r0, r4
 8005936:	da71      	bge.n	8005a1c <_strtod_l+0x88c>
 8005938:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800593a:	ea53 0308 	orrs.w	r3, r3, r8
 800593e:	f040 8097 	bne.w	8005a70 <_strtod_l+0x8e0>
 8005942:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005946:	2b00      	cmp	r3, #0
 8005948:	f040 8092 	bne.w	8005a70 <_strtod_l+0x8e0>
 800594c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005950:	0d1b      	lsrs	r3, r3, #20
 8005952:	051b      	lsls	r3, r3, #20
 8005954:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005958:	f240 808a 	bls.w	8005a70 <_strtod_l+0x8e0>
 800595c:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005960:	b923      	cbnz	r3, 800596c <_strtod_l+0x7dc>
 8005962:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005966:	2b01      	cmp	r3, #1
 8005968:	f340 8082 	ble.w	8005a70 <_strtod_l+0x8e0>
 800596c:	4659      	mov	r1, fp
 800596e:	2201      	movs	r2, #1
 8005970:	4650      	mov	r0, sl
 8005972:	f001 ff27 	bl	80077c4 <__lshift>
 8005976:	9904      	ldr	r1, [sp, #16]
 8005978:	4683      	mov	fp, r0
 800597a:	f001 ff8f 	bl	800789c <__mcmp>
 800597e:	2800      	cmp	r0, #0
 8005980:	dd76      	ble.n	8005a70 <_strtod_l+0x8e0>
 8005982:	9905      	ldr	r1, [sp, #20]
 8005984:	4a23      	ldr	r2, [pc, #140]	; (8005a14 <_strtod_l+0x884>)
 8005986:	464b      	mov	r3, r9
 8005988:	2900      	cmp	r1, #0
 800598a:	f000 8092 	beq.w	8005ab2 <_strtod_l+0x922>
 800598e:	ea02 0109 	and.w	r1, r2, r9
 8005992:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005996:	f300 808c 	bgt.w	8005ab2 <_strtod_l+0x922>
 800599a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800599e:	f77f aeac 	ble.w	80056fa <_strtod_l+0x56a>
 80059a2:	4a1d      	ldr	r2, [pc, #116]	; (8005a18 <_strtod_l+0x888>)
 80059a4:	2300      	movs	r3, #0
 80059a6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80059aa:	4640      	mov	r0, r8
 80059ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80059b0:	4649      	mov	r1, r9
 80059b2:	f7fa fe39 	bl	8000628 <__aeabi_dmul>
 80059b6:	460b      	mov	r3, r1
 80059b8:	4303      	orrs	r3, r0
 80059ba:	bf08      	it	eq
 80059bc:	2322      	moveq	r3, #34	; 0x22
 80059be:	4680      	mov	r8, r0
 80059c0:	4689      	mov	r9, r1
 80059c2:	bf08      	it	eq
 80059c4:	f8ca 3000 	streq.w	r3, [sl]
 80059c8:	e630      	b.n	800562c <_strtod_l+0x49c>
 80059ca:	f04f 32ff 	mov.w	r2, #4294967295
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	ea03 0808 	and.w	r8, r3, r8
 80059d6:	e6de      	b.n	8005796 <_strtod_l+0x606>
 80059d8:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80059dc:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80059e0:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80059e4:	35e2      	adds	r5, #226	; 0xe2
 80059e6:	fa07 f505 	lsl.w	r5, r7, r5
 80059ea:	970f      	str	r7, [sp, #60]	; 0x3c
 80059ec:	e742      	b.n	8005874 <_strtod_l+0x6e4>
 80059ee:	2301      	movs	r3, #1
 80059f0:	2500      	movs	r5, #0
 80059f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80059f4:	e73e      	b.n	8005874 <_strtod_l+0x6e4>
 80059f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80059f8:	463a      	mov	r2, r7
 80059fa:	4650      	mov	r0, sl
 80059fc:	f001 fee2 	bl	80077c4 <__lshift>
 8005a00:	901c      	str	r0, [sp, #112]	; 0x70
 8005a02:	2800      	cmp	r0, #0
 8005a04:	f47f af64 	bne.w	80058d0 <_strtod_l+0x740>
 8005a08:	e605      	b.n	8005616 <_strtod_l+0x486>
 8005a0a:	bf00      	nop
 8005a0c:	08009ba0 	.word	0x08009ba0
 8005a10:	fffffc02 	.word	0xfffffc02
 8005a14:	7ff00000 	.word	0x7ff00000
 8005a18:	39500000 	.word	0x39500000
 8005a1c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005a20:	d166      	bne.n	8005af0 <_strtod_l+0x960>
 8005a22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a28:	b35a      	cbz	r2, 8005a82 <_strtod_l+0x8f2>
 8005a2a:	4a9d      	ldr	r2, [pc, #628]	; (8005ca0 <_strtod_l+0xb10>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d12c      	bne.n	8005a8a <_strtod_l+0x8fa>
 8005a30:	9b05      	ldr	r3, [sp, #20]
 8005a32:	4640      	mov	r0, r8
 8005a34:	b303      	cbz	r3, 8005a78 <_strtod_l+0x8e8>
 8005a36:	4a9b      	ldr	r2, [pc, #620]	; (8005ca4 <_strtod_l+0xb14>)
 8005a38:	464b      	mov	r3, r9
 8005a3a:	401a      	ands	r2, r3
 8005a3c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005a40:	f04f 31ff 	mov.w	r1, #4294967295
 8005a44:	d81b      	bhi.n	8005a7e <_strtod_l+0x8ee>
 8005a46:	0d12      	lsrs	r2, r2, #20
 8005a48:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a50:	4298      	cmp	r0, r3
 8005a52:	d11a      	bne.n	8005a8a <_strtod_l+0x8fa>
 8005a54:	4b94      	ldr	r3, [pc, #592]	; (8005ca8 <_strtod_l+0xb18>)
 8005a56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d102      	bne.n	8005a62 <_strtod_l+0x8d2>
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	f43f adda 	beq.w	8005616 <_strtod_l+0x486>
 8005a62:	4b90      	ldr	r3, [pc, #576]	; (8005ca4 <_strtod_l+0xb14>)
 8005a64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a66:	401a      	ands	r2, r3
 8005a68:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005a6c:	f04f 0800 	mov.w	r8, #0
 8005a70:	9b05      	ldr	r3, [sp, #20]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d195      	bne.n	80059a2 <_strtod_l+0x812>
 8005a76:	e5d9      	b.n	800562c <_strtod_l+0x49c>
 8005a78:	f04f 33ff 	mov.w	r3, #4294967295
 8005a7c:	e7e8      	b.n	8005a50 <_strtod_l+0x8c0>
 8005a7e:	460b      	mov	r3, r1
 8005a80:	e7e6      	b.n	8005a50 <_strtod_l+0x8c0>
 8005a82:	ea53 0308 	orrs.w	r3, r3, r8
 8005a86:	f43f af7c 	beq.w	8005982 <_strtod_l+0x7f2>
 8005a8a:	b1e5      	cbz	r5, 8005ac6 <_strtod_l+0x936>
 8005a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a8e:	421d      	tst	r5, r3
 8005a90:	d0ee      	beq.n	8005a70 <_strtod_l+0x8e0>
 8005a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a94:	9a05      	ldr	r2, [sp, #20]
 8005a96:	4640      	mov	r0, r8
 8005a98:	4649      	mov	r1, r9
 8005a9a:	b1c3      	cbz	r3, 8005ace <_strtod_l+0x93e>
 8005a9c:	f7ff fb57 	bl	800514e <sulp>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005aa8:	f7fa fc08 	bl	80002bc <__adddf3>
 8005aac:	4680      	mov	r8, r0
 8005aae:	4689      	mov	r9, r1
 8005ab0:	e7de      	b.n	8005a70 <_strtod_l+0x8e0>
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005ab8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005abc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005ac0:	f04f 38ff 	mov.w	r8, #4294967295
 8005ac4:	e7d4      	b.n	8005a70 <_strtod_l+0x8e0>
 8005ac6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ac8:	ea13 0f08 	tst.w	r3, r8
 8005acc:	e7e0      	b.n	8005a90 <_strtod_l+0x900>
 8005ace:	f7ff fb3e 	bl	800514e <sulp>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ada:	f7fa fbed 	bl	80002b8 <__aeabi_dsub>
 8005ade:	2200      	movs	r2, #0
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	4680      	mov	r8, r0
 8005ae4:	4689      	mov	r9, r1
 8005ae6:	f7fb f807 	bl	8000af8 <__aeabi_dcmpeq>
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d0c0      	beq.n	8005a70 <_strtod_l+0x8e0>
 8005aee:	e604      	b.n	80056fa <_strtod_l+0x56a>
 8005af0:	9904      	ldr	r1, [sp, #16]
 8005af2:	4658      	mov	r0, fp
 8005af4:	f002 f84e 	bl	8007b94 <__ratio>
 8005af8:	2200      	movs	r2, #0
 8005afa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005afe:	4606      	mov	r6, r0
 8005b00:	460f      	mov	r7, r1
 8005b02:	f7fb f80d 	bl	8000b20 <__aeabi_dcmple>
 8005b06:	2800      	cmp	r0, #0
 8005b08:	d075      	beq.n	8005bf6 <_strtod_l+0xa66>
 8005b0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d047      	beq.n	8005ba0 <_strtod_l+0xa10>
 8005b10:	4f66      	ldr	r7, [pc, #408]	; (8005cac <_strtod_l+0xb1c>)
 8005b12:	2600      	movs	r6, #0
 8005b14:	4d65      	ldr	r5, [pc, #404]	; (8005cac <_strtod_l+0xb1c>)
 8005b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b1c:	0d1b      	lsrs	r3, r3, #20
 8005b1e:	051b      	lsls	r3, r3, #20
 8005b20:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b24:	4b62      	ldr	r3, [pc, #392]	; (8005cb0 <_strtod_l+0xb20>)
 8005b26:	429a      	cmp	r2, r3
 8005b28:	f040 80ca 	bne.w	8005cc0 <_strtod_l+0xb30>
 8005b2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b30:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b36:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005b3a:	4640      	mov	r0, r8
 8005b3c:	4649      	mov	r1, r9
 8005b3e:	f001 ff53 	bl	80079e8 <__ulp>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4630      	mov	r0, r6
 8005b48:	4639      	mov	r1, r7
 8005b4a:	f7fa fd6d 	bl	8000628 <__aeabi_dmul>
 8005b4e:	4642      	mov	r2, r8
 8005b50:	464b      	mov	r3, r9
 8005b52:	f7fa fbb3 	bl	80002bc <__adddf3>
 8005b56:	460b      	mov	r3, r1
 8005b58:	4952      	ldr	r1, [pc, #328]	; (8005ca4 <_strtod_l+0xb14>)
 8005b5a:	4a56      	ldr	r2, [pc, #344]	; (8005cb4 <_strtod_l+0xb24>)
 8005b5c:	4019      	ands	r1, r3
 8005b5e:	4291      	cmp	r1, r2
 8005b60:	4680      	mov	r8, r0
 8005b62:	d95e      	bls.n	8005c22 <_strtod_l+0xa92>
 8005b64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b66:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d103      	bne.n	8005b76 <_strtod_l+0x9e6>
 8005b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b70:	3301      	adds	r3, #1
 8005b72:	f43f ad50 	beq.w	8005616 <_strtod_l+0x486>
 8005b76:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8005ca8 <_strtod_l+0xb18>
 8005b7a:	f04f 38ff 	mov.w	r8, #4294967295
 8005b7e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005b80:	4650      	mov	r0, sl
 8005b82:	f001 fc05 	bl	8007390 <_Bfree>
 8005b86:	9906      	ldr	r1, [sp, #24]
 8005b88:	4650      	mov	r0, sl
 8005b8a:	f001 fc01 	bl	8007390 <_Bfree>
 8005b8e:	9904      	ldr	r1, [sp, #16]
 8005b90:	4650      	mov	r0, sl
 8005b92:	f001 fbfd 	bl	8007390 <_Bfree>
 8005b96:	4659      	mov	r1, fp
 8005b98:	4650      	mov	r0, sl
 8005b9a:	f001 fbf9 	bl	8007390 <_Bfree>
 8005b9e:	e61e      	b.n	80057de <_strtod_l+0x64e>
 8005ba0:	f1b8 0f00 	cmp.w	r8, #0
 8005ba4:	d119      	bne.n	8005bda <_strtod_l+0xa4a>
 8005ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bac:	b9e3      	cbnz	r3, 8005be8 <_strtod_l+0xa58>
 8005bae:	4b3f      	ldr	r3, [pc, #252]	; (8005cac <_strtod_l+0xb1c>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	4639      	mov	r1, r7
 8005bb6:	f7fa ffa9 	bl	8000b0c <__aeabi_dcmplt>
 8005bba:	b9c8      	cbnz	r0, 8005bf0 <_strtod_l+0xa60>
 8005bbc:	4b3e      	ldr	r3, [pc, #248]	; (8005cb8 <_strtod_l+0xb28>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	4639      	mov	r1, r7
 8005bc4:	f7fa fd30 	bl	8000628 <__aeabi_dmul>
 8005bc8:	4604      	mov	r4, r0
 8005bca:	460d      	mov	r5, r1
 8005bcc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005bd0:	9418      	str	r4, [sp, #96]	; 0x60
 8005bd2:	9319      	str	r3, [sp, #100]	; 0x64
 8005bd4:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005bd8:	e79d      	b.n	8005b16 <_strtod_l+0x986>
 8005bda:	f1b8 0f01 	cmp.w	r8, #1
 8005bde:	d103      	bne.n	8005be8 <_strtod_l+0xa58>
 8005be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f43f ad89 	beq.w	80056fa <_strtod_l+0x56a>
 8005be8:	4f34      	ldr	r7, [pc, #208]	; (8005cbc <_strtod_l+0xb2c>)
 8005bea:	2600      	movs	r6, #0
 8005bec:	2400      	movs	r4, #0
 8005bee:	e791      	b.n	8005b14 <_strtod_l+0x984>
 8005bf0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005bf2:	4d31      	ldr	r5, [pc, #196]	; (8005cb8 <_strtod_l+0xb28>)
 8005bf4:	e7ea      	b.n	8005bcc <_strtod_l+0xa3c>
 8005bf6:	4b30      	ldr	r3, [pc, #192]	; (8005cb8 <_strtod_l+0xb28>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	4639      	mov	r1, r7
 8005bfe:	f7fa fd13 	bl	8000628 <__aeabi_dmul>
 8005c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c04:	4604      	mov	r4, r0
 8005c06:	460d      	mov	r5, r1
 8005c08:	b933      	cbnz	r3, 8005c18 <_strtod_l+0xa88>
 8005c0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c0e:	9010      	str	r0, [sp, #64]	; 0x40
 8005c10:	9311      	str	r3, [sp, #68]	; 0x44
 8005c12:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005c16:	e77e      	b.n	8005b16 <_strtod_l+0x986>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005c20:	e7f7      	b.n	8005c12 <_strtod_l+0xa82>
 8005c22:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005c26:	9b05      	ldr	r3, [sp, #20]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1a8      	bne.n	8005b7e <_strtod_l+0x9ee>
 8005c2c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c32:	0d1b      	lsrs	r3, r3, #20
 8005c34:	051b      	lsls	r3, r3, #20
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d1a1      	bne.n	8005b7e <_strtod_l+0x9ee>
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	f7fb f83b 	bl	8000cb8 <__aeabi_d2lz>
 8005c42:	f7fa fcc3 	bl	80005cc <__aeabi_l2d>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	f7fa fb33 	bl	80002b8 <__aeabi_dsub>
 8005c52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c58:	ea43 0308 	orr.w	r3, r3, r8
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	4604      	mov	r4, r0
 8005c60:	460d      	mov	r5, r1
 8005c62:	d068      	beq.n	8005d36 <_strtod_l+0xba6>
 8005c64:	a30a      	add	r3, pc, #40	; (adr r3, 8005c90 <_strtod_l+0xb00>)
 8005c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6a:	f7fa ff4f 	bl	8000b0c <__aeabi_dcmplt>
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	f47f acdc 	bne.w	800562c <_strtod_l+0x49c>
 8005c74:	a308      	add	r3, pc, #32	; (adr r3, 8005c98 <_strtod_l+0xb08>)
 8005c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	f7fa ff63 	bl	8000b48 <__aeabi_dcmpgt>
 8005c82:	2800      	cmp	r0, #0
 8005c84:	f43f af7b 	beq.w	8005b7e <_strtod_l+0x9ee>
 8005c88:	e4d0      	b.n	800562c <_strtod_l+0x49c>
 8005c8a:	bf00      	nop
 8005c8c:	f3af 8000 	nop.w
 8005c90:	94a03595 	.word	0x94a03595
 8005c94:	3fdfffff 	.word	0x3fdfffff
 8005c98:	35afe535 	.word	0x35afe535
 8005c9c:	3fe00000 	.word	0x3fe00000
 8005ca0:	000fffff 	.word	0x000fffff
 8005ca4:	7ff00000 	.word	0x7ff00000
 8005ca8:	7fefffff 	.word	0x7fefffff
 8005cac:	3ff00000 	.word	0x3ff00000
 8005cb0:	7fe00000 	.word	0x7fe00000
 8005cb4:	7c9fffff 	.word	0x7c9fffff
 8005cb8:	3fe00000 	.word	0x3fe00000
 8005cbc:	bff00000 	.word	0xbff00000
 8005cc0:	9b05      	ldr	r3, [sp, #20]
 8005cc2:	b313      	cbz	r3, 8005d0a <_strtod_l+0xb7a>
 8005cc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005cca:	d81e      	bhi.n	8005d0a <_strtod_l+0xb7a>
 8005ccc:	a326      	add	r3, pc, #152	; (adr r3, 8005d68 <_strtod_l+0xbd8>)
 8005cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	f7fa ff23 	bl	8000b20 <__aeabi_dcmple>
 8005cda:	b190      	cbz	r0, 8005d02 <_strtod_l+0xb72>
 8005cdc:	4629      	mov	r1, r5
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f7fa ff7a 	bl	8000bd8 <__aeabi_d2uiz>
 8005ce4:	2801      	cmp	r0, #1
 8005ce6:	bf38      	it	cc
 8005ce8:	2001      	movcc	r0, #1
 8005cea:	f7fa fc23 	bl	8000534 <__aeabi_ui2d>
 8005cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cf0:	4604      	mov	r4, r0
 8005cf2:	460d      	mov	r5, r1
 8005cf4:	b9d3      	cbnz	r3, 8005d2c <_strtod_l+0xb9c>
 8005cf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cfa:	9012      	str	r0, [sp, #72]	; 0x48
 8005cfc:	9313      	str	r3, [sp, #76]	; 0x4c
 8005cfe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005d02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d04:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005d08:	1a9f      	subs	r7, r3, r2
 8005d0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d0e:	f001 fe6b 	bl	80079e8 <__ulp>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	4630      	mov	r0, r6
 8005d18:	4639      	mov	r1, r7
 8005d1a:	f7fa fc85 	bl	8000628 <__aeabi_dmul>
 8005d1e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d22:	f7fa facb 	bl	80002bc <__adddf3>
 8005d26:	4680      	mov	r8, r0
 8005d28:	4689      	mov	r9, r1
 8005d2a:	e77c      	b.n	8005c26 <_strtod_l+0xa96>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005d34:	e7e3      	b.n	8005cfe <_strtod_l+0xb6e>
 8005d36:	a30e      	add	r3, pc, #56	; (adr r3, 8005d70 <_strtod_l+0xbe0>)
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	f7fa fee6 	bl	8000b0c <__aeabi_dcmplt>
 8005d40:	e79f      	b.n	8005c82 <_strtod_l+0xaf2>
 8005d42:	2300      	movs	r3, #0
 8005d44:	930c      	str	r3, [sp, #48]	; 0x30
 8005d46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005d48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	f7ff ba65 	b.w	800521a <_strtod_l+0x8a>
 8005d50:	2b65      	cmp	r3, #101	; 0x65
 8005d52:	f43f ab5c 	beq.w	800540e <_strtod_l+0x27e>
 8005d56:	2b45      	cmp	r3, #69	; 0x45
 8005d58:	f43f ab59 	beq.w	800540e <_strtod_l+0x27e>
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f7ff bb8d 	b.w	800547c <_strtod_l+0x2ec>
 8005d62:	bf00      	nop
 8005d64:	f3af 8000 	nop.w
 8005d68:	ffc00000 	.word	0xffc00000
 8005d6c:	41dfffff 	.word	0x41dfffff
 8005d70:	94a03595 	.word	0x94a03595
 8005d74:	3fcfffff 	.word	0x3fcfffff

08005d78 <_strtod_r>:
 8005d78:	4b01      	ldr	r3, [pc, #4]	; (8005d80 <_strtod_r+0x8>)
 8005d7a:	f7ff ba09 	b.w	8005190 <_strtod_l>
 8005d7e:	bf00      	nop
 8005d80:	20000068 	.word	0x20000068

08005d84 <_strtol_l.isra.0>:
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d8a:	4686      	mov	lr, r0
 8005d8c:	d001      	beq.n	8005d92 <_strtol_l.isra.0+0xe>
 8005d8e:	2b24      	cmp	r3, #36	; 0x24
 8005d90:	d906      	bls.n	8005da0 <_strtol_l.isra.0+0x1c>
 8005d92:	f7fe faab 	bl	80042ec <__errno>
 8005d96:	2316      	movs	r3, #22
 8005d98:	6003      	str	r3, [r0, #0]
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005da0:	4e3a      	ldr	r6, [pc, #232]	; (8005e8c <_strtol_l.isra.0+0x108>)
 8005da2:	468c      	mov	ip, r1
 8005da4:	4660      	mov	r0, ip
 8005da6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005daa:	5da5      	ldrb	r5, [r4, r6]
 8005dac:	f015 0508 	ands.w	r5, r5, #8
 8005db0:	d1f8      	bne.n	8005da4 <_strtol_l.isra.0+0x20>
 8005db2:	2c2d      	cmp	r4, #45	; 0x2d
 8005db4:	d133      	bne.n	8005e1e <_strtol_l.isra.0+0x9a>
 8005db6:	f89c 4000 	ldrb.w	r4, [ip]
 8005dba:	f04f 0801 	mov.w	r8, #1
 8005dbe:	f100 0c02 	add.w	ip, r0, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d05d      	beq.n	8005e82 <_strtol_l.isra.0+0xfe>
 8005dc6:	2b10      	cmp	r3, #16
 8005dc8:	d10c      	bne.n	8005de4 <_strtol_l.isra.0+0x60>
 8005dca:	2c30      	cmp	r4, #48	; 0x30
 8005dcc:	d10a      	bne.n	8005de4 <_strtol_l.isra.0+0x60>
 8005dce:	f89c 0000 	ldrb.w	r0, [ip]
 8005dd2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005dd6:	2858      	cmp	r0, #88	; 0x58
 8005dd8:	d14e      	bne.n	8005e78 <_strtol_l.isra.0+0xf4>
 8005dda:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8005dde:	2310      	movs	r3, #16
 8005de0:	f10c 0c02 	add.w	ip, ip, #2
 8005de4:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8005de8:	3f01      	subs	r7, #1
 8005dea:	2500      	movs	r5, #0
 8005dec:	fbb7 f9f3 	udiv	r9, r7, r3
 8005df0:	4628      	mov	r0, r5
 8005df2:	fb03 7a19 	mls	sl, r3, r9, r7
 8005df6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8005dfa:	2e09      	cmp	r6, #9
 8005dfc:	d818      	bhi.n	8005e30 <_strtol_l.isra.0+0xac>
 8005dfe:	4634      	mov	r4, r6
 8005e00:	42a3      	cmp	r3, r4
 8005e02:	dd24      	ble.n	8005e4e <_strtol_l.isra.0+0xca>
 8005e04:	2d00      	cmp	r5, #0
 8005e06:	db1f      	blt.n	8005e48 <_strtol_l.isra.0+0xc4>
 8005e08:	4581      	cmp	r9, r0
 8005e0a:	d31d      	bcc.n	8005e48 <_strtol_l.isra.0+0xc4>
 8005e0c:	d101      	bne.n	8005e12 <_strtol_l.isra.0+0x8e>
 8005e0e:	45a2      	cmp	sl, r4
 8005e10:	db1a      	blt.n	8005e48 <_strtol_l.isra.0+0xc4>
 8005e12:	fb00 4003 	mla	r0, r0, r3, r4
 8005e16:	2501      	movs	r5, #1
 8005e18:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005e1c:	e7eb      	b.n	8005df6 <_strtol_l.isra.0+0x72>
 8005e1e:	2c2b      	cmp	r4, #43	; 0x2b
 8005e20:	bf08      	it	eq
 8005e22:	f89c 4000 	ldrbeq.w	r4, [ip]
 8005e26:	46a8      	mov	r8, r5
 8005e28:	bf08      	it	eq
 8005e2a:	f100 0c02 	addeq.w	ip, r0, #2
 8005e2e:	e7c8      	b.n	8005dc2 <_strtol_l.isra.0+0x3e>
 8005e30:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8005e34:	2e19      	cmp	r6, #25
 8005e36:	d801      	bhi.n	8005e3c <_strtol_l.isra.0+0xb8>
 8005e38:	3c37      	subs	r4, #55	; 0x37
 8005e3a:	e7e1      	b.n	8005e00 <_strtol_l.isra.0+0x7c>
 8005e3c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005e40:	2e19      	cmp	r6, #25
 8005e42:	d804      	bhi.n	8005e4e <_strtol_l.isra.0+0xca>
 8005e44:	3c57      	subs	r4, #87	; 0x57
 8005e46:	e7db      	b.n	8005e00 <_strtol_l.isra.0+0x7c>
 8005e48:	f04f 35ff 	mov.w	r5, #4294967295
 8005e4c:	e7e4      	b.n	8005e18 <_strtol_l.isra.0+0x94>
 8005e4e:	2d00      	cmp	r5, #0
 8005e50:	da08      	bge.n	8005e64 <_strtol_l.isra.0+0xe0>
 8005e52:	2322      	movs	r3, #34	; 0x22
 8005e54:	f8ce 3000 	str.w	r3, [lr]
 8005e58:	4638      	mov	r0, r7
 8005e5a:	2a00      	cmp	r2, #0
 8005e5c:	d09e      	beq.n	8005d9c <_strtol_l.isra.0+0x18>
 8005e5e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8005e62:	e007      	b.n	8005e74 <_strtol_l.isra.0+0xf0>
 8005e64:	f1b8 0f00 	cmp.w	r8, #0
 8005e68:	d000      	beq.n	8005e6c <_strtol_l.isra.0+0xe8>
 8005e6a:	4240      	negs	r0, r0
 8005e6c:	2a00      	cmp	r2, #0
 8005e6e:	d095      	beq.n	8005d9c <_strtol_l.isra.0+0x18>
 8005e70:	2d00      	cmp	r5, #0
 8005e72:	d1f4      	bne.n	8005e5e <_strtol_l.isra.0+0xda>
 8005e74:	6011      	str	r1, [r2, #0]
 8005e76:	e791      	b.n	8005d9c <_strtol_l.isra.0+0x18>
 8005e78:	2430      	movs	r4, #48	; 0x30
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1b2      	bne.n	8005de4 <_strtol_l.isra.0+0x60>
 8005e7e:	2308      	movs	r3, #8
 8005e80:	e7b0      	b.n	8005de4 <_strtol_l.isra.0+0x60>
 8005e82:	2c30      	cmp	r4, #48	; 0x30
 8005e84:	d0a3      	beq.n	8005dce <_strtol_l.isra.0+0x4a>
 8005e86:	230a      	movs	r3, #10
 8005e88:	e7ac      	b.n	8005de4 <_strtol_l.isra.0+0x60>
 8005e8a:	bf00      	nop
 8005e8c:	08009bc9 	.word	0x08009bc9

08005e90 <_strtol_r>:
 8005e90:	f7ff bf78 	b.w	8005d84 <_strtol_l.isra.0>

08005e94 <_write_r>:
 8005e94:	b538      	push	{r3, r4, r5, lr}
 8005e96:	4d07      	ldr	r5, [pc, #28]	; (8005eb4 <_write_r+0x20>)
 8005e98:	4604      	mov	r4, r0
 8005e9a:	4608      	mov	r0, r1
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	602a      	str	r2, [r5, #0]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f7fb ff00 	bl	8001ca8 <_write>
 8005ea8:	1c43      	adds	r3, r0, #1
 8005eaa:	d102      	bne.n	8005eb2 <_write_r+0x1e>
 8005eac:	682b      	ldr	r3, [r5, #0]
 8005eae:	b103      	cbz	r3, 8005eb2 <_write_r+0x1e>
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	bd38      	pop	{r3, r4, r5, pc}
 8005eb4:	200004a4 	.word	0x200004a4

08005eb8 <_close_r>:
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	4d06      	ldr	r5, [pc, #24]	; (8005ed4 <_close_r+0x1c>)
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	4604      	mov	r4, r0
 8005ec0:	4608      	mov	r0, r1
 8005ec2:	602b      	str	r3, [r5, #0]
 8005ec4:	f7fb ff0c 	bl	8001ce0 <_close>
 8005ec8:	1c43      	adds	r3, r0, #1
 8005eca:	d102      	bne.n	8005ed2 <_close_r+0x1a>
 8005ecc:	682b      	ldr	r3, [r5, #0]
 8005ece:	b103      	cbz	r3, 8005ed2 <_close_r+0x1a>
 8005ed0:	6023      	str	r3, [r4, #0]
 8005ed2:	bd38      	pop	{r3, r4, r5, pc}
 8005ed4:	200004a4 	.word	0x200004a4

08005ed8 <quorem>:
 8005ed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005edc:	6903      	ldr	r3, [r0, #16]
 8005ede:	690c      	ldr	r4, [r1, #16]
 8005ee0:	42a3      	cmp	r3, r4
 8005ee2:	4607      	mov	r7, r0
 8005ee4:	f2c0 8081 	blt.w	8005fea <quorem+0x112>
 8005ee8:	3c01      	subs	r4, #1
 8005eea:	f101 0814 	add.w	r8, r1, #20
 8005eee:	f100 0514 	add.w	r5, r0, #20
 8005ef2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ef6:	9301      	str	r3, [sp, #4]
 8005ef8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005efc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f00:	3301      	adds	r3, #1
 8005f02:	429a      	cmp	r2, r3
 8005f04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f10:	d331      	bcc.n	8005f76 <quorem+0x9e>
 8005f12:	f04f 0e00 	mov.w	lr, #0
 8005f16:	4640      	mov	r0, r8
 8005f18:	46ac      	mov	ip, r5
 8005f1a:	46f2      	mov	sl, lr
 8005f1c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f20:	b293      	uxth	r3, r2
 8005f22:	fb06 e303 	mla	r3, r6, r3, lr
 8005f26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	ebaa 0303 	sub.w	r3, sl, r3
 8005f30:	0c12      	lsrs	r2, r2, #16
 8005f32:	f8dc a000 	ldr.w	sl, [ip]
 8005f36:	fb06 e202 	mla	r2, r6, r2, lr
 8005f3a:	fa13 f38a 	uxtah	r3, r3, sl
 8005f3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f42:	fa1f fa82 	uxth.w	sl, r2
 8005f46:	f8dc 2000 	ldr.w	r2, [ip]
 8005f4a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005f4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f58:	4581      	cmp	r9, r0
 8005f5a:	f84c 3b04 	str.w	r3, [ip], #4
 8005f5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f62:	d2db      	bcs.n	8005f1c <quorem+0x44>
 8005f64:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f68:	b92b      	cbnz	r3, 8005f76 <quorem+0x9e>
 8005f6a:	9b01      	ldr	r3, [sp, #4]
 8005f6c:	3b04      	subs	r3, #4
 8005f6e:	429d      	cmp	r5, r3
 8005f70:	461a      	mov	r2, r3
 8005f72:	d32e      	bcc.n	8005fd2 <quorem+0xfa>
 8005f74:	613c      	str	r4, [r7, #16]
 8005f76:	4638      	mov	r0, r7
 8005f78:	f001 fc90 	bl	800789c <__mcmp>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	db24      	blt.n	8005fca <quorem+0xf2>
 8005f80:	3601      	adds	r6, #1
 8005f82:	4628      	mov	r0, r5
 8005f84:	f04f 0c00 	mov.w	ip, #0
 8005f88:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f8c:	f8d0 e000 	ldr.w	lr, [r0]
 8005f90:	b293      	uxth	r3, r2
 8005f92:	ebac 0303 	sub.w	r3, ip, r3
 8005f96:	0c12      	lsrs	r2, r2, #16
 8005f98:	fa13 f38e 	uxtah	r3, r3, lr
 8005f9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005fa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005faa:	45c1      	cmp	r9, r8
 8005fac:	f840 3b04 	str.w	r3, [r0], #4
 8005fb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005fb4:	d2e8      	bcs.n	8005f88 <quorem+0xb0>
 8005fb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fbe:	b922      	cbnz	r2, 8005fca <quorem+0xf2>
 8005fc0:	3b04      	subs	r3, #4
 8005fc2:	429d      	cmp	r5, r3
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	d30a      	bcc.n	8005fde <quorem+0x106>
 8005fc8:	613c      	str	r4, [r7, #16]
 8005fca:	4630      	mov	r0, r6
 8005fcc:	b003      	add	sp, #12
 8005fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	3b04      	subs	r3, #4
 8005fd6:	2a00      	cmp	r2, #0
 8005fd8:	d1cc      	bne.n	8005f74 <quorem+0x9c>
 8005fda:	3c01      	subs	r4, #1
 8005fdc:	e7c7      	b.n	8005f6e <quorem+0x96>
 8005fde:	6812      	ldr	r2, [r2, #0]
 8005fe0:	3b04      	subs	r3, #4
 8005fe2:	2a00      	cmp	r2, #0
 8005fe4:	d1f0      	bne.n	8005fc8 <quorem+0xf0>
 8005fe6:	3c01      	subs	r4, #1
 8005fe8:	e7eb      	b.n	8005fc2 <quorem+0xea>
 8005fea:	2000      	movs	r0, #0
 8005fec:	e7ee      	b.n	8005fcc <quorem+0xf4>
	...

08005ff0 <_dtoa_r>:
 8005ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005ff6:	b099      	sub	sp, #100	; 0x64
 8005ff8:	4616      	mov	r6, r2
 8005ffa:	461f      	mov	r7, r3
 8005ffc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006000:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006004:	4605      	mov	r5, r0
 8006006:	b974      	cbnz	r4, 8006026 <_dtoa_r+0x36>
 8006008:	2010      	movs	r0, #16
 800600a:	f001 f959 	bl	80072c0 <malloc>
 800600e:	4602      	mov	r2, r0
 8006010:	6268      	str	r0, [r5, #36]	; 0x24
 8006012:	b920      	cbnz	r0, 800601e <_dtoa_r+0x2e>
 8006014:	4ba8      	ldr	r3, [pc, #672]	; (80062b8 <_dtoa_r+0x2c8>)
 8006016:	21ea      	movs	r1, #234	; 0xea
 8006018:	48a8      	ldr	r0, [pc, #672]	; (80062bc <_dtoa_r+0x2cc>)
 800601a:	f002 fc97 	bl	800894c <__assert_func>
 800601e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006022:	6004      	str	r4, [r0, #0]
 8006024:	60c4      	str	r4, [r0, #12]
 8006026:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006028:	6819      	ldr	r1, [r3, #0]
 800602a:	b151      	cbz	r1, 8006042 <_dtoa_r+0x52>
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	604a      	str	r2, [r1, #4]
 8006030:	2301      	movs	r3, #1
 8006032:	4093      	lsls	r3, r2
 8006034:	608b      	str	r3, [r1, #8]
 8006036:	4628      	mov	r0, r5
 8006038:	f001 f9aa 	bl	8007390 <_Bfree>
 800603c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]
 8006042:	1e3b      	subs	r3, r7, #0
 8006044:	bfb9      	ittee	lt
 8006046:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800604a:	9305      	strlt	r3, [sp, #20]
 800604c:	2300      	movge	r3, #0
 800604e:	f8c8 3000 	strge.w	r3, [r8]
 8006052:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006056:	4b9a      	ldr	r3, [pc, #616]	; (80062c0 <_dtoa_r+0x2d0>)
 8006058:	bfbc      	itt	lt
 800605a:	2201      	movlt	r2, #1
 800605c:	f8c8 2000 	strlt.w	r2, [r8]
 8006060:	ea33 0309 	bics.w	r3, r3, r9
 8006064:	d119      	bne.n	800609a <_dtoa_r+0xaa>
 8006066:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006068:	f242 730f 	movw	r3, #9999	; 0x270f
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006072:	4333      	orrs	r3, r6
 8006074:	f000 8581 	beq.w	8006b7a <_dtoa_r+0xb8a>
 8006078:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800607a:	b953      	cbnz	r3, 8006092 <_dtoa_r+0xa2>
 800607c:	4b91      	ldr	r3, [pc, #580]	; (80062c4 <_dtoa_r+0x2d4>)
 800607e:	e022      	b.n	80060c6 <_dtoa_r+0xd6>
 8006080:	4b91      	ldr	r3, [pc, #580]	; (80062c8 <_dtoa_r+0x2d8>)
 8006082:	9308      	str	r3, [sp, #32]
 8006084:	3308      	adds	r3, #8
 8006086:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	9808      	ldr	r0, [sp, #32]
 800608c:	b019      	add	sp, #100	; 0x64
 800608e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006092:	4b8c      	ldr	r3, [pc, #560]	; (80062c4 <_dtoa_r+0x2d4>)
 8006094:	9308      	str	r3, [sp, #32]
 8006096:	3303      	adds	r3, #3
 8006098:	e7f5      	b.n	8006086 <_dtoa_r+0x96>
 800609a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800609e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80060a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060a6:	2200      	movs	r2, #0
 80060a8:	2300      	movs	r3, #0
 80060aa:	f7fa fd25 	bl	8000af8 <__aeabi_dcmpeq>
 80060ae:	4680      	mov	r8, r0
 80060b0:	b158      	cbz	r0, 80060ca <_dtoa_r+0xda>
 80060b2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80060b4:	2301      	movs	r3, #1
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 855a 	beq.w	8006b74 <_dtoa_r+0xb84>
 80060c0:	4882      	ldr	r0, [pc, #520]	; (80062cc <_dtoa_r+0x2dc>)
 80060c2:	6018      	str	r0, [r3, #0]
 80060c4:	1e43      	subs	r3, r0, #1
 80060c6:	9308      	str	r3, [sp, #32]
 80060c8:	e7df      	b.n	800608a <_dtoa_r+0x9a>
 80060ca:	ab16      	add	r3, sp, #88	; 0x58
 80060cc:	9301      	str	r3, [sp, #4]
 80060ce:	ab17      	add	r3, sp, #92	; 0x5c
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	4628      	mov	r0, r5
 80060d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80060d8:	f001 fd00 	bl	8007adc <__d2b>
 80060dc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80060e0:	4682      	mov	sl, r0
 80060e2:	2c00      	cmp	r4, #0
 80060e4:	d07e      	beq.n	80061e4 <_dtoa_r+0x1f4>
 80060e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060e8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80060ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060f4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80060f8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80060fc:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006100:	4b73      	ldr	r3, [pc, #460]	; (80062d0 <_dtoa_r+0x2e0>)
 8006102:	2200      	movs	r2, #0
 8006104:	f7fa f8d8 	bl	80002b8 <__aeabi_dsub>
 8006108:	a365      	add	r3, pc, #404	; (adr r3, 80062a0 <_dtoa_r+0x2b0>)
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	f7fa fa8b 	bl	8000628 <__aeabi_dmul>
 8006112:	a365      	add	r3, pc, #404	; (adr r3, 80062a8 <_dtoa_r+0x2b8>)
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	f7fa f8d0 	bl	80002bc <__adddf3>
 800611c:	4606      	mov	r6, r0
 800611e:	4620      	mov	r0, r4
 8006120:	460f      	mov	r7, r1
 8006122:	f7fa fa17 	bl	8000554 <__aeabi_i2d>
 8006126:	a362      	add	r3, pc, #392	; (adr r3, 80062b0 <_dtoa_r+0x2c0>)
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	f7fa fa7c 	bl	8000628 <__aeabi_dmul>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4630      	mov	r0, r6
 8006136:	4639      	mov	r1, r7
 8006138:	f7fa f8c0 	bl	80002bc <__adddf3>
 800613c:	4606      	mov	r6, r0
 800613e:	460f      	mov	r7, r1
 8006140:	f7fa fd22 	bl	8000b88 <__aeabi_d2iz>
 8006144:	2200      	movs	r2, #0
 8006146:	4681      	mov	r9, r0
 8006148:	2300      	movs	r3, #0
 800614a:	4630      	mov	r0, r6
 800614c:	4639      	mov	r1, r7
 800614e:	f7fa fcdd 	bl	8000b0c <__aeabi_dcmplt>
 8006152:	b148      	cbz	r0, 8006168 <_dtoa_r+0x178>
 8006154:	4648      	mov	r0, r9
 8006156:	f7fa f9fd 	bl	8000554 <__aeabi_i2d>
 800615a:	4632      	mov	r2, r6
 800615c:	463b      	mov	r3, r7
 800615e:	f7fa fccb 	bl	8000af8 <__aeabi_dcmpeq>
 8006162:	b908      	cbnz	r0, 8006168 <_dtoa_r+0x178>
 8006164:	f109 39ff 	add.w	r9, r9, #4294967295
 8006168:	f1b9 0f16 	cmp.w	r9, #22
 800616c:	d857      	bhi.n	800621e <_dtoa_r+0x22e>
 800616e:	4b59      	ldr	r3, [pc, #356]	; (80062d4 <_dtoa_r+0x2e4>)
 8006170:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006178:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800617c:	f7fa fcc6 	bl	8000b0c <__aeabi_dcmplt>
 8006180:	2800      	cmp	r0, #0
 8006182:	d04e      	beq.n	8006222 <_dtoa_r+0x232>
 8006184:	f109 39ff 	add.w	r9, r9, #4294967295
 8006188:	2300      	movs	r3, #0
 800618a:	930f      	str	r3, [sp, #60]	; 0x3c
 800618c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800618e:	1b1c      	subs	r4, r3, r4
 8006190:	1e63      	subs	r3, r4, #1
 8006192:	9309      	str	r3, [sp, #36]	; 0x24
 8006194:	bf45      	ittet	mi
 8006196:	f1c4 0301 	rsbmi	r3, r4, #1
 800619a:	9306      	strmi	r3, [sp, #24]
 800619c:	2300      	movpl	r3, #0
 800619e:	2300      	movmi	r3, #0
 80061a0:	bf4c      	ite	mi
 80061a2:	9309      	strmi	r3, [sp, #36]	; 0x24
 80061a4:	9306      	strpl	r3, [sp, #24]
 80061a6:	f1b9 0f00 	cmp.w	r9, #0
 80061aa:	db3c      	blt.n	8006226 <_dtoa_r+0x236>
 80061ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ae:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80061b2:	444b      	add	r3, r9
 80061b4:	9309      	str	r3, [sp, #36]	; 0x24
 80061b6:	2300      	movs	r3, #0
 80061b8:	930a      	str	r3, [sp, #40]	; 0x28
 80061ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061bc:	2b09      	cmp	r3, #9
 80061be:	f200 808d 	bhi.w	80062dc <_dtoa_r+0x2ec>
 80061c2:	2b05      	cmp	r3, #5
 80061c4:	bfc4      	itt	gt
 80061c6:	3b04      	subgt	r3, #4
 80061c8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80061ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061cc:	f1a3 0302 	sub.w	r3, r3, #2
 80061d0:	bfcc      	ite	gt
 80061d2:	2400      	movgt	r4, #0
 80061d4:	2401      	movle	r4, #1
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	f200 808c 	bhi.w	80062f4 <_dtoa_r+0x304>
 80061dc:	e8df f003 	tbb	[pc, r3]
 80061e0:	5b4d4f2d 	.word	0x5b4d4f2d
 80061e4:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80061e8:	441c      	add	r4, r3
 80061ea:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80061ee:	2b20      	cmp	r3, #32
 80061f0:	bfc3      	ittte	gt
 80061f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061f6:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80061fa:	fa09 f303 	lslgt.w	r3, r9, r3
 80061fe:	f1c3 0320 	rsble	r3, r3, #32
 8006202:	bfc6      	itte	gt
 8006204:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006208:	4318      	orrgt	r0, r3
 800620a:	fa06 f003 	lslle.w	r0, r6, r3
 800620e:	f7fa f991 	bl	8000534 <__aeabi_ui2d>
 8006212:	2301      	movs	r3, #1
 8006214:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006218:	3c01      	subs	r4, #1
 800621a:	9313      	str	r3, [sp, #76]	; 0x4c
 800621c:	e770      	b.n	8006100 <_dtoa_r+0x110>
 800621e:	2301      	movs	r3, #1
 8006220:	e7b3      	b.n	800618a <_dtoa_r+0x19a>
 8006222:	900f      	str	r0, [sp, #60]	; 0x3c
 8006224:	e7b2      	b.n	800618c <_dtoa_r+0x19c>
 8006226:	9b06      	ldr	r3, [sp, #24]
 8006228:	eba3 0309 	sub.w	r3, r3, r9
 800622c:	9306      	str	r3, [sp, #24]
 800622e:	f1c9 0300 	rsb	r3, r9, #0
 8006232:	930a      	str	r3, [sp, #40]	; 0x28
 8006234:	2300      	movs	r3, #0
 8006236:	930e      	str	r3, [sp, #56]	; 0x38
 8006238:	e7bf      	b.n	80061ba <_dtoa_r+0x1ca>
 800623a:	2300      	movs	r3, #0
 800623c:	930b      	str	r3, [sp, #44]	; 0x2c
 800623e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006240:	2b00      	cmp	r3, #0
 8006242:	dc5a      	bgt.n	80062fa <_dtoa_r+0x30a>
 8006244:	f04f 0b01 	mov.w	fp, #1
 8006248:	f8cd b008 	str.w	fp, [sp, #8]
 800624c:	465b      	mov	r3, fp
 800624e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006252:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006254:	2200      	movs	r2, #0
 8006256:	6042      	str	r2, [r0, #4]
 8006258:	2204      	movs	r2, #4
 800625a:	f102 0614 	add.w	r6, r2, #20
 800625e:	429e      	cmp	r6, r3
 8006260:	6841      	ldr	r1, [r0, #4]
 8006262:	d950      	bls.n	8006306 <_dtoa_r+0x316>
 8006264:	4628      	mov	r0, r5
 8006266:	f001 f853 	bl	8007310 <_Balloc>
 800626a:	9008      	str	r0, [sp, #32]
 800626c:	2800      	cmp	r0, #0
 800626e:	d14e      	bne.n	800630e <_dtoa_r+0x31e>
 8006270:	4b19      	ldr	r3, [pc, #100]	; (80062d8 <_dtoa_r+0x2e8>)
 8006272:	4602      	mov	r2, r0
 8006274:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006278:	e6ce      	b.n	8006018 <_dtoa_r+0x28>
 800627a:	2301      	movs	r3, #1
 800627c:	e7de      	b.n	800623c <_dtoa_r+0x24c>
 800627e:	2300      	movs	r3, #0
 8006280:	930b      	str	r3, [sp, #44]	; 0x2c
 8006282:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006284:	eb09 0b03 	add.w	fp, r9, r3
 8006288:	f10b 0301 	add.w	r3, fp, #1
 800628c:	2b01      	cmp	r3, #1
 800628e:	9302      	str	r3, [sp, #8]
 8006290:	bfb8      	it	lt
 8006292:	2301      	movlt	r3, #1
 8006294:	e7dd      	b.n	8006252 <_dtoa_r+0x262>
 8006296:	2301      	movs	r3, #1
 8006298:	e7f2      	b.n	8006280 <_dtoa_r+0x290>
 800629a:	bf00      	nop
 800629c:	f3af 8000 	nop.w
 80062a0:	636f4361 	.word	0x636f4361
 80062a4:	3fd287a7 	.word	0x3fd287a7
 80062a8:	8b60c8b3 	.word	0x8b60c8b3
 80062ac:	3fc68a28 	.word	0x3fc68a28
 80062b0:	509f79fb 	.word	0x509f79fb
 80062b4:	3fd34413 	.word	0x3fd34413
 80062b8:	08009cd6 	.word	0x08009cd6
 80062bc:	08009ced 	.word	0x08009ced
 80062c0:	7ff00000 	.word	0x7ff00000
 80062c4:	08009cd2 	.word	0x08009cd2
 80062c8:	08009cc9 	.word	0x08009cc9
 80062cc:	08009f52 	.word	0x08009f52
 80062d0:	3ff80000 	.word	0x3ff80000
 80062d4:	08009e68 	.word	0x08009e68
 80062d8:	08009d4c 	.word	0x08009d4c
 80062dc:	2401      	movs	r4, #1
 80062de:	2300      	movs	r3, #0
 80062e0:	9322      	str	r3, [sp, #136]	; 0x88
 80062e2:	940b      	str	r4, [sp, #44]	; 0x2c
 80062e4:	f04f 3bff 	mov.w	fp, #4294967295
 80062e8:	2200      	movs	r2, #0
 80062ea:	f8cd b008 	str.w	fp, [sp, #8]
 80062ee:	2312      	movs	r3, #18
 80062f0:	9223      	str	r2, [sp, #140]	; 0x8c
 80062f2:	e7ae      	b.n	8006252 <_dtoa_r+0x262>
 80062f4:	2301      	movs	r3, #1
 80062f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80062f8:	e7f4      	b.n	80062e4 <_dtoa_r+0x2f4>
 80062fa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80062fe:	f8cd b008 	str.w	fp, [sp, #8]
 8006302:	465b      	mov	r3, fp
 8006304:	e7a5      	b.n	8006252 <_dtoa_r+0x262>
 8006306:	3101      	adds	r1, #1
 8006308:	6041      	str	r1, [r0, #4]
 800630a:	0052      	lsls	r2, r2, #1
 800630c:	e7a5      	b.n	800625a <_dtoa_r+0x26a>
 800630e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006310:	9a08      	ldr	r2, [sp, #32]
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	9b02      	ldr	r3, [sp, #8]
 8006316:	2b0e      	cmp	r3, #14
 8006318:	f200 80a8 	bhi.w	800646c <_dtoa_r+0x47c>
 800631c:	2c00      	cmp	r4, #0
 800631e:	f000 80a5 	beq.w	800646c <_dtoa_r+0x47c>
 8006322:	f1b9 0f00 	cmp.w	r9, #0
 8006326:	dd34      	ble.n	8006392 <_dtoa_r+0x3a2>
 8006328:	4a9a      	ldr	r2, [pc, #616]	; (8006594 <_dtoa_r+0x5a4>)
 800632a:	f009 030f 	and.w	r3, r9, #15
 800632e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006332:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006336:	f419 7f80 	tst.w	r9, #256	; 0x100
 800633a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800633e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8006342:	d016      	beq.n	8006372 <_dtoa_r+0x382>
 8006344:	4b94      	ldr	r3, [pc, #592]	; (8006598 <_dtoa_r+0x5a8>)
 8006346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800634a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800634e:	f7fa fa95 	bl	800087c <__aeabi_ddiv>
 8006352:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006356:	f004 040f 	and.w	r4, r4, #15
 800635a:	2703      	movs	r7, #3
 800635c:	4e8e      	ldr	r6, [pc, #568]	; (8006598 <_dtoa_r+0x5a8>)
 800635e:	b954      	cbnz	r4, 8006376 <_dtoa_r+0x386>
 8006360:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006368:	f7fa fa88 	bl	800087c <__aeabi_ddiv>
 800636c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006370:	e029      	b.n	80063c6 <_dtoa_r+0x3d6>
 8006372:	2702      	movs	r7, #2
 8006374:	e7f2      	b.n	800635c <_dtoa_r+0x36c>
 8006376:	07e1      	lsls	r1, r4, #31
 8006378:	d508      	bpl.n	800638c <_dtoa_r+0x39c>
 800637a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800637e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006382:	f7fa f951 	bl	8000628 <__aeabi_dmul>
 8006386:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800638a:	3701      	adds	r7, #1
 800638c:	1064      	asrs	r4, r4, #1
 800638e:	3608      	adds	r6, #8
 8006390:	e7e5      	b.n	800635e <_dtoa_r+0x36e>
 8006392:	f000 80a5 	beq.w	80064e0 <_dtoa_r+0x4f0>
 8006396:	f1c9 0400 	rsb	r4, r9, #0
 800639a:	4b7e      	ldr	r3, [pc, #504]	; (8006594 <_dtoa_r+0x5a4>)
 800639c:	4e7e      	ldr	r6, [pc, #504]	; (8006598 <_dtoa_r+0x5a8>)
 800639e:	f004 020f 	and.w	r2, r4, #15
 80063a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063ae:	f7fa f93b 	bl	8000628 <__aeabi_dmul>
 80063b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063b6:	1124      	asrs	r4, r4, #4
 80063b8:	2300      	movs	r3, #0
 80063ba:	2702      	movs	r7, #2
 80063bc:	2c00      	cmp	r4, #0
 80063be:	f040 8084 	bne.w	80064ca <_dtoa_r+0x4da>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1d2      	bne.n	800636c <_dtoa_r+0x37c>
 80063c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 808b 	beq.w	80064e4 <_dtoa_r+0x4f4>
 80063ce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80063d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80063d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063da:	4b70      	ldr	r3, [pc, #448]	; (800659c <_dtoa_r+0x5ac>)
 80063dc:	2200      	movs	r2, #0
 80063de:	f7fa fb95 	bl	8000b0c <__aeabi_dcmplt>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d07e      	beq.n	80064e4 <_dtoa_r+0x4f4>
 80063e6:	9b02      	ldr	r3, [sp, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d07b      	beq.n	80064e4 <_dtoa_r+0x4f4>
 80063ec:	f1bb 0f00 	cmp.w	fp, #0
 80063f0:	dd38      	ble.n	8006464 <_dtoa_r+0x474>
 80063f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063f6:	4b6a      	ldr	r3, [pc, #424]	; (80065a0 <_dtoa_r+0x5b0>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	f7fa f915 	bl	8000628 <__aeabi_dmul>
 80063fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006402:	f109 38ff 	add.w	r8, r9, #4294967295
 8006406:	3701      	adds	r7, #1
 8006408:	465c      	mov	r4, fp
 800640a:	4638      	mov	r0, r7
 800640c:	f7fa f8a2 	bl	8000554 <__aeabi_i2d>
 8006410:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006414:	f7fa f908 	bl	8000628 <__aeabi_dmul>
 8006418:	4b62      	ldr	r3, [pc, #392]	; (80065a4 <_dtoa_r+0x5b4>)
 800641a:	2200      	movs	r2, #0
 800641c:	f7f9 ff4e 	bl	80002bc <__adddf3>
 8006420:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006424:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006428:	9611      	str	r6, [sp, #68]	; 0x44
 800642a:	2c00      	cmp	r4, #0
 800642c:	d15d      	bne.n	80064ea <_dtoa_r+0x4fa>
 800642e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006432:	4b5d      	ldr	r3, [pc, #372]	; (80065a8 <_dtoa_r+0x5b8>)
 8006434:	2200      	movs	r2, #0
 8006436:	f7f9 ff3f 	bl	80002b8 <__aeabi_dsub>
 800643a:	4602      	mov	r2, r0
 800643c:	460b      	mov	r3, r1
 800643e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006442:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006444:	4633      	mov	r3, r6
 8006446:	f7fa fb7f 	bl	8000b48 <__aeabi_dcmpgt>
 800644a:	2800      	cmp	r0, #0
 800644c:	f040 829e 	bne.w	800698c <_dtoa_r+0x99c>
 8006450:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006454:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006456:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800645a:	f7fa fb57 	bl	8000b0c <__aeabi_dcmplt>
 800645e:	2800      	cmp	r0, #0
 8006460:	f040 8292 	bne.w	8006988 <_dtoa_r+0x998>
 8006464:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006468:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800646c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800646e:	2b00      	cmp	r3, #0
 8006470:	f2c0 8153 	blt.w	800671a <_dtoa_r+0x72a>
 8006474:	f1b9 0f0e 	cmp.w	r9, #14
 8006478:	f300 814f 	bgt.w	800671a <_dtoa_r+0x72a>
 800647c:	4b45      	ldr	r3, [pc, #276]	; (8006594 <_dtoa_r+0x5a4>)
 800647e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006482:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006486:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800648a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800648c:	2b00      	cmp	r3, #0
 800648e:	f280 80db 	bge.w	8006648 <_dtoa_r+0x658>
 8006492:	9b02      	ldr	r3, [sp, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	f300 80d7 	bgt.w	8006648 <_dtoa_r+0x658>
 800649a:	f040 8274 	bne.w	8006986 <_dtoa_r+0x996>
 800649e:	4b42      	ldr	r3, [pc, #264]	; (80065a8 <_dtoa_r+0x5b8>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064a6:	f7fa f8bf 	bl	8000628 <__aeabi_dmul>
 80064aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064ae:	f7fa fb41 	bl	8000b34 <__aeabi_dcmpge>
 80064b2:	9c02      	ldr	r4, [sp, #8]
 80064b4:	4626      	mov	r6, r4
 80064b6:	2800      	cmp	r0, #0
 80064b8:	f040 824a 	bne.w	8006950 <_dtoa_r+0x960>
 80064bc:	9f08      	ldr	r7, [sp, #32]
 80064be:	2331      	movs	r3, #49	; 0x31
 80064c0:	f807 3b01 	strb.w	r3, [r7], #1
 80064c4:	f109 0901 	add.w	r9, r9, #1
 80064c8:	e246      	b.n	8006958 <_dtoa_r+0x968>
 80064ca:	07e2      	lsls	r2, r4, #31
 80064cc:	d505      	bpl.n	80064da <_dtoa_r+0x4ea>
 80064ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064d2:	f7fa f8a9 	bl	8000628 <__aeabi_dmul>
 80064d6:	3701      	adds	r7, #1
 80064d8:	2301      	movs	r3, #1
 80064da:	1064      	asrs	r4, r4, #1
 80064dc:	3608      	adds	r6, #8
 80064de:	e76d      	b.n	80063bc <_dtoa_r+0x3cc>
 80064e0:	2702      	movs	r7, #2
 80064e2:	e770      	b.n	80063c6 <_dtoa_r+0x3d6>
 80064e4:	9c02      	ldr	r4, [sp, #8]
 80064e6:	46c8      	mov	r8, r9
 80064e8:	e78f      	b.n	800640a <_dtoa_r+0x41a>
 80064ea:	9908      	ldr	r1, [sp, #32]
 80064ec:	4b29      	ldr	r3, [pc, #164]	; (8006594 <_dtoa_r+0x5a4>)
 80064ee:	4421      	add	r1, r4
 80064f0:	9112      	str	r1, [sp, #72]	; 0x48
 80064f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80064f8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80064fc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006500:	2900      	cmp	r1, #0
 8006502:	d055      	beq.n	80065b0 <_dtoa_r+0x5c0>
 8006504:	4929      	ldr	r1, [pc, #164]	; (80065ac <_dtoa_r+0x5bc>)
 8006506:	2000      	movs	r0, #0
 8006508:	f7fa f9b8 	bl	800087c <__aeabi_ddiv>
 800650c:	463b      	mov	r3, r7
 800650e:	4632      	mov	r2, r6
 8006510:	f7f9 fed2 	bl	80002b8 <__aeabi_dsub>
 8006514:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006518:	9f08      	ldr	r7, [sp, #32]
 800651a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800651e:	f7fa fb33 	bl	8000b88 <__aeabi_d2iz>
 8006522:	4604      	mov	r4, r0
 8006524:	f7fa f816 	bl	8000554 <__aeabi_i2d>
 8006528:	4602      	mov	r2, r0
 800652a:	460b      	mov	r3, r1
 800652c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006530:	f7f9 fec2 	bl	80002b8 <__aeabi_dsub>
 8006534:	3430      	adds	r4, #48	; 0x30
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800653e:	f807 4b01 	strb.w	r4, [r7], #1
 8006542:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006546:	f7fa fae1 	bl	8000b0c <__aeabi_dcmplt>
 800654a:	2800      	cmp	r0, #0
 800654c:	d174      	bne.n	8006638 <_dtoa_r+0x648>
 800654e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006552:	4912      	ldr	r1, [pc, #72]	; (800659c <_dtoa_r+0x5ac>)
 8006554:	2000      	movs	r0, #0
 8006556:	f7f9 feaf 	bl	80002b8 <__aeabi_dsub>
 800655a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800655e:	f7fa fad5 	bl	8000b0c <__aeabi_dcmplt>
 8006562:	2800      	cmp	r0, #0
 8006564:	f040 80b6 	bne.w	80066d4 <_dtoa_r+0x6e4>
 8006568:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800656a:	429f      	cmp	r7, r3
 800656c:	f43f af7a 	beq.w	8006464 <_dtoa_r+0x474>
 8006570:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006574:	4b0a      	ldr	r3, [pc, #40]	; (80065a0 <_dtoa_r+0x5b0>)
 8006576:	2200      	movs	r2, #0
 8006578:	f7fa f856 	bl	8000628 <__aeabi_dmul>
 800657c:	4b08      	ldr	r3, [pc, #32]	; (80065a0 <_dtoa_r+0x5b0>)
 800657e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006582:	2200      	movs	r2, #0
 8006584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006588:	f7fa f84e 	bl	8000628 <__aeabi_dmul>
 800658c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006590:	e7c3      	b.n	800651a <_dtoa_r+0x52a>
 8006592:	bf00      	nop
 8006594:	08009e68 	.word	0x08009e68
 8006598:	08009e40 	.word	0x08009e40
 800659c:	3ff00000 	.word	0x3ff00000
 80065a0:	40240000 	.word	0x40240000
 80065a4:	401c0000 	.word	0x401c0000
 80065a8:	40140000 	.word	0x40140000
 80065ac:	3fe00000 	.word	0x3fe00000
 80065b0:	4630      	mov	r0, r6
 80065b2:	4639      	mov	r1, r7
 80065b4:	f7fa f838 	bl	8000628 <__aeabi_dmul>
 80065b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065be:	9c08      	ldr	r4, [sp, #32]
 80065c0:	9314      	str	r3, [sp, #80]	; 0x50
 80065c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065c6:	f7fa fadf 	bl	8000b88 <__aeabi_d2iz>
 80065ca:	9015      	str	r0, [sp, #84]	; 0x54
 80065cc:	f7f9 ffc2 	bl	8000554 <__aeabi_i2d>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065d8:	f7f9 fe6e 	bl	80002b8 <__aeabi_dsub>
 80065dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80065de:	3330      	adds	r3, #48	; 0x30
 80065e0:	f804 3b01 	strb.w	r3, [r4], #1
 80065e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065e6:	429c      	cmp	r4, r3
 80065e8:	4606      	mov	r6, r0
 80065ea:	460f      	mov	r7, r1
 80065ec:	f04f 0200 	mov.w	r2, #0
 80065f0:	d124      	bne.n	800663c <_dtoa_r+0x64c>
 80065f2:	4bb2      	ldr	r3, [pc, #712]	; (80068bc <_dtoa_r+0x8cc>)
 80065f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065f8:	f7f9 fe60 	bl	80002bc <__adddf3>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4630      	mov	r0, r6
 8006602:	4639      	mov	r1, r7
 8006604:	f7fa faa0 	bl	8000b48 <__aeabi_dcmpgt>
 8006608:	2800      	cmp	r0, #0
 800660a:	d162      	bne.n	80066d2 <_dtoa_r+0x6e2>
 800660c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006610:	49aa      	ldr	r1, [pc, #680]	; (80068bc <_dtoa_r+0x8cc>)
 8006612:	2000      	movs	r0, #0
 8006614:	f7f9 fe50 	bl	80002b8 <__aeabi_dsub>
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	4630      	mov	r0, r6
 800661e:	4639      	mov	r1, r7
 8006620:	f7fa fa74 	bl	8000b0c <__aeabi_dcmplt>
 8006624:	2800      	cmp	r0, #0
 8006626:	f43f af1d 	beq.w	8006464 <_dtoa_r+0x474>
 800662a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800662c:	1e7b      	subs	r3, r7, #1
 800662e:	9314      	str	r3, [sp, #80]	; 0x50
 8006630:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006634:	2b30      	cmp	r3, #48	; 0x30
 8006636:	d0f8      	beq.n	800662a <_dtoa_r+0x63a>
 8006638:	46c1      	mov	r9, r8
 800663a:	e03a      	b.n	80066b2 <_dtoa_r+0x6c2>
 800663c:	4ba0      	ldr	r3, [pc, #640]	; (80068c0 <_dtoa_r+0x8d0>)
 800663e:	f7f9 fff3 	bl	8000628 <__aeabi_dmul>
 8006642:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006646:	e7bc      	b.n	80065c2 <_dtoa_r+0x5d2>
 8006648:	9f08      	ldr	r7, [sp, #32]
 800664a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800664e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006652:	f7fa f913 	bl	800087c <__aeabi_ddiv>
 8006656:	f7fa fa97 	bl	8000b88 <__aeabi_d2iz>
 800665a:	4604      	mov	r4, r0
 800665c:	f7f9 ff7a 	bl	8000554 <__aeabi_i2d>
 8006660:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006664:	f7f9 ffe0 	bl	8000628 <__aeabi_dmul>
 8006668:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800666c:	460b      	mov	r3, r1
 800666e:	4602      	mov	r2, r0
 8006670:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006674:	f7f9 fe20 	bl	80002b8 <__aeabi_dsub>
 8006678:	f807 6b01 	strb.w	r6, [r7], #1
 800667c:	9e08      	ldr	r6, [sp, #32]
 800667e:	9b02      	ldr	r3, [sp, #8]
 8006680:	1bbe      	subs	r6, r7, r6
 8006682:	42b3      	cmp	r3, r6
 8006684:	d13a      	bne.n	80066fc <_dtoa_r+0x70c>
 8006686:	4602      	mov	r2, r0
 8006688:	460b      	mov	r3, r1
 800668a:	f7f9 fe17 	bl	80002bc <__adddf3>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006696:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800669a:	f7fa fa55 	bl	8000b48 <__aeabi_dcmpgt>
 800669e:	bb58      	cbnz	r0, 80066f8 <_dtoa_r+0x708>
 80066a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066a8:	f7fa fa26 	bl	8000af8 <__aeabi_dcmpeq>
 80066ac:	b108      	cbz	r0, 80066b2 <_dtoa_r+0x6c2>
 80066ae:	07e1      	lsls	r1, r4, #31
 80066b0:	d422      	bmi.n	80066f8 <_dtoa_r+0x708>
 80066b2:	4628      	mov	r0, r5
 80066b4:	4651      	mov	r1, sl
 80066b6:	f000 fe6b 	bl	8007390 <_Bfree>
 80066ba:	2300      	movs	r3, #0
 80066bc:	703b      	strb	r3, [r7, #0]
 80066be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80066c0:	f109 0001 	add.w	r0, r9, #1
 80066c4:	6018      	str	r0, [r3, #0]
 80066c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f43f acde 	beq.w	800608a <_dtoa_r+0x9a>
 80066ce:	601f      	str	r7, [r3, #0]
 80066d0:	e4db      	b.n	800608a <_dtoa_r+0x9a>
 80066d2:	4627      	mov	r7, r4
 80066d4:	463b      	mov	r3, r7
 80066d6:	461f      	mov	r7, r3
 80066d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066dc:	2a39      	cmp	r2, #57	; 0x39
 80066de:	d107      	bne.n	80066f0 <_dtoa_r+0x700>
 80066e0:	9a08      	ldr	r2, [sp, #32]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d1f7      	bne.n	80066d6 <_dtoa_r+0x6e6>
 80066e6:	9908      	ldr	r1, [sp, #32]
 80066e8:	2230      	movs	r2, #48	; 0x30
 80066ea:	f108 0801 	add.w	r8, r8, #1
 80066ee:	700a      	strb	r2, [r1, #0]
 80066f0:	781a      	ldrb	r2, [r3, #0]
 80066f2:	3201      	adds	r2, #1
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	e79f      	b.n	8006638 <_dtoa_r+0x648>
 80066f8:	46c8      	mov	r8, r9
 80066fa:	e7eb      	b.n	80066d4 <_dtoa_r+0x6e4>
 80066fc:	4b70      	ldr	r3, [pc, #448]	; (80068c0 <_dtoa_r+0x8d0>)
 80066fe:	2200      	movs	r2, #0
 8006700:	f7f9 ff92 	bl	8000628 <__aeabi_dmul>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800670c:	2200      	movs	r2, #0
 800670e:	2300      	movs	r3, #0
 8006710:	f7fa f9f2 	bl	8000af8 <__aeabi_dcmpeq>
 8006714:	2800      	cmp	r0, #0
 8006716:	d098      	beq.n	800664a <_dtoa_r+0x65a>
 8006718:	e7cb      	b.n	80066b2 <_dtoa_r+0x6c2>
 800671a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800671c:	2a00      	cmp	r2, #0
 800671e:	f000 80d1 	beq.w	80068c4 <_dtoa_r+0x8d4>
 8006722:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006724:	2a01      	cmp	r2, #1
 8006726:	f300 80af 	bgt.w	8006888 <_dtoa_r+0x898>
 800672a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800672c:	2a00      	cmp	r2, #0
 800672e:	f000 80a7 	beq.w	8006880 <_dtoa_r+0x890>
 8006732:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006736:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006738:	9f06      	ldr	r7, [sp, #24]
 800673a:	9a06      	ldr	r2, [sp, #24]
 800673c:	441a      	add	r2, r3
 800673e:	9206      	str	r2, [sp, #24]
 8006740:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006742:	2101      	movs	r1, #1
 8006744:	441a      	add	r2, r3
 8006746:	4628      	mov	r0, r5
 8006748:	9209      	str	r2, [sp, #36]	; 0x24
 800674a:	f000 ff25 	bl	8007598 <__i2b>
 800674e:	4606      	mov	r6, r0
 8006750:	2f00      	cmp	r7, #0
 8006752:	dd0c      	ble.n	800676e <_dtoa_r+0x77e>
 8006754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006756:	2b00      	cmp	r3, #0
 8006758:	dd09      	ble.n	800676e <_dtoa_r+0x77e>
 800675a:	42bb      	cmp	r3, r7
 800675c:	9a06      	ldr	r2, [sp, #24]
 800675e:	bfa8      	it	ge
 8006760:	463b      	movge	r3, r7
 8006762:	1ad2      	subs	r2, r2, r3
 8006764:	9206      	str	r2, [sp, #24]
 8006766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006768:	1aff      	subs	r7, r7, r3
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	9309      	str	r3, [sp, #36]	; 0x24
 800676e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006770:	b1f3      	cbz	r3, 80067b0 <_dtoa_r+0x7c0>
 8006772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80a9 	beq.w	80068cc <_dtoa_r+0x8dc>
 800677a:	2c00      	cmp	r4, #0
 800677c:	dd10      	ble.n	80067a0 <_dtoa_r+0x7b0>
 800677e:	4631      	mov	r1, r6
 8006780:	4622      	mov	r2, r4
 8006782:	4628      	mov	r0, r5
 8006784:	f000 ffc4 	bl	8007710 <__pow5mult>
 8006788:	4652      	mov	r2, sl
 800678a:	4601      	mov	r1, r0
 800678c:	4606      	mov	r6, r0
 800678e:	4628      	mov	r0, r5
 8006790:	f000 ff18 	bl	80075c4 <__multiply>
 8006794:	4651      	mov	r1, sl
 8006796:	4680      	mov	r8, r0
 8006798:	4628      	mov	r0, r5
 800679a:	f000 fdf9 	bl	8007390 <_Bfree>
 800679e:	46c2      	mov	sl, r8
 80067a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067a2:	1b1a      	subs	r2, r3, r4
 80067a4:	d004      	beq.n	80067b0 <_dtoa_r+0x7c0>
 80067a6:	4651      	mov	r1, sl
 80067a8:	4628      	mov	r0, r5
 80067aa:	f000 ffb1 	bl	8007710 <__pow5mult>
 80067ae:	4682      	mov	sl, r0
 80067b0:	2101      	movs	r1, #1
 80067b2:	4628      	mov	r0, r5
 80067b4:	f000 fef0 	bl	8007598 <__i2b>
 80067b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	4604      	mov	r4, r0
 80067be:	f340 8087 	ble.w	80068d0 <_dtoa_r+0x8e0>
 80067c2:	461a      	mov	r2, r3
 80067c4:	4601      	mov	r1, r0
 80067c6:	4628      	mov	r0, r5
 80067c8:	f000 ffa2 	bl	8007710 <__pow5mult>
 80067cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	4604      	mov	r4, r0
 80067d2:	f340 8080 	ble.w	80068d6 <_dtoa_r+0x8e6>
 80067d6:	f04f 0800 	mov.w	r8, #0
 80067da:	6923      	ldr	r3, [r4, #16]
 80067dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80067e0:	6918      	ldr	r0, [r3, #16]
 80067e2:	f000 fe8b 	bl	80074fc <__hi0bits>
 80067e6:	f1c0 0020 	rsb	r0, r0, #32
 80067ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ec:	4418      	add	r0, r3
 80067ee:	f010 001f 	ands.w	r0, r0, #31
 80067f2:	f000 8092 	beq.w	800691a <_dtoa_r+0x92a>
 80067f6:	f1c0 0320 	rsb	r3, r0, #32
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	f340 808a 	ble.w	8006914 <_dtoa_r+0x924>
 8006800:	f1c0 001c 	rsb	r0, r0, #28
 8006804:	9b06      	ldr	r3, [sp, #24]
 8006806:	4403      	add	r3, r0
 8006808:	9306      	str	r3, [sp, #24]
 800680a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800680c:	4403      	add	r3, r0
 800680e:	4407      	add	r7, r0
 8006810:	9309      	str	r3, [sp, #36]	; 0x24
 8006812:	9b06      	ldr	r3, [sp, #24]
 8006814:	2b00      	cmp	r3, #0
 8006816:	dd05      	ble.n	8006824 <_dtoa_r+0x834>
 8006818:	4651      	mov	r1, sl
 800681a:	461a      	mov	r2, r3
 800681c:	4628      	mov	r0, r5
 800681e:	f000 ffd1 	bl	80077c4 <__lshift>
 8006822:	4682      	mov	sl, r0
 8006824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006826:	2b00      	cmp	r3, #0
 8006828:	dd05      	ble.n	8006836 <_dtoa_r+0x846>
 800682a:	4621      	mov	r1, r4
 800682c:	461a      	mov	r2, r3
 800682e:	4628      	mov	r0, r5
 8006830:	f000 ffc8 	bl	80077c4 <__lshift>
 8006834:	4604      	mov	r4, r0
 8006836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006838:	2b00      	cmp	r3, #0
 800683a:	d070      	beq.n	800691e <_dtoa_r+0x92e>
 800683c:	4621      	mov	r1, r4
 800683e:	4650      	mov	r0, sl
 8006840:	f001 f82c 	bl	800789c <__mcmp>
 8006844:	2800      	cmp	r0, #0
 8006846:	da6a      	bge.n	800691e <_dtoa_r+0x92e>
 8006848:	2300      	movs	r3, #0
 800684a:	4651      	mov	r1, sl
 800684c:	220a      	movs	r2, #10
 800684e:	4628      	mov	r0, r5
 8006850:	f000 fdc0 	bl	80073d4 <__multadd>
 8006854:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006856:	f109 39ff 	add.w	r9, r9, #4294967295
 800685a:	4682      	mov	sl, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 8193 	beq.w	8006b88 <_dtoa_r+0xb98>
 8006862:	4631      	mov	r1, r6
 8006864:	2300      	movs	r3, #0
 8006866:	220a      	movs	r2, #10
 8006868:	4628      	mov	r0, r5
 800686a:	f000 fdb3 	bl	80073d4 <__multadd>
 800686e:	f1bb 0f00 	cmp.w	fp, #0
 8006872:	4606      	mov	r6, r0
 8006874:	f300 8093 	bgt.w	800699e <_dtoa_r+0x9ae>
 8006878:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800687a:	2b02      	cmp	r3, #2
 800687c:	dc57      	bgt.n	800692e <_dtoa_r+0x93e>
 800687e:	e08e      	b.n	800699e <_dtoa_r+0x9ae>
 8006880:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006882:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006886:	e756      	b.n	8006736 <_dtoa_r+0x746>
 8006888:	9b02      	ldr	r3, [sp, #8]
 800688a:	1e5c      	subs	r4, r3, #1
 800688c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800688e:	42a3      	cmp	r3, r4
 8006890:	bfbf      	itttt	lt
 8006892:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006894:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006896:	1ae2      	sublt	r2, r4, r3
 8006898:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800689a:	bfb6      	itet	lt
 800689c:	189b      	addlt	r3, r3, r2
 800689e:	1b1c      	subge	r4, r3, r4
 80068a0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80068a2:	9b02      	ldr	r3, [sp, #8]
 80068a4:	bfb8      	it	lt
 80068a6:	2400      	movlt	r4, #0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	bfb9      	ittee	lt
 80068ac:	9b06      	ldrlt	r3, [sp, #24]
 80068ae:	9a02      	ldrlt	r2, [sp, #8]
 80068b0:	9f06      	ldrge	r7, [sp, #24]
 80068b2:	9b02      	ldrge	r3, [sp, #8]
 80068b4:	bfbc      	itt	lt
 80068b6:	1a9f      	sublt	r7, r3, r2
 80068b8:	2300      	movlt	r3, #0
 80068ba:	e73e      	b.n	800673a <_dtoa_r+0x74a>
 80068bc:	3fe00000 	.word	0x3fe00000
 80068c0:	40240000 	.word	0x40240000
 80068c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80068c6:	9f06      	ldr	r7, [sp, #24]
 80068c8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80068ca:	e741      	b.n	8006750 <_dtoa_r+0x760>
 80068cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068ce:	e76a      	b.n	80067a6 <_dtoa_r+0x7b6>
 80068d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	dc19      	bgt.n	800690a <_dtoa_r+0x91a>
 80068d6:	9b04      	ldr	r3, [sp, #16]
 80068d8:	b9bb      	cbnz	r3, 800690a <_dtoa_r+0x91a>
 80068da:	9b05      	ldr	r3, [sp, #20]
 80068dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068e0:	b99b      	cbnz	r3, 800690a <_dtoa_r+0x91a>
 80068e2:	9b05      	ldr	r3, [sp, #20]
 80068e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068e8:	0d1b      	lsrs	r3, r3, #20
 80068ea:	051b      	lsls	r3, r3, #20
 80068ec:	b183      	cbz	r3, 8006910 <_dtoa_r+0x920>
 80068ee:	9b06      	ldr	r3, [sp, #24]
 80068f0:	3301      	adds	r3, #1
 80068f2:	9306      	str	r3, [sp, #24]
 80068f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f6:	3301      	adds	r3, #1
 80068f8:	9309      	str	r3, [sp, #36]	; 0x24
 80068fa:	f04f 0801 	mov.w	r8, #1
 80068fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006900:	2b00      	cmp	r3, #0
 8006902:	f47f af6a 	bne.w	80067da <_dtoa_r+0x7ea>
 8006906:	2001      	movs	r0, #1
 8006908:	e76f      	b.n	80067ea <_dtoa_r+0x7fa>
 800690a:	f04f 0800 	mov.w	r8, #0
 800690e:	e7f6      	b.n	80068fe <_dtoa_r+0x90e>
 8006910:	4698      	mov	r8, r3
 8006912:	e7f4      	b.n	80068fe <_dtoa_r+0x90e>
 8006914:	f43f af7d 	beq.w	8006812 <_dtoa_r+0x822>
 8006918:	4618      	mov	r0, r3
 800691a:	301c      	adds	r0, #28
 800691c:	e772      	b.n	8006804 <_dtoa_r+0x814>
 800691e:	9b02      	ldr	r3, [sp, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	dc36      	bgt.n	8006992 <_dtoa_r+0x9a2>
 8006924:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006926:	2b02      	cmp	r3, #2
 8006928:	dd33      	ble.n	8006992 <_dtoa_r+0x9a2>
 800692a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800692e:	f1bb 0f00 	cmp.w	fp, #0
 8006932:	d10d      	bne.n	8006950 <_dtoa_r+0x960>
 8006934:	4621      	mov	r1, r4
 8006936:	465b      	mov	r3, fp
 8006938:	2205      	movs	r2, #5
 800693a:	4628      	mov	r0, r5
 800693c:	f000 fd4a 	bl	80073d4 <__multadd>
 8006940:	4601      	mov	r1, r0
 8006942:	4604      	mov	r4, r0
 8006944:	4650      	mov	r0, sl
 8006946:	f000 ffa9 	bl	800789c <__mcmp>
 800694a:	2800      	cmp	r0, #0
 800694c:	f73f adb6 	bgt.w	80064bc <_dtoa_r+0x4cc>
 8006950:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006952:	9f08      	ldr	r7, [sp, #32]
 8006954:	ea6f 0903 	mvn.w	r9, r3
 8006958:	f04f 0800 	mov.w	r8, #0
 800695c:	4621      	mov	r1, r4
 800695e:	4628      	mov	r0, r5
 8006960:	f000 fd16 	bl	8007390 <_Bfree>
 8006964:	2e00      	cmp	r6, #0
 8006966:	f43f aea4 	beq.w	80066b2 <_dtoa_r+0x6c2>
 800696a:	f1b8 0f00 	cmp.w	r8, #0
 800696e:	d005      	beq.n	800697c <_dtoa_r+0x98c>
 8006970:	45b0      	cmp	r8, r6
 8006972:	d003      	beq.n	800697c <_dtoa_r+0x98c>
 8006974:	4641      	mov	r1, r8
 8006976:	4628      	mov	r0, r5
 8006978:	f000 fd0a 	bl	8007390 <_Bfree>
 800697c:	4631      	mov	r1, r6
 800697e:	4628      	mov	r0, r5
 8006980:	f000 fd06 	bl	8007390 <_Bfree>
 8006984:	e695      	b.n	80066b2 <_dtoa_r+0x6c2>
 8006986:	2400      	movs	r4, #0
 8006988:	4626      	mov	r6, r4
 800698a:	e7e1      	b.n	8006950 <_dtoa_r+0x960>
 800698c:	46c1      	mov	r9, r8
 800698e:	4626      	mov	r6, r4
 8006990:	e594      	b.n	80064bc <_dtoa_r+0x4cc>
 8006992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006994:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 80fc 	beq.w	8006b96 <_dtoa_r+0xba6>
 800699e:	2f00      	cmp	r7, #0
 80069a0:	dd05      	ble.n	80069ae <_dtoa_r+0x9be>
 80069a2:	4631      	mov	r1, r6
 80069a4:	463a      	mov	r2, r7
 80069a6:	4628      	mov	r0, r5
 80069a8:	f000 ff0c 	bl	80077c4 <__lshift>
 80069ac:	4606      	mov	r6, r0
 80069ae:	f1b8 0f00 	cmp.w	r8, #0
 80069b2:	d05c      	beq.n	8006a6e <_dtoa_r+0xa7e>
 80069b4:	6871      	ldr	r1, [r6, #4]
 80069b6:	4628      	mov	r0, r5
 80069b8:	f000 fcaa 	bl	8007310 <_Balloc>
 80069bc:	4607      	mov	r7, r0
 80069be:	b928      	cbnz	r0, 80069cc <_dtoa_r+0x9dc>
 80069c0:	4b7f      	ldr	r3, [pc, #508]	; (8006bc0 <_dtoa_r+0xbd0>)
 80069c2:	4602      	mov	r2, r0
 80069c4:	f240 21ea 	movw	r1, #746	; 0x2ea
 80069c8:	f7ff bb26 	b.w	8006018 <_dtoa_r+0x28>
 80069cc:	6932      	ldr	r2, [r6, #16]
 80069ce:	3202      	adds	r2, #2
 80069d0:	0092      	lsls	r2, r2, #2
 80069d2:	f106 010c 	add.w	r1, r6, #12
 80069d6:	300c      	adds	r0, #12
 80069d8:	f000 fc8c 	bl	80072f4 <memcpy>
 80069dc:	2201      	movs	r2, #1
 80069de:	4639      	mov	r1, r7
 80069e0:	4628      	mov	r0, r5
 80069e2:	f000 feef 	bl	80077c4 <__lshift>
 80069e6:	9b08      	ldr	r3, [sp, #32]
 80069e8:	3301      	adds	r3, #1
 80069ea:	9302      	str	r3, [sp, #8]
 80069ec:	9b08      	ldr	r3, [sp, #32]
 80069ee:	445b      	add	r3, fp
 80069f0:	930a      	str	r3, [sp, #40]	; 0x28
 80069f2:	9b04      	ldr	r3, [sp, #16]
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	46b0      	mov	r8, r6
 80069fa:	9309      	str	r3, [sp, #36]	; 0x24
 80069fc:	4606      	mov	r6, r0
 80069fe:	9b02      	ldr	r3, [sp, #8]
 8006a00:	4621      	mov	r1, r4
 8006a02:	4650      	mov	r0, sl
 8006a04:	f103 3bff 	add.w	fp, r3, #4294967295
 8006a08:	f7ff fa66 	bl	8005ed8 <quorem>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	3330      	adds	r3, #48	; 0x30
 8006a10:	9004      	str	r0, [sp, #16]
 8006a12:	4641      	mov	r1, r8
 8006a14:	4650      	mov	r0, sl
 8006a16:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a18:	f000 ff40 	bl	800789c <__mcmp>
 8006a1c:	4632      	mov	r2, r6
 8006a1e:	9006      	str	r0, [sp, #24]
 8006a20:	4621      	mov	r1, r4
 8006a22:	4628      	mov	r0, r5
 8006a24:	f000 ff56 	bl	80078d4 <__mdiff>
 8006a28:	68c2      	ldr	r2, [r0, #12]
 8006a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a2c:	4607      	mov	r7, r0
 8006a2e:	bb02      	cbnz	r2, 8006a72 <_dtoa_r+0xa82>
 8006a30:	4601      	mov	r1, r0
 8006a32:	4650      	mov	r0, sl
 8006a34:	f000 ff32 	bl	800789c <__mcmp>
 8006a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	4639      	mov	r1, r7
 8006a3e:	4628      	mov	r0, r5
 8006a40:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006a44:	f000 fca4 	bl	8007390 <_Bfree>
 8006a48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a4c:	9f02      	ldr	r7, [sp, #8]
 8006a4e:	ea43 0102 	orr.w	r1, r3, r2
 8006a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a54:	430b      	orrs	r3, r1
 8006a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a58:	d10d      	bne.n	8006a76 <_dtoa_r+0xa86>
 8006a5a:	2b39      	cmp	r3, #57	; 0x39
 8006a5c:	d027      	beq.n	8006aae <_dtoa_r+0xabe>
 8006a5e:	9a06      	ldr	r2, [sp, #24]
 8006a60:	2a00      	cmp	r2, #0
 8006a62:	dd01      	ble.n	8006a68 <_dtoa_r+0xa78>
 8006a64:	9b04      	ldr	r3, [sp, #16]
 8006a66:	3331      	adds	r3, #49	; 0x31
 8006a68:	f88b 3000 	strb.w	r3, [fp]
 8006a6c:	e776      	b.n	800695c <_dtoa_r+0x96c>
 8006a6e:	4630      	mov	r0, r6
 8006a70:	e7b9      	b.n	80069e6 <_dtoa_r+0x9f6>
 8006a72:	2201      	movs	r2, #1
 8006a74:	e7e2      	b.n	8006a3c <_dtoa_r+0xa4c>
 8006a76:	9906      	ldr	r1, [sp, #24]
 8006a78:	2900      	cmp	r1, #0
 8006a7a:	db04      	blt.n	8006a86 <_dtoa_r+0xa96>
 8006a7c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006a7e:	4301      	orrs	r1, r0
 8006a80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a82:	4301      	orrs	r1, r0
 8006a84:	d120      	bne.n	8006ac8 <_dtoa_r+0xad8>
 8006a86:	2a00      	cmp	r2, #0
 8006a88:	ddee      	ble.n	8006a68 <_dtoa_r+0xa78>
 8006a8a:	4651      	mov	r1, sl
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	4628      	mov	r0, r5
 8006a90:	9302      	str	r3, [sp, #8]
 8006a92:	f000 fe97 	bl	80077c4 <__lshift>
 8006a96:	4621      	mov	r1, r4
 8006a98:	4682      	mov	sl, r0
 8006a9a:	f000 feff 	bl	800789c <__mcmp>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	9b02      	ldr	r3, [sp, #8]
 8006aa2:	dc02      	bgt.n	8006aaa <_dtoa_r+0xaba>
 8006aa4:	d1e0      	bne.n	8006a68 <_dtoa_r+0xa78>
 8006aa6:	07da      	lsls	r2, r3, #31
 8006aa8:	d5de      	bpl.n	8006a68 <_dtoa_r+0xa78>
 8006aaa:	2b39      	cmp	r3, #57	; 0x39
 8006aac:	d1da      	bne.n	8006a64 <_dtoa_r+0xa74>
 8006aae:	2339      	movs	r3, #57	; 0x39
 8006ab0:	f88b 3000 	strb.w	r3, [fp]
 8006ab4:	463b      	mov	r3, r7
 8006ab6:	461f      	mov	r7, r3
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006abe:	2a39      	cmp	r2, #57	; 0x39
 8006ac0:	d050      	beq.n	8006b64 <_dtoa_r+0xb74>
 8006ac2:	3201      	adds	r2, #1
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	e749      	b.n	800695c <_dtoa_r+0x96c>
 8006ac8:	2a00      	cmp	r2, #0
 8006aca:	dd03      	ble.n	8006ad4 <_dtoa_r+0xae4>
 8006acc:	2b39      	cmp	r3, #57	; 0x39
 8006ace:	d0ee      	beq.n	8006aae <_dtoa_r+0xabe>
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	e7c9      	b.n	8006a68 <_dtoa_r+0xa78>
 8006ad4:	9a02      	ldr	r2, [sp, #8]
 8006ad6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ad8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006adc:	428a      	cmp	r2, r1
 8006ade:	d02a      	beq.n	8006b36 <_dtoa_r+0xb46>
 8006ae0:	4651      	mov	r1, sl
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	220a      	movs	r2, #10
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f000 fc74 	bl	80073d4 <__multadd>
 8006aec:	45b0      	cmp	r8, r6
 8006aee:	4682      	mov	sl, r0
 8006af0:	f04f 0300 	mov.w	r3, #0
 8006af4:	f04f 020a 	mov.w	r2, #10
 8006af8:	4641      	mov	r1, r8
 8006afa:	4628      	mov	r0, r5
 8006afc:	d107      	bne.n	8006b0e <_dtoa_r+0xb1e>
 8006afe:	f000 fc69 	bl	80073d4 <__multadd>
 8006b02:	4680      	mov	r8, r0
 8006b04:	4606      	mov	r6, r0
 8006b06:	9b02      	ldr	r3, [sp, #8]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	9302      	str	r3, [sp, #8]
 8006b0c:	e777      	b.n	80069fe <_dtoa_r+0xa0e>
 8006b0e:	f000 fc61 	bl	80073d4 <__multadd>
 8006b12:	4631      	mov	r1, r6
 8006b14:	4680      	mov	r8, r0
 8006b16:	2300      	movs	r3, #0
 8006b18:	220a      	movs	r2, #10
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	f000 fc5a 	bl	80073d4 <__multadd>
 8006b20:	4606      	mov	r6, r0
 8006b22:	e7f0      	b.n	8006b06 <_dtoa_r+0xb16>
 8006b24:	f1bb 0f00 	cmp.w	fp, #0
 8006b28:	9a08      	ldr	r2, [sp, #32]
 8006b2a:	bfcc      	ite	gt
 8006b2c:	465f      	movgt	r7, fp
 8006b2e:	2701      	movle	r7, #1
 8006b30:	4417      	add	r7, r2
 8006b32:	f04f 0800 	mov.w	r8, #0
 8006b36:	4651      	mov	r1, sl
 8006b38:	2201      	movs	r2, #1
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	9302      	str	r3, [sp, #8]
 8006b3e:	f000 fe41 	bl	80077c4 <__lshift>
 8006b42:	4621      	mov	r1, r4
 8006b44:	4682      	mov	sl, r0
 8006b46:	f000 fea9 	bl	800789c <__mcmp>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	dcb2      	bgt.n	8006ab4 <_dtoa_r+0xac4>
 8006b4e:	d102      	bne.n	8006b56 <_dtoa_r+0xb66>
 8006b50:	9b02      	ldr	r3, [sp, #8]
 8006b52:	07db      	lsls	r3, r3, #31
 8006b54:	d4ae      	bmi.n	8006ab4 <_dtoa_r+0xac4>
 8006b56:	463b      	mov	r3, r7
 8006b58:	461f      	mov	r7, r3
 8006b5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b5e:	2a30      	cmp	r2, #48	; 0x30
 8006b60:	d0fa      	beq.n	8006b58 <_dtoa_r+0xb68>
 8006b62:	e6fb      	b.n	800695c <_dtoa_r+0x96c>
 8006b64:	9a08      	ldr	r2, [sp, #32]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d1a5      	bne.n	8006ab6 <_dtoa_r+0xac6>
 8006b6a:	2331      	movs	r3, #49	; 0x31
 8006b6c:	f109 0901 	add.w	r9, r9, #1
 8006b70:	7013      	strb	r3, [r2, #0]
 8006b72:	e6f3      	b.n	800695c <_dtoa_r+0x96c>
 8006b74:	4b13      	ldr	r3, [pc, #76]	; (8006bc4 <_dtoa_r+0xbd4>)
 8006b76:	f7ff baa6 	b.w	80060c6 <_dtoa_r+0xd6>
 8006b7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f47f aa7f 	bne.w	8006080 <_dtoa_r+0x90>
 8006b82:	4b11      	ldr	r3, [pc, #68]	; (8006bc8 <_dtoa_r+0xbd8>)
 8006b84:	f7ff ba9f 	b.w	80060c6 <_dtoa_r+0xd6>
 8006b88:	f1bb 0f00 	cmp.w	fp, #0
 8006b8c:	dc03      	bgt.n	8006b96 <_dtoa_r+0xba6>
 8006b8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	f73f aecc 	bgt.w	800692e <_dtoa_r+0x93e>
 8006b96:	9f08      	ldr	r7, [sp, #32]
 8006b98:	4621      	mov	r1, r4
 8006b9a:	4650      	mov	r0, sl
 8006b9c:	f7ff f99c 	bl	8005ed8 <quorem>
 8006ba0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006ba4:	f807 3b01 	strb.w	r3, [r7], #1
 8006ba8:	9a08      	ldr	r2, [sp, #32]
 8006baa:	1aba      	subs	r2, r7, r2
 8006bac:	4593      	cmp	fp, r2
 8006bae:	ddb9      	ble.n	8006b24 <_dtoa_r+0xb34>
 8006bb0:	4651      	mov	r1, sl
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	220a      	movs	r2, #10
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	f000 fc0c 	bl	80073d4 <__multadd>
 8006bbc:	4682      	mov	sl, r0
 8006bbe:	e7eb      	b.n	8006b98 <_dtoa_r+0xba8>
 8006bc0:	08009d4c 	.word	0x08009d4c
 8006bc4:	08009f51 	.word	0x08009f51
 8006bc8:	08009cc9 	.word	0x08009cc9

08006bcc <rshift>:
 8006bcc:	6903      	ldr	r3, [r0, #16]
 8006bce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006bd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006bd6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006bda:	f100 0414 	add.w	r4, r0, #20
 8006bde:	dd45      	ble.n	8006c6c <rshift+0xa0>
 8006be0:	f011 011f 	ands.w	r1, r1, #31
 8006be4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006be8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006bec:	d10c      	bne.n	8006c08 <rshift+0x3c>
 8006bee:	f100 0710 	add.w	r7, r0, #16
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	42b1      	cmp	r1, r6
 8006bf6:	d334      	bcc.n	8006c62 <rshift+0x96>
 8006bf8:	1a9b      	subs	r3, r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	1eea      	subs	r2, r5, #3
 8006bfe:	4296      	cmp	r6, r2
 8006c00:	bf38      	it	cc
 8006c02:	2300      	movcc	r3, #0
 8006c04:	4423      	add	r3, r4
 8006c06:	e015      	b.n	8006c34 <rshift+0x68>
 8006c08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006c0c:	f1c1 0820 	rsb	r8, r1, #32
 8006c10:	40cf      	lsrs	r7, r1
 8006c12:	f105 0e04 	add.w	lr, r5, #4
 8006c16:	46a1      	mov	r9, r4
 8006c18:	4576      	cmp	r6, lr
 8006c1a:	46f4      	mov	ip, lr
 8006c1c:	d815      	bhi.n	8006c4a <rshift+0x7e>
 8006c1e:	1a9b      	subs	r3, r3, r2
 8006c20:	009a      	lsls	r2, r3, #2
 8006c22:	3a04      	subs	r2, #4
 8006c24:	3501      	adds	r5, #1
 8006c26:	42ae      	cmp	r6, r5
 8006c28:	bf38      	it	cc
 8006c2a:	2200      	movcc	r2, #0
 8006c2c:	18a3      	adds	r3, r4, r2
 8006c2e:	50a7      	str	r7, [r4, r2]
 8006c30:	b107      	cbz	r7, 8006c34 <rshift+0x68>
 8006c32:	3304      	adds	r3, #4
 8006c34:	1b1a      	subs	r2, r3, r4
 8006c36:	42a3      	cmp	r3, r4
 8006c38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006c3c:	bf08      	it	eq
 8006c3e:	2300      	moveq	r3, #0
 8006c40:	6102      	str	r2, [r0, #16]
 8006c42:	bf08      	it	eq
 8006c44:	6143      	streq	r3, [r0, #20]
 8006c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c4a:	f8dc c000 	ldr.w	ip, [ip]
 8006c4e:	fa0c fc08 	lsl.w	ip, ip, r8
 8006c52:	ea4c 0707 	orr.w	r7, ip, r7
 8006c56:	f849 7b04 	str.w	r7, [r9], #4
 8006c5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c5e:	40cf      	lsrs	r7, r1
 8006c60:	e7da      	b.n	8006c18 <rshift+0x4c>
 8006c62:	f851 cb04 	ldr.w	ip, [r1], #4
 8006c66:	f847 cf04 	str.w	ip, [r7, #4]!
 8006c6a:	e7c3      	b.n	8006bf4 <rshift+0x28>
 8006c6c:	4623      	mov	r3, r4
 8006c6e:	e7e1      	b.n	8006c34 <rshift+0x68>

08006c70 <__hexdig_fun>:
 8006c70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006c74:	2b09      	cmp	r3, #9
 8006c76:	d802      	bhi.n	8006c7e <__hexdig_fun+0xe>
 8006c78:	3820      	subs	r0, #32
 8006c7a:	b2c0      	uxtb	r0, r0
 8006c7c:	4770      	bx	lr
 8006c7e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006c82:	2b05      	cmp	r3, #5
 8006c84:	d801      	bhi.n	8006c8a <__hexdig_fun+0x1a>
 8006c86:	3847      	subs	r0, #71	; 0x47
 8006c88:	e7f7      	b.n	8006c7a <__hexdig_fun+0xa>
 8006c8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006c8e:	2b05      	cmp	r3, #5
 8006c90:	d801      	bhi.n	8006c96 <__hexdig_fun+0x26>
 8006c92:	3827      	subs	r0, #39	; 0x27
 8006c94:	e7f1      	b.n	8006c7a <__hexdig_fun+0xa>
 8006c96:	2000      	movs	r0, #0
 8006c98:	4770      	bx	lr
	...

08006c9c <__gethex>:
 8006c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca0:	b08b      	sub	sp, #44	; 0x2c
 8006ca2:	468b      	mov	fp, r1
 8006ca4:	9306      	str	r3, [sp, #24]
 8006ca6:	4bb9      	ldr	r3, [pc, #740]	; (8006f8c <__gethex+0x2f0>)
 8006ca8:	9002      	str	r0, [sp, #8]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	9303      	str	r3, [sp, #12]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	4690      	mov	r8, r2
 8006cb2:	f7f9 fa9f 	bl	80001f4 <strlen>
 8006cb6:	9b03      	ldr	r3, [sp, #12]
 8006cb8:	f8db 2000 	ldr.w	r2, [fp]
 8006cbc:	4403      	add	r3, r0
 8006cbe:	4682      	mov	sl, r0
 8006cc0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006cc4:	9307      	str	r3, [sp, #28]
 8006cc6:	1c93      	adds	r3, r2, #2
 8006cc8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006ccc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006cd0:	32fe      	adds	r2, #254	; 0xfe
 8006cd2:	18d1      	adds	r1, r2, r3
 8006cd4:	461f      	mov	r7, r3
 8006cd6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006cda:	9101      	str	r1, [sp, #4]
 8006cdc:	2830      	cmp	r0, #48	; 0x30
 8006cde:	d0f8      	beq.n	8006cd2 <__gethex+0x36>
 8006ce0:	f7ff ffc6 	bl	8006c70 <__hexdig_fun>
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d13a      	bne.n	8006d60 <__gethex+0xc4>
 8006cea:	9903      	ldr	r1, [sp, #12]
 8006cec:	4652      	mov	r2, sl
 8006cee:	4638      	mov	r0, r7
 8006cf0:	f001 fd54 	bl	800879c <strncmp>
 8006cf4:	4605      	mov	r5, r0
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d166      	bne.n	8006dc8 <__gethex+0x12c>
 8006cfa:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006cfe:	eb07 060a 	add.w	r6, r7, sl
 8006d02:	f7ff ffb5 	bl	8006c70 <__hexdig_fun>
 8006d06:	2800      	cmp	r0, #0
 8006d08:	d060      	beq.n	8006dcc <__gethex+0x130>
 8006d0a:	4633      	mov	r3, r6
 8006d0c:	7818      	ldrb	r0, [r3, #0]
 8006d0e:	2830      	cmp	r0, #48	; 0x30
 8006d10:	461f      	mov	r7, r3
 8006d12:	f103 0301 	add.w	r3, r3, #1
 8006d16:	d0f9      	beq.n	8006d0c <__gethex+0x70>
 8006d18:	f7ff ffaa 	bl	8006c70 <__hexdig_fun>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	fab0 f480 	clz	r4, r0
 8006d22:	0964      	lsrs	r4, r4, #5
 8006d24:	4635      	mov	r5, r6
 8006d26:	9301      	str	r3, [sp, #4]
 8006d28:	463a      	mov	r2, r7
 8006d2a:	4616      	mov	r6, r2
 8006d2c:	3201      	adds	r2, #1
 8006d2e:	7830      	ldrb	r0, [r6, #0]
 8006d30:	f7ff ff9e 	bl	8006c70 <__hexdig_fun>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d1f8      	bne.n	8006d2a <__gethex+0x8e>
 8006d38:	9903      	ldr	r1, [sp, #12]
 8006d3a:	4652      	mov	r2, sl
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	f001 fd2d 	bl	800879c <strncmp>
 8006d42:	b980      	cbnz	r0, 8006d66 <__gethex+0xca>
 8006d44:	b94d      	cbnz	r5, 8006d5a <__gethex+0xbe>
 8006d46:	eb06 050a 	add.w	r5, r6, sl
 8006d4a:	462a      	mov	r2, r5
 8006d4c:	4616      	mov	r6, r2
 8006d4e:	3201      	adds	r2, #1
 8006d50:	7830      	ldrb	r0, [r6, #0]
 8006d52:	f7ff ff8d 	bl	8006c70 <__hexdig_fun>
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d1f8      	bne.n	8006d4c <__gethex+0xb0>
 8006d5a:	1bad      	subs	r5, r5, r6
 8006d5c:	00ad      	lsls	r5, r5, #2
 8006d5e:	e004      	b.n	8006d6a <__gethex+0xce>
 8006d60:	2400      	movs	r4, #0
 8006d62:	4625      	mov	r5, r4
 8006d64:	e7e0      	b.n	8006d28 <__gethex+0x8c>
 8006d66:	2d00      	cmp	r5, #0
 8006d68:	d1f7      	bne.n	8006d5a <__gethex+0xbe>
 8006d6a:	7833      	ldrb	r3, [r6, #0]
 8006d6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006d70:	2b50      	cmp	r3, #80	; 0x50
 8006d72:	d139      	bne.n	8006de8 <__gethex+0x14c>
 8006d74:	7873      	ldrb	r3, [r6, #1]
 8006d76:	2b2b      	cmp	r3, #43	; 0x2b
 8006d78:	d02a      	beq.n	8006dd0 <__gethex+0x134>
 8006d7a:	2b2d      	cmp	r3, #45	; 0x2d
 8006d7c:	d02c      	beq.n	8006dd8 <__gethex+0x13c>
 8006d7e:	1c71      	adds	r1, r6, #1
 8006d80:	f04f 0900 	mov.w	r9, #0
 8006d84:	7808      	ldrb	r0, [r1, #0]
 8006d86:	f7ff ff73 	bl	8006c70 <__hexdig_fun>
 8006d8a:	1e43      	subs	r3, r0, #1
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b18      	cmp	r3, #24
 8006d90:	d82a      	bhi.n	8006de8 <__gethex+0x14c>
 8006d92:	f1a0 0210 	sub.w	r2, r0, #16
 8006d96:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006d9a:	f7ff ff69 	bl	8006c70 <__hexdig_fun>
 8006d9e:	1e43      	subs	r3, r0, #1
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b18      	cmp	r3, #24
 8006da4:	d91b      	bls.n	8006dde <__gethex+0x142>
 8006da6:	f1b9 0f00 	cmp.w	r9, #0
 8006daa:	d000      	beq.n	8006dae <__gethex+0x112>
 8006dac:	4252      	negs	r2, r2
 8006dae:	4415      	add	r5, r2
 8006db0:	f8cb 1000 	str.w	r1, [fp]
 8006db4:	b1d4      	cbz	r4, 8006dec <__gethex+0x150>
 8006db6:	9b01      	ldr	r3, [sp, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	bf14      	ite	ne
 8006dbc:	2700      	movne	r7, #0
 8006dbe:	2706      	moveq	r7, #6
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	b00b      	add	sp, #44	; 0x2c
 8006dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc8:	463e      	mov	r6, r7
 8006dca:	4625      	mov	r5, r4
 8006dcc:	2401      	movs	r4, #1
 8006dce:	e7cc      	b.n	8006d6a <__gethex+0xce>
 8006dd0:	f04f 0900 	mov.w	r9, #0
 8006dd4:	1cb1      	adds	r1, r6, #2
 8006dd6:	e7d5      	b.n	8006d84 <__gethex+0xe8>
 8006dd8:	f04f 0901 	mov.w	r9, #1
 8006ddc:	e7fa      	b.n	8006dd4 <__gethex+0x138>
 8006dde:	230a      	movs	r3, #10
 8006de0:	fb03 0202 	mla	r2, r3, r2, r0
 8006de4:	3a10      	subs	r2, #16
 8006de6:	e7d6      	b.n	8006d96 <__gethex+0xfa>
 8006de8:	4631      	mov	r1, r6
 8006dea:	e7e1      	b.n	8006db0 <__gethex+0x114>
 8006dec:	1bf3      	subs	r3, r6, r7
 8006dee:	3b01      	subs	r3, #1
 8006df0:	4621      	mov	r1, r4
 8006df2:	2b07      	cmp	r3, #7
 8006df4:	dc0a      	bgt.n	8006e0c <__gethex+0x170>
 8006df6:	9802      	ldr	r0, [sp, #8]
 8006df8:	f000 fa8a 	bl	8007310 <_Balloc>
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	b940      	cbnz	r0, 8006e12 <__gethex+0x176>
 8006e00:	4b63      	ldr	r3, [pc, #396]	; (8006f90 <__gethex+0x2f4>)
 8006e02:	4602      	mov	r2, r0
 8006e04:	21de      	movs	r1, #222	; 0xde
 8006e06:	4863      	ldr	r0, [pc, #396]	; (8006f94 <__gethex+0x2f8>)
 8006e08:	f001 fda0 	bl	800894c <__assert_func>
 8006e0c:	3101      	adds	r1, #1
 8006e0e:	105b      	asrs	r3, r3, #1
 8006e10:	e7ef      	b.n	8006df2 <__gethex+0x156>
 8006e12:	f100 0914 	add.w	r9, r0, #20
 8006e16:	f04f 0b00 	mov.w	fp, #0
 8006e1a:	f1ca 0301 	rsb	r3, sl, #1
 8006e1e:	f8cd 9010 	str.w	r9, [sp, #16]
 8006e22:	f8cd b004 	str.w	fp, [sp, #4]
 8006e26:	9308      	str	r3, [sp, #32]
 8006e28:	42b7      	cmp	r7, r6
 8006e2a:	d33f      	bcc.n	8006eac <__gethex+0x210>
 8006e2c:	9f04      	ldr	r7, [sp, #16]
 8006e2e:	9b01      	ldr	r3, [sp, #4]
 8006e30:	f847 3b04 	str.w	r3, [r7], #4
 8006e34:	eba7 0709 	sub.w	r7, r7, r9
 8006e38:	10bf      	asrs	r7, r7, #2
 8006e3a:	6127      	str	r7, [r4, #16]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 fb5d 	bl	80074fc <__hi0bits>
 8006e42:	017f      	lsls	r7, r7, #5
 8006e44:	f8d8 6000 	ldr.w	r6, [r8]
 8006e48:	1a3f      	subs	r7, r7, r0
 8006e4a:	42b7      	cmp	r7, r6
 8006e4c:	dd62      	ble.n	8006f14 <__gethex+0x278>
 8006e4e:	1bbf      	subs	r7, r7, r6
 8006e50:	4639      	mov	r1, r7
 8006e52:	4620      	mov	r0, r4
 8006e54:	f000 feef 	bl	8007c36 <__any_on>
 8006e58:	4682      	mov	sl, r0
 8006e5a:	b1a8      	cbz	r0, 8006e88 <__gethex+0x1ec>
 8006e5c:	1e7b      	subs	r3, r7, #1
 8006e5e:	1159      	asrs	r1, r3, #5
 8006e60:	f003 021f 	and.w	r2, r3, #31
 8006e64:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006e68:	f04f 0a01 	mov.w	sl, #1
 8006e6c:	fa0a f202 	lsl.w	r2, sl, r2
 8006e70:	420a      	tst	r2, r1
 8006e72:	d009      	beq.n	8006e88 <__gethex+0x1ec>
 8006e74:	4553      	cmp	r3, sl
 8006e76:	dd05      	ble.n	8006e84 <__gethex+0x1e8>
 8006e78:	1eb9      	subs	r1, r7, #2
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f000 fedb 	bl	8007c36 <__any_on>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	d144      	bne.n	8006f0e <__gethex+0x272>
 8006e84:	f04f 0a02 	mov.w	sl, #2
 8006e88:	4639      	mov	r1, r7
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f7ff fe9e 	bl	8006bcc <rshift>
 8006e90:	443d      	add	r5, r7
 8006e92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e96:	42ab      	cmp	r3, r5
 8006e98:	da4a      	bge.n	8006f30 <__gethex+0x294>
 8006e9a:	9802      	ldr	r0, [sp, #8]
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	f000 fa77 	bl	8007390 <_Bfree>
 8006ea2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	27a3      	movs	r7, #163	; 0xa3
 8006eaa:	e789      	b.n	8006dc0 <__gethex+0x124>
 8006eac:	1e73      	subs	r3, r6, #1
 8006eae:	9a07      	ldr	r2, [sp, #28]
 8006eb0:	9305      	str	r3, [sp, #20]
 8006eb2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d019      	beq.n	8006eee <__gethex+0x252>
 8006eba:	f1bb 0f20 	cmp.w	fp, #32
 8006ebe:	d107      	bne.n	8006ed0 <__gethex+0x234>
 8006ec0:	9b04      	ldr	r3, [sp, #16]
 8006ec2:	9a01      	ldr	r2, [sp, #4]
 8006ec4:	f843 2b04 	str.w	r2, [r3], #4
 8006ec8:	9304      	str	r3, [sp, #16]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	9301      	str	r3, [sp, #4]
 8006ece:	469b      	mov	fp, r3
 8006ed0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006ed4:	f7ff fecc 	bl	8006c70 <__hexdig_fun>
 8006ed8:	9b01      	ldr	r3, [sp, #4]
 8006eda:	f000 000f 	and.w	r0, r0, #15
 8006ede:	fa00 f00b 	lsl.w	r0, r0, fp
 8006ee2:	4303      	orrs	r3, r0
 8006ee4:	9301      	str	r3, [sp, #4]
 8006ee6:	f10b 0b04 	add.w	fp, fp, #4
 8006eea:	9b05      	ldr	r3, [sp, #20]
 8006eec:	e00d      	b.n	8006f0a <__gethex+0x26e>
 8006eee:	9b05      	ldr	r3, [sp, #20]
 8006ef0:	9a08      	ldr	r2, [sp, #32]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	42bb      	cmp	r3, r7
 8006ef6:	d3e0      	bcc.n	8006eba <__gethex+0x21e>
 8006ef8:	4618      	mov	r0, r3
 8006efa:	9903      	ldr	r1, [sp, #12]
 8006efc:	9309      	str	r3, [sp, #36]	; 0x24
 8006efe:	4652      	mov	r2, sl
 8006f00:	f001 fc4c 	bl	800879c <strncmp>
 8006f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d1d7      	bne.n	8006eba <__gethex+0x21e>
 8006f0a:	461e      	mov	r6, r3
 8006f0c:	e78c      	b.n	8006e28 <__gethex+0x18c>
 8006f0e:	f04f 0a03 	mov.w	sl, #3
 8006f12:	e7b9      	b.n	8006e88 <__gethex+0x1ec>
 8006f14:	da09      	bge.n	8006f2a <__gethex+0x28e>
 8006f16:	1bf7      	subs	r7, r6, r7
 8006f18:	4621      	mov	r1, r4
 8006f1a:	9802      	ldr	r0, [sp, #8]
 8006f1c:	463a      	mov	r2, r7
 8006f1e:	f000 fc51 	bl	80077c4 <__lshift>
 8006f22:	1bed      	subs	r5, r5, r7
 8006f24:	4604      	mov	r4, r0
 8006f26:	f100 0914 	add.w	r9, r0, #20
 8006f2a:	f04f 0a00 	mov.w	sl, #0
 8006f2e:	e7b0      	b.n	8006e92 <__gethex+0x1f6>
 8006f30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006f34:	42a8      	cmp	r0, r5
 8006f36:	dd70      	ble.n	800701a <__gethex+0x37e>
 8006f38:	1b45      	subs	r5, r0, r5
 8006f3a:	42ae      	cmp	r6, r5
 8006f3c:	dc34      	bgt.n	8006fa8 <__gethex+0x30c>
 8006f3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d028      	beq.n	8006f98 <__gethex+0x2fc>
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d02a      	beq.n	8006fa0 <__gethex+0x304>
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d115      	bne.n	8006f7a <__gethex+0x2de>
 8006f4e:	42ae      	cmp	r6, r5
 8006f50:	d113      	bne.n	8006f7a <__gethex+0x2de>
 8006f52:	2e01      	cmp	r6, #1
 8006f54:	d10b      	bne.n	8006f6e <__gethex+0x2d2>
 8006f56:	9a06      	ldr	r2, [sp, #24]
 8006f58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006f5c:	6013      	str	r3, [r2, #0]
 8006f5e:	2301      	movs	r3, #1
 8006f60:	6123      	str	r3, [r4, #16]
 8006f62:	f8c9 3000 	str.w	r3, [r9]
 8006f66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f68:	2762      	movs	r7, #98	; 0x62
 8006f6a:	601c      	str	r4, [r3, #0]
 8006f6c:	e728      	b.n	8006dc0 <__gethex+0x124>
 8006f6e:	1e71      	subs	r1, r6, #1
 8006f70:	4620      	mov	r0, r4
 8006f72:	f000 fe60 	bl	8007c36 <__any_on>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d1ed      	bne.n	8006f56 <__gethex+0x2ba>
 8006f7a:	9802      	ldr	r0, [sp, #8]
 8006f7c:	4621      	mov	r1, r4
 8006f7e:	f000 fa07 	bl	8007390 <_Bfree>
 8006f82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f84:	2300      	movs	r3, #0
 8006f86:	6013      	str	r3, [r2, #0]
 8006f88:	2750      	movs	r7, #80	; 0x50
 8006f8a:	e719      	b.n	8006dc0 <__gethex+0x124>
 8006f8c:	08009dc8 	.word	0x08009dc8
 8006f90:	08009d4c 	.word	0x08009d4c
 8006f94:	08009d5d 	.word	0x08009d5d
 8006f98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1ed      	bne.n	8006f7a <__gethex+0x2de>
 8006f9e:	e7da      	b.n	8006f56 <__gethex+0x2ba>
 8006fa0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1d7      	bne.n	8006f56 <__gethex+0x2ba>
 8006fa6:	e7e8      	b.n	8006f7a <__gethex+0x2de>
 8006fa8:	1e6f      	subs	r7, r5, #1
 8006faa:	f1ba 0f00 	cmp.w	sl, #0
 8006fae:	d131      	bne.n	8007014 <__gethex+0x378>
 8006fb0:	b127      	cbz	r7, 8006fbc <__gethex+0x320>
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f000 fe3e 	bl	8007c36 <__any_on>
 8006fba:	4682      	mov	sl, r0
 8006fbc:	117b      	asrs	r3, r7, #5
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006fc4:	f007 071f 	and.w	r7, r7, #31
 8006fc8:	fa01 f707 	lsl.w	r7, r1, r7
 8006fcc:	421f      	tst	r7, r3
 8006fce:	4629      	mov	r1, r5
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	bf18      	it	ne
 8006fd4:	f04a 0a02 	orrne.w	sl, sl, #2
 8006fd8:	1b76      	subs	r6, r6, r5
 8006fda:	f7ff fdf7 	bl	8006bcc <rshift>
 8006fde:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006fe2:	2702      	movs	r7, #2
 8006fe4:	f1ba 0f00 	cmp.w	sl, #0
 8006fe8:	d048      	beq.n	800707c <__gethex+0x3e0>
 8006fea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d015      	beq.n	800701e <__gethex+0x382>
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d017      	beq.n	8007026 <__gethex+0x38a>
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d109      	bne.n	800700e <__gethex+0x372>
 8006ffa:	f01a 0f02 	tst.w	sl, #2
 8006ffe:	d006      	beq.n	800700e <__gethex+0x372>
 8007000:	f8d9 0000 	ldr.w	r0, [r9]
 8007004:	ea4a 0a00 	orr.w	sl, sl, r0
 8007008:	f01a 0f01 	tst.w	sl, #1
 800700c:	d10e      	bne.n	800702c <__gethex+0x390>
 800700e:	f047 0710 	orr.w	r7, r7, #16
 8007012:	e033      	b.n	800707c <__gethex+0x3e0>
 8007014:	f04f 0a01 	mov.w	sl, #1
 8007018:	e7d0      	b.n	8006fbc <__gethex+0x320>
 800701a:	2701      	movs	r7, #1
 800701c:	e7e2      	b.n	8006fe4 <__gethex+0x348>
 800701e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007020:	f1c3 0301 	rsb	r3, r3, #1
 8007024:	9315      	str	r3, [sp, #84]	; 0x54
 8007026:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0f0      	beq.n	800700e <__gethex+0x372>
 800702c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007030:	f104 0314 	add.w	r3, r4, #20
 8007034:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007038:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800703c:	f04f 0c00 	mov.w	ip, #0
 8007040:	4618      	mov	r0, r3
 8007042:	f853 2b04 	ldr.w	r2, [r3], #4
 8007046:	f1b2 3fff 	cmp.w	r2, #4294967295
 800704a:	d01c      	beq.n	8007086 <__gethex+0x3ea>
 800704c:	3201      	adds	r2, #1
 800704e:	6002      	str	r2, [r0, #0]
 8007050:	2f02      	cmp	r7, #2
 8007052:	f104 0314 	add.w	r3, r4, #20
 8007056:	d13d      	bne.n	80070d4 <__gethex+0x438>
 8007058:	f8d8 2000 	ldr.w	r2, [r8]
 800705c:	3a01      	subs	r2, #1
 800705e:	42b2      	cmp	r2, r6
 8007060:	d10a      	bne.n	8007078 <__gethex+0x3dc>
 8007062:	1171      	asrs	r1, r6, #5
 8007064:	2201      	movs	r2, #1
 8007066:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800706a:	f006 061f 	and.w	r6, r6, #31
 800706e:	fa02 f606 	lsl.w	r6, r2, r6
 8007072:	421e      	tst	r6, r3
 8007074:	bf18      	it	ne
 8007076:	4617      	movne	r7, r2
 8007078:	f047 0720 	orr.w	r7, r7, #32
 800707c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800707e:	601c      	str	r4, [r3, #0]
 8007080:	9b06      	ldr	r3, [sp, #24]
 8007082:	601d      	str	r5, [r3, #0]
 8007084:	e69c      	b.n	8006dc0 <__gethex+0x124>
 8007086:	4299      	cmp	r1, r3
 8007088:	f843 cc04 	str.w	ip, [r3, #-4]
 800708c:	d8d8      	bhi.n	8007040 <__gethex+0x3a4>
 800708e:	68a3      	ldr	r3, [r4, #8]
 8007090:	459b      	cmp	fp, r3
 8007092:	db17      	blt.n	80070c4 <__gethex+0x428>
 8007094:	6861      	ldr	r1, [r4, #4]
 8007096:	9802      	ldr	r0, [sp, #8]
 8007098:	3101      	adds	r1, #1
 800709a:	f000 f939 	bl	8007310 <_Balloc>
 800709e:	4681      	mov	r9, r0
 80070a0:	b918      	cbnz	r0, 80070aa <__gethex+0x40e>
 80070a2:	4b1a      	ldr	r3, [pc, #104]	; (800710c <__gethex+0x470>)
 80070a4:	4602      	mov	r2, r0
 80070a6:	2184      	movs	r1, #132	; 0x84
 80070a8:	e6ad      	b.n	8006e06 <__gethex+0x16a>
 80070aa:	6922      	ldr	r2, [r4, #16]
 80070ac:	3202      	adds	r2, #2
 80070ae:	f104 010c 	add.w	r1, r4, #12
 80070b2:	0092      	lsls	r2, r2, #2
 80070b4:	300c      	adds	r0, #12
 80070b6:	f000 f91d 	bl	80072f4 <memcpy>
 80070ba:	4621      	mov	r1, r4
 80070bc:	9802      	ldr	r0, [sp, #8]
 80070be:	f000 f967 	bl	8007390 <_Bfree>
 80070c2:	464c      	mov	r4, r9
 80070c4:	6923      	ldr	r3, [r4, #16]
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80070cc:	6122      	str	r2, [r4, #16]
 80070ce:	2201      	movs	r2, #1
 80070d0:	615a      	str	r2, [r3, #20]
 80070d2:	e7bd      	b.n	8007050 <__gethex+0x3b4>
 80070d4:	6922      	ldr	r2, [r4, #16]
 80070d6:	455a      	cmp	r2, fp
 80070d8:	dd0b      	ble.n	80070f2 <__gethex+0x456>
 80070da:	2101      	movs	r1, #1
 80070dc:	4620      	mov	r0, r4
 80070de:	f7ff fd75 	bl	8006bcc <rshift>
 80070e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80070e6:	3501      	adds	r5, #1
 80070e8:	42ab      	cmp	r3, r5
 80070ea:	f6ff aed6 	blt.w	8006e9a <__gethex+0x1fe>
 80070ee:	2701      	movs	r7, #1
 80070f0:	e7c2      	b.n	8007078 <__gethex+0x3dc>
 80070f2:	f016 061f 	ands.w	r6, r6, #31
 80070f6:	d0fa      	beq.n	80070ee <__gethex+0x452>
 80070f8:	449a      	add	sl, r3
 80070fa:	f1c6 0620 	rsb	r6, r6, #32
 80070fe:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007102:	f000 f9fb 	bl	80074fc <__hi0bits>
 8007106:	42b0      	cmp	r0, r6
 8007108:	dbe7      	blt.n	80070da <__gethex+0x43e>
 800710a:	e7f0      	b.n	80070ee <__gethex+0x452>
 800710c:	08009d4c 	.word	0x08009d4c

08007110 <L_shift>:
 8007110:	f1c2 0208 	rsb	r2, r2, #8
 8007114:	0092      	lsls	r2, r2, #2
 8007116:	b570      	push	{r4, r5, r6, lr}
 8007118:	f1c2 0620 	rsb	r6, r2, #32
 800711c:	6843      	ldr	r3, [r0, #4]
 800711e:	6804      	ldr	r4, [r0, #0]
 8007120:	fa03 f506 	lsl.w	r5, r3, r6
 8007124:	432c      	orrs	r4, r5
 8007126:	40d3      	lsrs	r3, r2
 8007128:	6004      	str	r4, [r0, #0]
 800712a:	f840 3f04 	str.w	r3, [r0, #4]!
 800712e:	4288      	cmp	r0, r1
 8007130:	d3f4      	bcc.n	800711c <L_shift+0xc>
 8007132:	bd70      	pop	{r4, r5, r6, pc}

08007134 <__match>:
 8007134:	b530      	push	{r4, r5, lr}
 8007136:	6803      	ldr	r3, [r0, #0]
 8007138:	3301      	adds	r3, #1
 800713a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800713e:	b914      	cbnz	r4, 8007146 <__match+0x12>
 8007140:	6003      	str	r3, [r0, #0]
 8007142:	2001      	movs	r0, #1
 8007144:	bd30      	pop	{r4, r5, pc}
 8007146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800714a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800714e:	2d19      	cmp	r5, #25
 8007150:	bf98      	it	ls
 8007152:	3220      	addls	r2, #32
 8007154:	42a2      	cmp	r2, r4
 8007156:	d0f0      	beq.n	800713a <__match+0x6>
 8007158:	2000      	movs	r0, #0
 800715a:	e7f3      	b.n	8007144 <__match+0x10>

0800715c <__hexnan>:
 800715c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007160:	680b      	ldr	r3, [r1, #0]
 8007162:	6801      	ldr	r1, [r0, #0]
 8007164:	115e      	asrs	r6, r3, #5
 8007166:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800716a:	f013 031f 	ands.w	r3, r3, #31
 800716e:	b087      	sub	sp, #28
 8007170:	bf18      	it	ne
 8007172:	3604      	addne	r6, #4
 8007174:	2500      	movs	r5, #0
 8007176:	1f37      	subs	r7, r6, #4
 8007178:	4682      	mov	sl, r0
 800717a:	4690      	mov	r8, r2
 800717c:	9301      	str	r3, [sp, #4]
 800717e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007182:	46b9      	mov	r9, r7
 8007184:	463c      	mov	r4, r7
 8007186:	9502      	str	r5, [sp, #8]
 8007188:	46ab      	mov	fp, r5
 800718a:	784a      	ldrb	r2, [r1, #1]
 800718c:	1c4b      	adds	r3, r1, #1
 800718e:	9303      	str	r3, [sp, #12]
 8007190:	b342      	cbz	r2, 80071e4 <__hexnan+0x88>
 8007192:	4610      	mov	r0, r2
 8007194:	9105      	str	r1, [sp, #20]
 8007196:	9204      	str	r2, [sp, #16]
 8007198:	f7ff fd6a 	bl	8006c70 <__hexdig_fun>
 800719c:	2800      	cmp	r0, #0
 800719e:	d14f      	bne.n	8007240 <__hexnan+0xe4>
 80071a0:	9a04      	ldr	r2, [sp, #16]
 80071a2:	9905      	ldr	r1, [sp, #20]
 80071a4:	2a20      	cmp	r2, #32
 80071a6:	d818      	bhi.n	80071da <__hexnan+0x7e>
 80071a8:	9b02      	ldr	r3, [sp, #8]
 80071aa:	459b      	cmp	fp, r3
 80071ac:	dd13      	ble.n	80071d6 <__hexnan+0x7a>
 80071ae:	454c      	cmp	r4, r9
 80071b0:	d206      	bcs.n	80071c0 <__hexnan+0x64>
 80071b2:	2d07      	cmp	r5, #7
 80071b4:	dc04      	bgt.n	80071c0 <__hexnan+0x64>
 80071b6:	462a      	mov	r2, r5
 80071b8:	4649      	mov	r1, r9
 80071ba:	4620      	mov	r0, r4
 80071bc:	f7ff ffa8 	bl	8007110 <L_shift>
 80071c0:	4544      	cmp	r4, r8
 80071c2:	d950      	bls.n	8007266 <__hexnan+0x10a>
 80071c4:	2300      	movs	r3, #0
 80071c6:	f1a4 0904 	sub.w	r9, r4, #4
 80071ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80071ce:	f8cd b008 	str.w	fp, [sp, #8]
 80071d2:	464c      	mov	r4, r9
 80071d4:	461d      	mov	r5, r3
 80071d6:	9903      	ldr	r1, [sp, #12]
 80071d8:	e7d7      	b.n	800718a <__hexnan+0x2e>
 80071da:	2a29      	cmp	r2, #41	; 0x29
 80071dc:	d156      	bne.n	800728c <__hexnan+0x130>
 80071de:	3102      	adds	r1, #2
 80071e0:	f8ca 1000 	str.w	r1, [sl]
 80071e4:	f1bb 0f00 	cmp.w	fp, #0
 80071e8:	d050      	beq.n	800728c <__hexnan+0x130>
 80071ea:	454c      	cmp	r4, r9
 80071ec:	d206      	bcs.n	80071fc <__hexnan+0xa0>
 80071ee:	2d07      	cmp	r5, #7
 80071f0:	dc04      	bgt.n	80071fc <__hexnan+0xa0>
 80071f2:	462a      	mov	r2, r5
 80071f4:	4649      	mov	r1, r9
 80071f6:	4620      	mov	r0, r4
 80071f8:	f7ff ff8a 	bl	8007110 <L_shift>
 80071fc:	4544      	cmp	r4, r8
 80071fe:	d934      	bls.n	800726a <__hexnan+0x10e>
 8007200:	f1a8 0204 	sub.w	r2, r8, #4
 8007204:	4623      	mov	r3, r4
 8007206:	f853 1b04 	ldr.w	r1, [r3], #4
 800720a:	f842 1f04 	str.w	r1, [r2, #4]!
 800720e:	429f      	cmp	r7, r3
 8007210:	d2f9      	bcs.n	8007206 <__hexnan+0xaa>
 8007212:	1b3b      	subs	r3, r7, r4
 8007214:	f023 0303 	bic.w	r3, r3, #3
 8007218:	3304      	adds	r3, #4
 800721a:	3401      	adds	r4, #1
 800721c:	3e03      	subs	r6, #3
 800721e:	42b4      	cmp	r4, r6
 8007220:	bf88      	it	hi
 8007222:	2304      	movhi	r3, #4
 8007224:	4443      	add	r3, r8
 8007226:	2200      	movs	r2, #0
 8007228:	f843 2b04 	str.w	r2, [r3], #4
 800722c:	429f      	cmp	r7, r3
 800722e:	d2fb      	bcs.n	8007228 <__hexnan+0xcc>
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	b91b      	cbnz	r3, 800723c <__hexnan+0xe0>
 8007234:	4547      	cmp	r7, r8
 8007236:	d127      	bne.n	8007288 <__hexnan+0x12c>
 8007238:	2301      	movs	r3, #1
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	2005      	movs	r0, #5
 800723e:	e026      	b.n	800728e <__hexnan+0x132>
 8007240:	3501      	adds	r5, #1
 8007242:	2d08      	cmp	r5, #8
 8007244:	f10b 0b01 	add.w	fp, fp, #1
 8007248:	dd06      	ble.n	8007258 <__hexnan+0xfc>
 800724a:	4544      	cmp	r4, r8
 800724c:	d9c3      	bls.n	80071d6 <__hexnan+0x7a>
 800724e:	2300      	movs	r3, #0
 8007250:	f844 3c04 	str.w	r3, [r4, #-4]
 8007254:	2501      	movs	r5, #1
 8007256:	3c04      	subs	r4, #4
 8007258:	6822      	ldr	r2, [r4, #0]
 800725a:	f000 000f 	and.w	r0, r0, #15
 800725e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007262:	6022      	str	r2, [r4, #0]
 8007264:	e7b7      	b.n	80071d6 <__hexnan+0x7a>
 8007266:	2508      	movs	r5, #8
 8007268:	e7b5      	b.n	80071d6 <__hexnan+0x7a>
 800726a:	9b01      	ldr	r3, [sp, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0df      	beq.n	8007230 <__hexnan+0xd4>
 8007270:	f04f 32ff 	mov.w	r2, #4294967295
 8007274:	f1c3 0320 	rsb	r3, r3, #32
 8007278:	fa22 f303 	lsr.w	r3, r2, r3
 800727c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007280:	401a      	ands	r2, r3
 8007282:	f846 2c04 	str.w	r2, [r6, #-4]
 8007286:	e7d3      	b.n	8007230 <__hexnan+0xd4>
 8007288:	3f04      	subs	r7, #4
 800728a:	e7d1      	b.n	8007230 <__hexnan+0xd4>
 800728c:	2004      	movs	r0, #4
 800728e:	b007      	add	sp, #28
 8007290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007294 <_localeconv_r>:
 8007294:	4800      	ldr	r0, [pc, #0]	; (8007298 <_localeconv_r+0x4>)
 8007296:	4770      	bx	lr
 8007298:	20000158 	.word	0x20000158

0800729c <_lseek_r>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	4d07      	ldr	r5, [pc, #28]	; (80072bc <_lseek_r+0x20>)
 80072a0:	4604      	mov	r4, r0
 80072a2:	4608      	mov	r0, r1
 80072a4:	4611      	mov	r1, r2
 80072a6:	2200      	movs	r2, #0
 80072a8:	602a      	str	r2, [r5, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	f7fa fd3c 	bl	8001d28 <_lseek>
 80072b0:	1c43      	adds	r3, r0, #1
 80072b2:	d102      	bne.n	80072ba <_lseek_r+0x1e>
 80072b4:	682b      	ldr	r3, [r5, #0]
 80072b6:	b103      	cbz	r3, 80072ba <_lseek_r+0x1e>
 80072b8:	6023      	str	r3, [r4, #0]
 80072ba:	bd38      	pop	{r3, r4, r5, pc}
 80072bc:	200004a4 	.word	0x200004a4

080072c0 <malloc>:
 80072c0:	4b02      	ldr	r3, [pc, #8]	; (80072cc <malloc+0xc>)
 80072c2:	4601      	mov	r1, r0
 80072c4:	6818      	ldr	r0, [r3, #0]
 80072c6:	f000 bd33 	b.w	8007d30 <_malloc_r>
 80072ca:	bf00      	nop
 80072cc:	20000000 	.word	0x20000000

080072d0 <__ascii_mbtowc>:
 80072d0:	b082      	sub	sp, #8
 80072d2:	b901      	cbnz	r1, 80072d6 <__ascii_mbtowc+0x6>
 80072d4:	a901      	add	r1, sp, #4
 80072d6:	b142      	cbz	r2, 80072ea <__ascii_mbtowc+0x1a>
 80072d8:	b14b      	cbz	r3, 80072ee <__ascii_mbtowc+0x1e>
 80072da:	7813      	ldrb	r3, [r2, #0]
 80072dc:	600b      	str	r3, [r1, #0]
 80072de:	7812      	ldrb	r2, [r2, #0]
 80072e0:	1e10      	subs	r0, r2, #0
 80072e2:	bf18      	it	ne
 80072e4:	2001      	movne	r0, #1
 80072e6:	b002      	add	sp, #8
 80072e8:	4770      	bx	lr
 80072ea:	4610      	mov	r0, r2
 80072ec:	e7fb      	b.n	80072e6 <__ascii_mbtowc+0x16>
 80072ee:	f06f 0001 	mvn.w	r0, #1
 80072f2:	e7f8      	b.n	80072e6 <__ascii_mbtowc+0x16>

080072f4 <memcpy>:
 80072f4:	440a      	add	r2, r1
 80072f6:	4291      	cmp	r1, r2
 80072f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80072fc:	d100      	bne.n	8007300 <memcpy+0xc>
 80072fe:	4770      	bx	lr
 8007300:	b510      	push	{r4, lr}
 8007302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800730a:	4291      	cmp	r1, r2
 800730c:	d1f9      	bne.n	8007302 <memcpy+0xe>
 800730e:	bd10      	pop	{r4, pc}

08007310 <_Balloc>:
 8007310:	b570      	push	{r4, r5, r6, lr}
 8007312:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007314:	4604      	mov	r4, r0
 8007316:	460d      	mov	r5, r1
 8007318:	b976      	cbnz	r6, 8007338 <_Balloc+0x28>
 800731a:	2010      	movs	r0, #16
 800731c:	f7ff ffd0 	bl	80072c0 <malloc>
 8007320:	4602      	mov	r2, r0
 8007322:	6260      	str	r0, [r4, #36]	; 0x24
 8007324:	b920      	cbnz	r0, 8007330 <_Balloc+0x20>
 8007326:	4b18      	ldr	r3, [pc, #96]	; (8007388 <_Balloc+0x78>)
 8007328:	4818      	ldr	r0, [pc, #96]	; (800738c <_Balloc+0x7c>)
 800732a:	2166      	movs	r1, #102	; 0x66
 800732c:	f001 fb0e 	bl	800894c <__assert_func>
 8007330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007334:	6006      	str	r6, [r0, #0]
 8007336:	60c6      	str	r6, [r0, #12]
 8007338:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800733a:	68f3      	ldr	r3, [r6, #12]
 800733c:	b183      	cbz	r3, 8007360 <_Balloc+0x50>
 800733e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007346:	b9b8      	cbnz	r0, 8007378 <_Balloc+0x68>
 8007348:	2101      	movs	r1, #1
 800734a:	fa01 f605 	lsl.w	r6, r1, r5
 800734e:	1d72      	adds	r2, r6, #5
 8007350:	0092      	lsls	r2, r2, #2
 8007352:	4620      	mov	r0, r4
 8007354:	f000 fc90 	bl	8007c78 <_calloc_r>
 8007358:	b160      	cbz	r0, 8007374 <_Balloc+0x64>
 800735a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800735e:	e00e      	b.n	800737e <_Balloc+0x6e>
 8007360:	2221      	movs	r2, #33	; 0x21
 8007362:	2104      	movs	r1, #4
 8007364:	4620      	mov	r0, r4
 8007366:	f000 fc87 	bl	8007c78 <_calloc_r>
 800736a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800736c:	60f0      	str	r0, [r6, #12]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e4      	bne.n	800733e <_Balloc+0x2e>
 8007374:	2000      	movs	r0, #0
 8007376:	bd70      	pop	{r4, r5, r6, pc}
 8007378:	6802      	ldr	r2, [r0, #0]
 800737a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800737e:	2300      	movs	r3, #0
 8007380:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007384:	e7f7      	b.n	8007376 <_Balloc+0x66>
 8007386:	bf00      	nop
 8007388:	08009cd6 	.word	0x08009cd6
 800738c:	08009ddc 	.word	0x08009ddc

08007390 <_Bfree>:
 8007390:	b570      	push	{r4, r5, r6, lr}
 8007392:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007394:	4605      	mov	r5, r0
 8007396:	460c      	mov	r4, r1
 8007398:	b976      	cbnz	r6, 80073b8 <_Bfree+0x28>
 800739a:	2010      	movs	r0, #16
 800739c:	f7ff ff90 	bl	80072c0 <malloc>
 80073a0:	4602      	mov	r2, r0
 80073a2:	6268      	str	r0, [r5, #36]	; 0x24
 80073a4:	b920      	cbnz	r0, 80073b0 <_Bfree+0x20>
 80073a6:	4b09      	ldr	r3, [pc, #36]	; (80073cc <_Bfree+0x3c>)
 80073a8:	4809      	ldr	r0, [pc, #36]	; (80073d0 <_Bfree+0x40>)
 80073aa:	218a      	movs	r1, #138	; 0x8a
 80073ac:	f001 face 	bl	800894c <__assert_func>
 80073b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073b4:	6006      	str	r6, [r0, #0]
 80073b6:	60c6      	str	r6, [r0, #12]
 80073b8:	b13c      	cbz	r4, 80073ca <_Bfree+0x3a>
 80073ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073bc:	6862      	ldr	r2, [r4, #4]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073c4:	6021      	str	r1, [r4, #0]
 80073c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073ca:	bd70      	pop	{r4, r5, r6, pc}
 80073cc:	08009cd6 	.word	0x08009cd6
 80073d0:	08009ddc 	.word	0x08009ddc

080073d4 <__multadd>:
 80073d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d8:	690e      	ldr	r6, [r1, #16]
 80073da:	4607      	mov	r7, r0
 80073dc:	4698      	mov	r8, r3
 80073de:	460c      	mov	r4, r1
 80073e0:	f101 0014 	add.w	r0, r1, #20
 80073e4:	2300      	movs	r3, #0
 80073e6:	6805      	ldr	r5, [r0, #0]
 80073e8:	b2a9      	uxth	r1, r5
 80073ea:	fb02 8101 	mla	r1, r2, r1, r8
 80073ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80073f2:	0c2d      	lsrs	r5, r5, #16
 80073f4:	fb02 c505 	mla	r5, r2, r5, ip
 80073f8:	b289      	uxth	r1, r1
 80073fa:	3301      	adds	r3, #1
 80073fc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007400:	429e      	cmp	r6, r3
 8007402:	f840 1b04 	str.w	r1, [r0], #4
 8007406:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800740a:	dcec      	bgt.n	80073e6 <__multadd+0x12>
 800740c:	f1b8 0f00 	cmp.w	r8, #0
 8007410:	d022      	beq.n	8007458 <__multadd+0x84>
 8007412:	68a3      	ldr	r3, [r4, #8]
 8007414:	42b3      	cmp	r3, r6
 8007416:	dc19      	bgt.n	800744c <__multadd+0x78>
 8007418:	6861      	ldr	r1, [r4, #4]
 800741a:	4638      	mov	r0, r7
 800741c:	3101      	adds	r1, #1
 800741e:	f7ff ff77 	bl	8007310 <_Balloc>
 8007422:	4605      	mov	r5, r0
 8007424:	b928      	cbnz	r0, 8007432 <__multadd+0x5e>
 8007426:	4602      	mov	r2, r0
 8007428:	4b0d      	ldr	r3, [pc, #52]	; (8007460 <__multadd+0x8c>)
 800742a:	480e      	ldr	r0, [pc, #56]	; (8007464 <__multadd+0x90>)
 800742c:	21b5      	movs	r1, #181	; 0xb5
 800742e:	f001 fa8d 	bl	800894c <__assert_func>
 8007432:	6922      	ldr	r2, [r4, #16]
 8007434:	3202      	adds	r2, #2
 8007436:	f104 010c 	add.w	r1, r4, #12
 800743a:	0092      	lsls	r2, r2, #2
 800743c:	300c      	adds	r0, #12
 800743e:	f7ff ff59 	bl	80072f4 <memcpy>
 8007442:	4621      	mov	r1, r4
 8007444:	4638      	mov	r0, r7
 8007446:	f7ff ffa3 	bl	8007390 <_Bfree>
 800744a:	462c      	mov	r4, r5
 800744c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007450:	3601      	adds	r6, #1
 8007452:	f8c3 8014 	str.w	r8, [r3, #20]
 8007456:	6126      	str	r6, [r4, #16]
 8007458:	4620      	mov	r0, r4
 800745a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800745e:	bf00      	nop
 8007460:	08009d4c 	.word	0x08009d4c
 8007464:	08009ddc 	.word	0x08009ddc

08007468 <__s2b>:
 8007468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800746c:	460c      	mov	r4, r1
 800746e:	4615      	mov	r5, r2
 8007470:	461f      	mov	r7, r3
 8007472:	2209      	movs	r2, #9
 8007474:	3308      	adds	r3, #8
 8007476:	4606      	mov	r6, r0
 8007478:	fb93 f3f2 	sdiv	r3, r3, r2
 800747c:	2100      	movs	r1, #0
 800747e:	2201      	movs	r2, #1
 8007480:	429a      	cmp	r2, r3
 8007482:	db09      	blt.n	8007498 <__s2b+0x30>
 8007484:	4630      	mov	r0, r6
 8007486:	f7ff ff43 	bl	8007310 <_Balloc>
 800748a:	b940      	cbnz	r0, 800749e <__s2b+0x36>
 800748c:	4602      	mov	r2, r0
 800748e:	4b19      	ldr	r3, [pc, #100]	; (80074f4 <__s2b+0x8c>)
 8007490:	4819      	ldr	r0, [pc, #100]	; (80074f8 <__s2b+0x90>)
 8007492:	21ce      	movs	r1, #206	; 0xce
 8007494:	f001 fa5a 	bl	800894c <__assert_func>
 8007498:	0052      	lsls	r2, r2, #1
 800749a:	3101      	adds	r1, #1
 800749c:	e7f0      	b.n	8007480 <__s2b+0x18>
 800749e:	9b08      	ldr	r3, [sp, #32]
 80074a0:	6143      	str	r3, [r0, #20]
 80074a2:	2d09      	cmp	r5, #9
 80074a4:	f04f 0301 	mov.w	r3, #1
 80074a8:	6103      	str	r3, [r0, #16]
 80074aa:	dd16      	ble.n	80074da <__s2b+0x72>
 80074ac:	f104 0909 	add.w	r9, r4, #9
 80074b0:	46c8      	mov	r8, r9
 80074b2:	442c      	add	r4, r5
 80074b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80074b8:	4601      	mov	r1, r0
 80074ba:	3b30      	subs	r3, #48	; 0x30
 80074bc:	220a      	movs	r2, #10
 80074be:	4630      	mov	r0, r6
 80074c0:	f7ff ff88 	bl	80073d4 <__multadd>
 80074c4:	45a0      	cmp	r8, r4
 80074c6:	d1f5      	bne.n	80074b4 <__s2b+0x4c>
 80074c8:	f1a5 0408 	sub.w	r4, r5, #8
 80074cc:	444c      	add	r4, r9
 80074ce:	1b2d      	subs	r5, r5, r4
 80074d0:	1963      	adds	r3, r4, r5
 80074d2:	42bb      	cmp	r3, r7
 80074d4:	db04      	blt.n	80074e0 <__s2b+0x78>
 80074d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074da:	340a      	adds	r4, #10
 80074dc:	2509      	movs	r5, #9
 80074de:	e7f6      	b.n	80074ce <__s2b+0x66>
 80074e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80074e4:	4601      	mov	r1, r0
 80074e6:	3b30      	subs	r3, #48	; 0x30
 80074e8:	220a      	movs	r2, #10
 80074ea:	4630      	mov	r0, r6
 80074ec:	f7ff ff72 	bl	80073d4 <__multadd>
 80074f0:	e7ee      	b.n	80074d0 <__s2b+0x68>
 80074f2:	bf00      	nop
 80074f4:	08009d4c 	.word	0x08009d4c
 80074f8:	08009ddc 	.word	0x08009ddc

080074fc <__hi0bits>:
 80074fc:	0c02      	lsrs	r2, r0, #16
 80074fe:	0412      	lsls	r2, r2, #16
 8007500:	4603      	mov	r3, r0
 8007502:	b9ca      	cbnz	r2, 8007538 <__hi0bits+0x3c>
 8007504:	0403      	lsls	r3, r0, #16
 8007506:	2010      	movs	r0, #16
 8007508:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800750c:	bf04      	itt	eq
 800750e:	021b      	lsleq	r3, r3, #8
 8007510:	3008      	addeq	r0, #8
 8007512:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007516:	bf04      	itt	eq
 8007518:	011b      	lsleq	r3, r3, #4
 800751a:	3004      	addeq	r0, #4
 800751c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007520:	bf04      	itt	eq
 8007522:	009b      	lsleq	r3, r3, #2
 8007524:	3002      	addeq	r0, #2
 8007526:	2b00      	cmp	r3, #0
 8007528:	db05      	blt.n	8007536 <__hi0bits+0x3a>
 800752a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800752e:	f100 0001 	add.w	r0, r0, #1
 8007532:	bf08      	it	eq
 8007534:	2020      	moveq	r0, #32
 8007536:	4770      	bx	lr
 8007538:	2000      	movs	r0, #0
 800753a:	e7e5      	b.n	8007508 <__hi0bits+0xc>

0800753c <__lo0bits>:
 800753c:	6803      	ldr	r3, [r0, #0]
 800753e:	4602      	mov	r2, r0
 8007540:	f013 0007 	ands.w	r0, r3, #7
 8007544:	d00b      	beq.n	800755e <__lo0bits+0x22>
 8007546:	07d9      	lsls	r1, r3, #31
 8007548:	d422      	bmi.n	8007590 <__lo0bits+0x54>
 800754a:	0798      	lsls	r0, r3, #30
 800754c:	bf49      	itett	mi
 800754e:	085b      	lsrmi	r3, r3, #1
 8007550:	089b      	lsrpl	r3, r3, #2
 8007552:	2001      	movmi	r0, #1
 8007554:	6013      	strmi	r3, [r2, #0]
 8007556:	bf5c      	itt	pl
 8007558:	6013      	strpl	r3, [r2, #0]
 800755a:	2002      	movpl	r0, #2
 800755c:	4770      	bx	lr
 800755e:	b299      	uxth	r1, r3
 8007560:	b909      	cbnz	r1, 8007566 <__lo0bits+0x2a>
 8007562:	0c1b      	lsrs	r3, r3, #16
 8007564:	2010      	movs	r0, #16
 8007566:	f013 0fff 	tst.w	r3, #255	; 0xff
 800756a:	bf04      	itt	eq
 800756c:	0a1b      	lsreq	r3, r3, #8
 800756e:	3008      	addeq	r0, #8
 8007570:	0719      	lsls	r1, r3, #28
 8007572:	bf04      	itt	eq
 8007574:	091b      	lsreq	r3, r3, #4
 8007576:	3004      	addeq	r0, #4
 8007578:	0799      	lsls	r1, r3, #30
 800757a:	bf04      	itt	eq
 800757c:	089b      	lsreq	r3, r3, #2
 800757e:	3002      	addeq	r0, #2
 8007580:	07d9      	lsls	r1, r3, #31
 8007582:	d403      	bmi.n	800758c <__lo0bits+0x50>
 8007584:	085b      	lsrs	r3, r3, #1
 8007586:	f100 0001 	add.w	r0, r0, #1
 800758a:	d003      	beq.n	8007594 <__lo0bits+0x58>
 800758c:	6013      	str	r3, [r2, #0]
 800758e:	4770      	bx	lr
 8007590:	2000      	movs	r0, #0
 8007592:	4770      	bx	lr
 8007594:	2020      	movs	r0, #32
 8007596:	4770      	bx	lr

08007598 <__i2b>:
 8007598:	b510      	push	{r4, lr}
 800759a:	460c      	mov	r4, r1
 800759c:	2101      	movs	r1, #1
 800759e:	f7ff feb7 	bl	8007310 <_Balloc>
 80075a2:	4602      	mov	r2, r0
 80075a4:	b928      	cbnz	r0, 80075b2 <__i2b+0x1a>
 80075a6:	4b05      	ldr	r3, [pc, #20]	; (80075bc <__i2b+0x24>)
 80075a8:	4805      	ldr	r0, [pc, #20]	; (80075c0 <__i2b+0x28>)
 80075aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80075ae:	f001 f9cd 	bl	800894c <__assert_func>
 80075b2:	2301      	movs	r3, #1
 80075b4:	6144      	str	r4, [r0, #20]
 80075b6:	6103      	str	r3, [r0, #16]
 80075b8:	bd10      	pop	{r4, pc}
 80075ba:	bf00      	nop
 80075bc:	08009d4c 	.word	0x08009d4c
 80075c0:	08009ddc 	.word	0x08009ddc

080075c4 <__multiply>:
 80075c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c8:	4614      	mov	r4, r2
 80075ca:	690a      	ldr	r2, [r1, #16]
 80075cc:	6923      	ldr	r3, [r4, #16]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	bfb8      	it	lt
 80075d2:	460b      	movlt	r3, r1
 80075d4:	460d      	mov	r5, r1
 80075d6:	bfbc      	itt	lt
 80075d8:	4625      	movlt	r5, r4
 80075da:	461c      	movlt	r4, r3
 80075dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80075e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80075e4:	68ab      	ldr	r3, [r5, #8]
 80075e6:	6869      	ldr	r1, [r5, #4]
 80075e8:	eb0a 0709 	add.w	r7, sl, r9
 80075ec:	42bb      	cmp	r3, r7
 80075ee:	b085      	sub	sp, #20
 80075f0:	bfb8      	it	lt
 80075f2:	3101      	addlt	r1, #1
 80075f4:	f7ff fe8c 	bl	8007310 <_Balloc>
 80075f8:	b930      	cbnz	r0, 8007608 <__multiply+0x44>
 80075fa:	4602      	mov	r2, r0
 80075fc:	4b42      	ldr	r3, [pc, #264]	; (8007708 <__multiply+0x144>)
 80075fe:	4843      	ldr	r0, [pc, #268]	; (800770c <__multiply+0x148>)
 8007600:	f240 115d 	movw	r1, #349	; 0x15d
 8007604:	f001 f9a2 	bl	800894c <__assert_func>
 8007608:	f100 0614 	add.w	r6, r0, #20
 800760c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007610:	4633      	mov	r3, r6
 8007612:	2200      	movs	r2, #0
 8007614:	4543      	cmp	r3, r8
 8007616:	d31e      	bcc.n	8007656 <__multiply+0x92>
 8007618:	f105 0c14 	add.w	ip, r5, #20
 800761c:	f104 0314 	add.w	r3, r4, #20
 8007620:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007624:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007628:	9202      	str	r2, [sp, #8]
 800762a:	ebac 0205 	sub.w	r2, ip, r5
 800762e:	3a15      	subs	r2, #21
 8007630:	f022 0203 	bic.w	r2, r2, #3
 8007634:	3204      	adds	r2, #4
 8007636:	f105 0115 	add.w	r1, r5, #21
 800763a:	458c      	cmp	ip, r1
 800763c:	bf38      	it	cc
 800763e:	2204      	movcc	r2, #4
 8007640:	9201      	str	r2, [sp, #4]
 8007642:	9a02      	ldr	r2, [sp, #8]
 8007644:	9303      	str	r3, [sp, #12]
 8007646:	429a      	cmp	r2, r3
 8007648:	d808      	bhi.n	800765c <__multiply+0x98>
 800764a:	2f00      	cmp	r7, #0
 800764c:	dc55      	bgt.n	80076fa <__multiply+0x136>
 800764e:	6107      	str	r7, [r0, #16]
 8007650:	b005      	add	sp, #20
 8007652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007656:	f843 2b04 	str.w	r2, [r3], #4
 800765a:	e7db      	b.n	8007614 <__multiply+0x50>
 800765c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007660:	f1ba 0f00 	cmp.w	sl, #0
 8007664:	d020      	beq.n	80076a8 <__multiply+0xe4>
 8007666:	f105 0e14 	add.w	lr, r5, #20
 800766a:	46b1      	mov	r9, r6
 800766c:	2200      	movs	r2, #0
 800766e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007672:	f8d9 b000 	ldr.w	fp, [r9]
 8007676:	b2a1      	uxth	r1, r4
 8007678:	fa1f fb8b 	uxth.w	fp, fp
 800767c:	fb0a b101 	mla	r1, sl, r1, fp
 8007680:	4411      	add	r1, r2
 8007682:	f8d9 2000 	ldr.w	r2, [r9]
 8007686:	0c24      	lsrs	r4, r4, #16
 8007688:	0c12      	lsrs	r2, r2, #16
 800768a:	fb0a 2404 	mla	r4, sl, r4, r2
 800768e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007692:	b289      	uxth	r1, r1
 8007694:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007698:	45f4      	cmp	ip, lr
 800769a:	f849 1b04 	str.w	r1, [r9], #4
 800769e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80076a2:	d8e4      	bhi.n	800766e <__multiply+0xaa>
 80076a4:	9901      	ldr	r1, [sp, #4]
 80076a6:	5072      	str	r2, [r6, r1]
 80076a8:	9a03      	ldr	r2, [sp, #12]
 80076aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80076ae:	3304      	adds	r3, #4
 80076b0:	f1b9 0f00 	cmp.w	r9, #0
 80076b4:	d01f      	beq.n	80076f6 <__multiply+0x132>
 80076b6:	6834      	ldr	r4, [r6, #0]
 80076b8:	f105 0114 	add.w	r1, r5, #20
 80076bc:	46b6      	mov	lr, r6
 80076be:	f04f 0a00 	mov.w	sl, #0
 80076c2:	880a      	ldrh	r2, [r1, #0]
 80076c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80076c8:	fb09 b202 	mla	r2, r9, r2, fp
 80076cc:	4492      	add	sl, r2
 80076ce:	b2a4      	uxth	r4, r4
 80076d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80076d4:	f84e 4b04 	str.w	r4, [lr], #4
 80076d8:	f851 4b04 	ldr.w	r4, [r1], #4
 80076dc:	f8be 2000 	ldrh.w	r2, [lr]
 80076e0:	0c24      	lsrs	r4, r4, #16
 80076e2:	fb09 2404 	mla	r4, r9, r4, r2
 80076e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80076ea:	458c      	cmp	ip, r1
 80076ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80076f0:	d8e7      	bhi.n	80076c2 <__multiply+0xfe>
 80076f2:	9a01      	ldr	r2, [sp, #4]
 80076f4:	50b4      	str	r4, [r6, r2]
 80076f6:	3604      	adds	r6, #4
 80076f8:	e7a3      	b.n	8007642 <__multiply+0x7e>
 80076fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1a5      	bne.n	800764e <__multiply+0x8a>
 8007702:	3f01      	subs	r7, #1
 8007704:	e7a1      	b.n	800764a <__multiply+0x86>
 8007706:	bf00      	nop
 8007708:	08009d4c 	.word	0x08009d4c
 800770c:	08009ddc 	.word	0x08009ddc

08007710 <__pow5mult>:
 8007710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007714:	4615      	mov	r5, r2
 8007716:	f012 0203 	ands.w	r2, r2, #3
 800771a:	4606      	mov	r6, r0
 800771c:	460f      	mov	r7, r1
 800771e:	d007      	beq.n	8007730 <__pow5mult+0x20>
 8007720:	4c25      	ldr	r4, [pc, #148]	; (80077b8 <__pow5mult+0xa8>)
 8007722:	3a01      	subs	r2, #1
 8007724:	2300      	movs	r3, #0
 8007726:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800772a:	f7ff fe53 	bl	80073d4 <__multadd>
 800772e:	4607      	mov	r7, r0
 8007730:	10ad      	asrs	r5, r5, #2
 8007732:	d03d      	beq.n	80077b0 <__pow5mult+0xa0>
 8007734:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007736:	b97c      	cbnz	r4, 8007758 <__pow5mult+0x48>
 8007738:	2010      	movs	r0, #16
 800773a:	f7ff fdc1 	bl	80072c0 <malloc>
 800773e:	4602      	mov	r2, r0
 8007740:	6270      	str	r0, [r6, #36]	; 0x24
 8007742:	b928      	cbnz	r0, 8007750 <__pow5mult+0x40>
 8007744:	4b1d      	ldr	r3, [pc, #116]	; (80077bc <__pow5mult+0xac>)
 8007746:	481e      	ldr	r0, [pc, #120]	; (80077c0 <__pow5mult+0xb0>)
 8007748:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800774c:	f001 f8fe 	bl	800894c <__assert_func>
 8007750:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007754:	6004      	str	r4, [r0, #0]
 8007756:	60c4      	str	r4, [r0, #12]
 8007758:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800775c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007760:	b94c      	cbnz	r4, 8007776 <__pow5mult+0x66>
 8007762:	f240 2171 	movw	r1, #625	; 0x271
 8007766:	4630      	mov	r0, r6
 8007768:	f7ff ff16 	bl	8007598 <__i2b>
 800776c:	2300      	movs	r3, #0
 800776e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007772:	4604      	mov	r4, r0
 8007774:	6003      	str	r3, [r0, #0]
 8007776:	f04f 0900 	mov.w	r9, #0
 800777a:	07eb      	lsls	r3, r5, #31
 800777c:	d50a      	bpl.n	8007794 <__pow5mult+0x84>
 800777e:	4639      	mov	r1, r7
 8007780:	4622      	mov	r2, r4
 8007782:	4630      	mov	r0, r6
 8007784:	f7ff ff1e 	bl	80075c4 <__multiply>
 8007788:	4639      	mov	r1, r7
 800778a:	4680      	mov	r8, r0
 800778c:	4630      	mov	r0, r6
 800778e:	f7ff fdff 	bl	8007390 <_Bfree>
 8007792:	4647      	mov	r7, r8
 8007794:	106d      	asrs	r5, r5, #1
 8007796:	d00b      	beq.n	80077b0 <__pow5mult+0xa0>
 8007798:	6820      	ldr	r0, [r4, #0]
 800779a:	b938      	cbnz	r0, 80077ac <__pow5mult+0x9c>
 800779c:	4622      	mov	r2, r4
 800779e:	4621      	mov	r1, r4
 80077a0:	4630      	mov	r0, r6
 80077a2:	f7ff ff0f 	bl	80075c4 <__multiply>
 80077a6:	6020      	str	r0, [r4, #0]
 80077a8:	f8c0 9000 	str.w	r9, [r0]
 80077ac:	4604      	mov	r4, r0
 80077ae:	e7e4      	b.n	800777a <__pow5mult+0x6a>
 80077b0:	4638      	mov	r0, r7
 80077b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077b6:	bf00      	nop
 80077b8:	08009f30 	.word	0x08009f30
 80077bc:	08009cd6 	.word	0x08009cd6
 80077c0:	08009ddc 	.word	0x08009ddc

080077c4 <__lshift>:
 80077c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077c8:	460c      	mov	r4, r1
 80077ca:	6849      	ldr	r1, [r1, #4]
 80077cc:	6923      	ldr	r3, [r4, #16]
 80077ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80077d2:	68a3      	ldr	r3, [r4, #8]
 80077d4:	4607      	mov	r7, r0
 80077d6:	4691      	mov	r9, r2
 80077d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077dc:	f108 0601 	add.w	r6, r8, #1
 80077e0:	42b3      	cmp	r3, r6
 80077e2:	db0b      	blt.n	80077fc <__lshift+0x38>
 80077e4:	4638      	mov	r0, r7
 80077e6:	f7ff fd93 	bl	8007310 <_Balloc>
 80077ea:	4605      	mov	r5, r0
 80077ec:	b948      	cbnz	r0, 8007802 <__lshift+0x3e>
 80077ee:	4602      	mov	r2, r0
 80077f0:	4b28      	ldr	r3, [pc, #160]	; (8007894 <__lshift+0xd0>)
 80077f2:	4829      	ldr	r0, [pc, #164]	; (8007898 <__lshift+0xd4>)
 80077f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80077f8:	f001 f8a8 	bl	800894c <__assert_func>
 80077fc:	3101      	adds	r1, #1
 80077fe:	005b      	lsls	r3, r3, #1
 8007800:	e7ee      	b.n	80077e0 <__lshift+0x1c>
 8007802:	2300      	movs	r3, #0
 8007804:	f100 0114 	add.w	r1, r0, #20
 8007808:	f100 0210 	add.w	r2, r0, #16
 800780c:	4618      	mov	r0, r3
 800780e:	4553      	cmp	r3, sl
 8007810:	db33      	blt.n	800787a <__lshift+0xb6>
 8007812:	6920      	ldr	r0, [r4, #16]
 8007814:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007818:	f104 0314 	add.w	r3, r4, #20
 800781c:	f019 091f 	ands.w	r9, r9, #31
 8007820:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007824:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007828:	d02b      	beq.n	8007882 <__lshift+0xbe>
 800782a:	f1c9 0e20 	rsb	lr, r9, #32
 800782e:	468a      	mov	sl, r1
 8007830:	2200      	movs	r2, #0
 8007832:	6818      	ldr	r0, [r3, #0]
 8007834:	fa00 f009 	lsl.w	r0, r0, r9
 8007838:	4302      	orrs	r2, r0
 800783a:	f84a 2b04 	str.w	r2, [sl], #4
 800783e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007842:	459c      	cmp	ip, r3
 8007844:	fa22 f20e 	lsr.w	r2, r2, lr
 8007848:	d8f3      	bhi.n	8007832 <__lshift+0x6e>
 800784a:	ebac 0304 	sub.w	r3, ip, r4
 800784e:	3b15      	subs	r3, #21
 8007850:	f023 0303 	bic.w	r3, r3, #3
 8007854:	3304      	adds	r3, #4
 8007856:	f104 0015 	add.w	r0, r4, #21
 800785a:	4584      	cmp	ip, r0
 800785c:	bf38      	it	cc
 800785e:	2304      	movcc	r3, #4
 8007860:	50ca      	str	r2, [r1, r3]
 8007862:	b10a      	cbz	r2, 8007868 <__lshift+0xa4>
 8007864:	f108 0602 	add.w	r6, r8, #2
 8007868:	3e01      	subs	r6, #1
 800786a:	4638      	mov	r0, r7
 800786c:	612e      	str	r6, [r5, #16]
 800786e:	4621      	mov	r1, r4
 8007870:	f7ff fd8e 	bl	8007390 <_Bfree>
 8007874:	4628      	mov	r0, r5
 8007876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800787a:	f842 0f04 	str.w	r0, [r2, #4]!
 800787e:	3301      	adds	r3, #1
 8007880:	e7c5      	b.n	800780e <__lshift+0x4a>
 8007882:	3904      	subs	r1, #4
 8007884:	f853 2b04 	ldr.w	r2, [r3], #4
 8007888:	f841 2f04 	str.w	r2, [r1, #4]!
 800788c:	459c      	cmp	ip, r3
 800788e:	d8f9      	bhi.n	8007884 <__lshift+0xc0>
 8007890:	e7ea      	b.n	8007868 <__lshift+0xa4>
 8007892:	bf00      	nop
 8007894:	08009d4c 	.word	0x08009d4c
 8007898:	08009ddc 	.word	0x08009ddc

0800789c <__mcmp>:
 800789c:	690a      	ldr	r2, [r1, #16]
 800789e:	4603      	mov	r3, r0
 80078a0:	6900      	ldr	r0, [r0, #16]
 80078a2:	1a80      	subs	r0, r0, r2
 80078a4:	b530      	push	{r4, r5, lr}
 80078a6:	d10d      	bne.n	80078c4 <__mcmp+0x28>
 80078a8:	3314      	adds	r3, #20
 80078aa:	3114      	adds	r1, #20
 80078ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80078b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80078b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80078b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80078bc:	4295      	cmp	r5, r2
 80078be:	d002      	beq.n	80078c6 <__mcmp+0x2a>
 80078c0:	d304      	bcc.n	80078cc <__mcmp+0x30>
 80078c2:	2001      	movs	r0, #1
 80078c4:	bd30      	pop	{r4, r5, pc}
 80078c6:	42a3      	cmp	r3, r4
 80078c8:	d3f4      	bcc.n	80078b4 <__mcmp+0x18>
 80078ca:	e7fb      	b.n	80078c4 <__mcmp+0x28>
 80078cc:	f04f 30ff 	mov.w	r0, #4294967295
 80078d0:	e7f8      	b.n	80078c4 <__mcmp+0x28>
	...

080078d4 <__mdiff>:
 80078d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d8:	460c      	mov	r4, r1
 80078da:	4606      	mov	r6, r0
 80078dc:	4611      	mov	r1, r2
 80078de:	4620      	mov	r0, r4
 80078e0:	4617      	mov	r7, r2
 80078e2:	f7ff ffdb 	bl	800789c <__mcmp>
 80078e6:	1e05      	subs	r5, r0, #0
 80078e8:	d111      	bne.n	800790e <__mdiff+0x3a>
 80078ea:	4629      	mov	r1, r5
 80078ec:	4630      	mov	r0, r6
 80078ee:	f7ff fd0f 	bl	8007310 <_Balloc>
 80078f2:	4602      	mov	r2, r0
 80078f4:	b928      	cbnz	r0, 8007902 <__mdiff+0x2e>
 80078f6:	4b3a      	ldr	r3, [pc, #232]	; (80079e0 <__mdiff+0x10c>)
 80078f8:	f240 2132 	movw	r1, #562	; 0x232
 80078fc:	4839      	ldr	r0, [pc, #228]	; (80079e4 <__mdiff+0x110>)
 80078fe:	f001 f825 	bl	800894c <__assert_func>
 8007902:	2301      	movs	r3, #1
 8007904:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007908:	4610      	mov	r0, r2
 800790a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790e:	bfa4      	itt	ge
 8007910:	463b      	movge	r3, r7
 8007912:	4627      	movge	r7, r4
 8007914:	4630      	mov	r0, r6
 8007916:	6879      	ldr	r1, [r7, #4]
 8007918:	bfa6      	itte	ge
 800791a:	461c      	movge	r4, r3
 800791c:	2500      	movge	r5, #0
 800791e:	2501      	movlt	r5, #1
 8007920:	f7ff fcf6 	bl	8007310 <_Balloc>
 8007924:	4602      	mov	r2, r0
 8007926:	b918      	cbnz	r0, 8007930 <__mdiff+0x5c>
 8007928:	4b2d      	ldr	r3, [pc, #180]	; (80079e0 <__mdiff+0x10c>)
 800792a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800792e:	e7e5      	b.n	80078fc <__mdiff+0x28>
 8007930:	693e      	ldr	r6, [r7, #16]
 8007932:	60c5      	str	r5, [r0, #12]
 8007934:	6925      	ldr	r5, [r4, #16]
 8007936:	f107 0114 	add.w	r1, r7, #20
 800793a:	f100 0e14 	add.w	lr, r0, #20
 800793e:	f104 0914 	add.w	r9, r4, #20
 8007942:	f107 0010 	add.w	r0, r7, #16
 8007946:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800794a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800794e:	46f2      	mov	sl, lr
 8007950:	2700      	movs	r7, #0
 8007952:	f859 3b04 	ldr.w	r3, [r9], #4
 8007956:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800795a:	fa1f f883 	uxth.w	r8, r3
 800795e:	fa17 f78b 	uxtah	r7, r7, fp
 8007962:	0c1b      	lsrs	r3, r3, #16
 8007964:	eba7 0808 	sub.w	r8, r7, r8
 8007968:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800796c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007970:	fa1f f888 	uxth.w	r8, r8
 8007974:	141f      	asrs	r7, r3, #16
 8007976:	454d      	cmp	r5, r9
 8007978:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800797c:	f84a 3b04 	str.w	r3, [sl], #4
 8007980:	d8e7      	bhi.n	8007952 <__mdiff+0x7e>
 8007982:	1b2b      	subs	r3, r5, r4
 8007984:	3b15      	subs	r3, #21
 8007986:	f023 0303 	bic.w	r3, r3, #3
 800798a:	3304      	adds	r3, #4
 800798c:	3415      	adds	r4, #21
 800798e:	42a5      	cmp	r5, r4
 8007990:	bf38      	it	cc
 8007992:	2304      	movcc	r3, #4
 8007994:	4419      	add	r1, r3
 8007996:	4473      	add	r3, lr
 8007998:	469e      	mov	lr, r3
 800799a:	460d      	mov	r5, r1
 800799c:	4565      	cmp	r5, ip
 800799e:	d30e      	bcc.n	80079be <__mdiff+0xea>
 80079a0:	f10c 0003 	add.w	r0, ip, #3
 80079a4:	1a40      	subs	r0, r0, r1
 80079a6:	f020 0003 	bic.w	r0, r0, #3
 80079aa:	3903      	subs	r1, #3
 80079ac:	458c      	cmp	ip, r1
 80079ae:	bf38      	it	cc
 80079b0:	2000      	movcc	r0, #0
 80079b2:	4418      	add	r0, r3
 80079b4:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 80079b8:	b17b      	cbz	r3, 80079da <__mdiff+0x106>
 80079ba:	6116      	str	r6, [r2, #16]
 80079bc:	e7a4      	b.n	8007908 <__mdiff+0x34>
 80079be:	f855 8b04 	ldr.w	r8, [r5], #4
 80079c2:	fa17 f488 	uxtah	r4, r7, r8
 80079c6:	1420      	asrs	r0, r4, #16
 80079c8:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80079cc:	b2a4      	uxth	r4, r4
 80079ce:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 80079d2:	f84e 4b04 	str.w	r4, [lr], #4
 80079d6:	1407      	asrs	r7, r0, #16
 80079d8:	e7e0      	b.n	800799c <__mdiff+0xc8>
 80079da:	3e01      	subs	r6, #1
 80079dc:	e7ea      	b.n	80079b4 <__mdiff+0xe0>
 80079de:	bf00      	nop
 80079e0:	08009d4c 	.word	0x08009d4c
 80079e4:	08009ddc 	.word	0x08009ddc

080079e8 <__ulp>:
 80079e8:	4b11      	ldr	r3, [pc, #68]	; (8007a30 <__ulp+0x48>)
 80079ea:	400b      	ands	r3, r1
 80079ec:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	dd02      	ble.n	80079fa <__ulp+0x12>
 80079f4:	2000      	movs	r0, #0
 80079f6:	4619      	mov	r1, r3
 80079f8:	4770      	bx	lr
 80079fa:	425b      	negs	r3, r3
 80079fc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007a00:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007a04:	f04f 0000 	mov.w	r0, #0
 8007a08:	f04f 0100 	mov.w	r1, #0
 8007a0c:	da04      	bge.n	8007a18 <__ulp+0x30>
 8007a0e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a12:	fa43 f102 	asr.w	r1, r3, r2
 8007a16:	4770      	bx	lr
 8007a18:	f1a2 0314 	sub.w	r3, r2, #20
 8007a1c:	2b1e      	cmp	r3, #30
 8007a1e:	bfda      	itte	le
 8007a20:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007a24:	fa22 f303 	lsrle.w	r3, r2, r3
 8007a28:	2301      	movgt	r3, #1
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	7ff00000 	.word	0x7ff00000

08007a34 <__b2d>:
 8007a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a38:	6907      	ldr	r7, [r0, #16]
 8007a3a:	f100 0914 	add.w	r9, r0, #20
 8007a3e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007a42:	f1a7 0804 	sub.w	r8, r7, #4
 8007a46:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	f7ff fd56 	bl	80074fc <__hi0bits>
 8007a50:	f1c0 0320 	rsb	r3, r0, #32
 8007a54:	280a      	cmp	r0, #10
 8007a56:	600b      	str	r3, [r1, #0]
 8007a58:	491f      	ldr	r1, [pc, #124]	; (8007ad8 <__b2d+0xa4>)
 8007a5a:	dc17      	bgt.n	8007a8c <__b2d+0x58>
 8007a5c:	f1c0 0c0b 	rsb	ip, r0, #11
 8007a60:	45c1      	cmp	r9, r8
 8007a62:	fa26 f30c 	lsr.w	r3, r6, ip
 8007a66:	bf38      	it	cc
 8007a68:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007a6c:	ea43 0501 	orr.w	r5, r3, r1
 8007a70:	bf28      	it	cs
 8007a72:	2200      	movcs	r2, #0
 8007a74:	f100 0315 	add.w	r3, r0, #21
 8007a78:	fa06 f303 	lsl.w	r3, r6, r3
 8007a7c:	fa22 f20c 	lsr.w	r2, r2, ip
 8007a80:	ea43 0402 	orr.w	r4, r3, r2
 8007a84:	4620      	mov	r0, r4
 8007a86:	4629      	mov	r1, r5
 8007a88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a8c:	45c1      	cmp	r9, r8
 8007a8e:	bf3a      	itte	cc
 8007a90:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007a94:	f1a7 0808 	subcc.w	r8, r7, #8
 8007a98:	2200      	movcs	r2, #0
 8007a9a:	f1b0 030b 	subs.w	r3, r0, #11
 8007a9e:	d016      	beq.n	8007ace <__b2d+0x9a>
 8007aa0:	f1c3 0720 	rsb	r7, r3, #32
 8007aa4:	fa22 f107 	lsr.w	r1, r2, r7
 8007aa8:	45c8      	cmp	r8, r9
 8007aaa:	fa06 f603 	lsl.w	r6, r6, r3
 8007aae:	ea46 0601 	orr.w	r6, r6, r1
 8007ab2:	bf8c      	ite	hi
 8007ab4:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007ab8:	2100      	movls	r1, #0
 8007aba:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007abe:	fa02 f003 	lsl.w	r0, r2, r3
 8007ac2:	40f9      	lsrs	r1, r7
 8007ac4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007ac8:	ea40 0401 	orr.w	r4, r0, r1
 8007acc:	e7da      	b.n	8007a84 <__b2d+0x50>
 8007ace:	ea46 0501 	orr.w	r5, r6, r1
 8007ad2:	4614      	mov	r4, r2
 8007ad4:	e7d6      	b.n	8007a84 <__b2d+0x50>
 8007ad6:	bf00      	nop
 8007ad8:	3ff00000 	.word	0x3ff00000

08007adc <__d2b>:
 8007adc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007ae0:	2101      	movs	r1, #1
 8007ae2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007ae6:	4690      	mov	r8, r2
 8007ae8:	461d      	mov	r5, r3
 8007aea:	f7ff fc11 	bl	8007310 <_Balloc>
 8007aee:	4604      	mov	r4, r0
 8007af0:	b930      	cbnz	r0, 8007b00 <__d2b+0x24>
 8007af2:	4602      	mov	r2, r0
 8007af4:	4b25      	ldr	r3, [pc, #148]	; (8007b8c <__d2b+0xb0>)
 8007af6:	4826      	ldr	r0, [pc, #152]	; (8007b90 <__d2b+0xb4>)
 8007af8:	f240 310a 	movw	r1, #778	; 0x30a
 8007afc:	f000 ff26 	bl	800894c <__assert_func>
 8007b00:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007b04:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007b08:	bb2d      	cbnz	r5, 8007b56 <__d2b+0x7a>
 8007b0a:	9301      	str	r3, [sp, #4]
 8007b0c:	f1b8 0300 	subs.w	r3, r8, #0
 8007b10:	d026      	beq.n	8007b60 <__d2b+0x84>
 8007b12:	4668      	mov	r0, sp
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	f7ff fd11 	bl	800753c <__lo0bits>
 8007b1a:	9900      	ldr	r1, [sp, #0]
 8007b1c:	b1f0      	cbz	r0, 8007b5c <__d2b+0x80>
 8007b1e:	9a01      	ldr	r2, [sp, #4]
 8007b20:	f1c0 0320 	rsb	r3, r0, #32
 8007b24:	fa02 f303 	lsl.w	r3, r2, r3
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	40c2      	lsrs	r2, r0
 8007b2c:	6163      	str	r3, [r4, #20]
 8007b2e:	9201      	str	r2, [sp, #4]
 8007b30:	9b01      	ldr	r3, [sp, #4]
 8007b32:	61a3      	str	r3, [r4, #24]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	bf14      	ite	ne
 8007b38:	2102      	movne	r1, #2
 8007b3a:	2101      	moveq	r1, #1
 8007b3c:	6121      	str	r1, [r4, #16]
 8007b3e:	b1c5      	cbz	r5, 8007b72 <__d2b+0x96>
 8007b40:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b44:	4405      	add	r5, r0
 8007b46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b4a:	603d      	str	r5, [r7, #0]
 8007b4c:	6030      	str	r0, [r6, #0]
 8007b4e:	4620      	mov	r0, r4
 8007b50:	b002      	add	sp, #8
 8007b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b5a:	e7d6      	b.n	8007b0a <__d2b+0x2e>
 8007b5c:	6161      	str	r1, [r4, #20]
 8007b5e:	e7e7      	b.n	8007b30 <__d2b+0x54>
 8007b60:	a801      	add	r0, sp, #4
 8007b62:	f7ff fceb 	bl	800753c <__lo0bits>
 8007b66:	9b01      	ldr	r3, [sp, #4]
 8007b68:	6163      	str	r3, [r4, #20]
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	6121      	str	r1, [r4, #16]
 8007b6e:	3020      	adds	r0, #32
 8007b70:	e7e5      	b.n	8007b3e <__d2b+0x62>
 8007b72:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007b76:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b7a:	6038      	str	r0, [r7, #0]
 8007b7c:	6918      	ldr	r0, [r3, #16]
 8007b7e:	f7ff fcbd 	bl	80074fc <__hi0bits>
 8007b82:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007b86:	6031      	str	r1, [r6, #0]
 8007b88:	e7e1      	b.n	8007b4e <__d2b+0x72>
 8007b8a:	bf00      	nop
 8007b8c:	08009d4c 	.word	0x08009d4c
 8007b90:	08009ddc 	.word	0x08009ddc

08007b94 <__ratio>:
 8007b94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b98:	4688      	mov	r8, r1
 8007b9a:	4669      	mov	r1, sp
 8007b9c:	4681      	mov	r9, r0
 8007b9e:	f7ff ff49 	bl	8007a34 <__b2d>
 8007ba2:	460f      	mov	r7, r1
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	460d      	mov	r5, r1
 8007ba8:	4640      	mov	r0, r8
 8007baa:	a901      	add	r1, sp, #4
 8007bac:	f7ff ff42 	bl	8007a34 <__b2d>
 8007bb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007bb4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007bb8:	eba3 0c02 	sub.w	ip, r3, r2
 8007bbc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007bc0:	1a9b      	subs	r3, r3, r2
 8007bc2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	bfd5      	itete	le
 8007bca:	460a      	movle	r2, r1
 8007bcc:	462a      	movgt	r2, r5
 8007bce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007bd2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007bd6:	468b      	mov	fp, r1
 8007bd8:	bfd8      	it	le
 8007bda:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007bde:	465b      	mov	r3, fp
 8007be0:	4602      	mov	r2, r0
 8007be2:	4639      	mov	r1, r7
 8007be4:	4620      	mov	r0, r4
 8007be6:	f7f8 fe49 	bl	800087c <__aeabi_ddiv>
 8007bea:	b003      	add	sp, #12
 8007bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007bf0 <__copybits>:
 8007bf0:	3901      	subs	r1, #1
 8007bf2:	b570      	push	{r4, r5, r6, lr}
 8007bf4:	1149      	asrs	r1, r1, #5
 8007bf6:	6914      	ldr	r4, [r2, #16]
 8007bf8:	3101      	adds	r1, #1
 8007bfa:	f102 0314 	add.w	r3, r2, #20
 8007bfe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007c02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007c06:	1f05      	subs	r5, r0, #4
 8007c08:	42a3      	cmp	r3, r4
 8007c0a:	d30c      	bcc.n	8007c26 <__copybits+0x36>
 8007c0c:	1aa3      	subs	r3, r4, r2
 8007c0e:	3b11      	subs	r3, #17
 8007c10:	f023 0303 	bic.w	r3, r3, #3
 8007c14:	3211      	adds	r2, #17
 8007c16:	42a2      	cmp	r2, r4
 8007c18:	bf88      	it	hi
 8007c1a:	2300      	movhi	r3, #0
 8007c1c:	4418      	add	r0, r3
 8007c1e:	2300      	movs	r3, #0
 8007c20:	4288      	cmp	r0, r1
 8007c22:	d305      	bcc.n	8007c30 <__copybits+0x40>
 8007c24:	bd70      	pop	{r4, r5, r6, pc}
 8007c26:	f853 6b04 	ldr.w	r6, [r3], #4
 8007c2a:	f845 6f04 	str.w	r6, [r5, #4]!
 8007c2e:	e7eb      	b.n	8007c08 <__copybits+0x18>
 8007c30:	f840 3b04 	str.w	r3, [r0], #4
 8007c34:	e7f4      	b.n	8007c20 <__copybits+0x30>

08007c36 <__any_on>:
 8007c36:	f100 0214 	add.w	r2, r0, #20
 8007c3a:	6900      	ldr	r0, [r0, #16]
 8007c3c:	114b      	asrs	r3, r1, #5
 8007c3e:	4298      	cmp	r0, r3
 8007c40:	b510      	push	{r4, lr}
 8007c42:	db11      	blt.n	8007c68 <__any_on+0x32>
 8007c44:	dd0a      	ble.n	8007c5c <__any_on+0x26>
 8007c46:	f011 011f 	ands.w	r1, r1, #31
 8007c4a:	d007      	beq.n	8007c5c <__any_on+0x26>
 8007c4c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007c50:	fa24 f001 	lsr.w	r0, r4, r1
 8007c54:	fa00 f101 	lsl.w	r1, r0, r1
 8007c58:	428c      	cmp	r4, r1
 8007c5a:	d10b      	bne.n	8007c74 <__any_on+0x3e>
 8007c5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d803      	bhi.n	8007c6c <__any_on+0x36>
 8007c64:	2000      	movs	r0, #0
 8007c66:	bd10      	pop	{r4, pc}
 8007c68:	4603      	mov	r3, r0
 8007c6a:	e7f7      	b.n	8007c5c <__any_on+0x26>
 8007c6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c70:	2900      	cmp	r1, #0
 8007c72:	d0f5      	beq.n	8007c60 <__any_on+0x2a>
 8007c74:	2001      	movs	r0, #1
 8007c76:	e7f6      	b.n	8007c66 <__any_on+0x30>

08007c78 <_calloc_r>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	fb02 f501 	mul.w	r5, r2, r1
 8007c7e:	4629      	mov	r1, r5
 8007c80:	f000 f856 	bl	8007d30 <_malloc_r>
 8007c84:	4604      	mov	r4, r0
 8007c86:	b118      	cbz	r0, 8007c90 <_calloc_r+0x18>
 8007c88:	462a      	mov	r2, r5
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	f7fc fb58 	bl	8004340 <memset>
 8007c90:	4620      	mov	r0, r4
 8007c92:	bd38      	pop	{r3, r4, r5, pc}

08007c94 <_free_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	4605      	mov	r5, r0
 8007c98:	2900      	cmp	r1, #0
 8007c9a:	d045      	beq.n	8007d28 <_free_r+0x94>
 8007c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ca0:	1f0c      	subs	r4, r1, #4
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	bfb8      	it	lt
 8007ca6:	18e4      	addlt	r4, r4, r3
 8007ca8:	f001 f854 	bl	8008d54 <__malloc_lock>
 8007cac:	4a1f      	ldr	r2, [pc, #124]	; (8007d2c <_free_r+0x98>)
 8007cae:	6813      	ldr	r3, [r2, #0]
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	b933      	cbnz	r3, 8007cc2 <_free_r+0x2e>
 8007cb4:	6063      	str	r3, [r4, #4]
 8007cb6:	6014      	str	r4, [r2, #0]
 8007cb8:	4628      	mov	r0, r5
 8007cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cbe:	f001 b84f 	b.w	8008d60 <__malloc_unlock>
 8007cc2:	42a3      	cmp	r3, r4
 8007cc4:	d90b      	bls.n	8007cde <_free_r+0x4a>
 8007cc6:	6821      	ldr	r1, [r4, #0]
 8007cc8:	1862      	adds	r2, r4, r1
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	bf04      	itt	eq
 8007cce:	681a      	ldreq	r2, [r3, #0]
 8007cd0:	685b      	ldreq	r3, [r3, #4]
 8007cd2:	6063      	str	r3, [r4, #4]
 8007cd4:	bf04      	itt	eq
 8007cd6:	1852      	addeq	r2, r2, r1
 8007cd8:	6022      	streq	r2, [r4, #0]
 8007cda:	6004      	str	r4, [r0, #0]
 8007cdc:	e7ec      	b.n	8007cb8 <_free_r+0x24>
 8007cde:	461a      	mov	r2, r3
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	b10b      	cbz	r3, 8007ce8 <_free_r+0x54>
 8007ce4:	42a3      	cmp	r3, r4
 8007ce6:	d9fa      	bls.n	8007cde <_free_r+0x4a>
 8007ce8:	6811      	ldr	r1, [r2, #0]
 8007cea:	1850      	adds	r0, r2, r1
 8007cec:	42a0      	cmp	r0, r4
 8007cee:	d10b      	bne.n	8007d08 <_free_r+0x74>
 8007cf0:	6820      	ldr	r0, [r4, #0]
 8007cf2:	4401      	add	r1, r0
 8007cf4:	1850      	adds	r0, r2, r1
 8007cf6:	4283      	cmp	r3, r0
 8007cf8:	6011      	str	r1, [r2, #0]
 8007cfa:	d1dd      	bne.n	8007cb8 <_free_r+0x24>
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	6053      	str	r3, [r2, #4]
 8007d02:	4401      	add	r1, r0
 8007d04:	6011      	str	r1, [r2, #0]
 8007d06:	e7d7      	b.n	8007cb8 <_free_r+0x24>
 8007d08:	d902      	bls.n	8007d10 <_free_r+0x7c>
 8007d0a:	230c      	movs	r3, #12
 8007d0c:	602b      	str	r3, [r5, #0]
 8007d0e:	e7d3      	b.n	8007cb8 <_free_r+0x24>
 8007d10:	6820      	ldr	r0, [r4, #0]
 8007d12:	1821      	adds	r1, r4, r0
 8007d14:	428b      	cmp	r3, r1
 8007d16:	bf04      	itt	eq
 8007d18:	6819      	ldreq	r1, [r3, #0]
 8007d1a:	685b      	ldreq	r3, [r3, #4]
 8007d1c:	6063      	str	r3, [r4, #4]
 8007d1e:	bf04      	itt	eq
 8007d20:	1809      	addeq	r1, r1, r0
 8007d22:	6021      	streq	r1, [r4, #0]
 8007d24:	6054      	str	r4, [r2, #4]
 8007d26:	e7c7      	b.n	8007cb8 <_free_r+0x24>
 8007d28:	bd38      	pop	{r3, r4, r5, pc}
 8007d2a:	bf00      	nop
 8007d2c:	200003d8 	.word	0x200003d8

08007d30 <_malloc_r>:
 8007d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d32:	1ccd      	adds	r5, r1, #3
 8007d34:	f025 0503 	bic.w	r5, r5, #3
 8007d38:	3508      	adds	r5, #8
 8007d3a:	2d0c      	cmp	r5, #12
 8007d3c:	bf38      	it	cc
 8007d3e:	250c      	movcc	r5, #12
 8007d40:	2d00      	cmp	r5, #0
 8007d42:	4606      	mov	r6, r0
 8007d44:	db01      	blt.n	8007d4a <_malloc_r+0x1a>
 8007d46:	42a9      	cmp	r1, r5
 8007d48:	d903      	bls.n	8007d52 <_malloc_r+0x22>
 8007d4a:	230c      	movs	r3, #12
 8007d4c:	6033      	str	r3, [r6, #0]
 8007d4e:	2000      	movs	r0, #0
 8007d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d52:	f000 ffff 	bl	8008d54 <__malloc_lock>
 8007d56:	4921      	ldr	r1, [pc, #132]	; (8007ddc <_malloc_r+0xac>)
 8007d58:	680a      	ldr	r2, [r1, #0]
 8007d5a:	4614      	mov	r4, r2
 8007d5c:	b99c      	cbnz	r4, 8007d86 <_malloc_r+0x56>
 8007d5e:	4f20      	ldr	r7, [pc, #128]	; (8007de0 <_malloc_r+0xb0>)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	b923      	cbnz	r3, 8007d6e <_malloc_r+0x3e>
 8007d64:	4621      	mov	r1, r4
 8007d66:	4630      	mov	r0, r6
 8007d68:	f000 fcce 	bl	8008708 <_sbrk_r>
 8007d6c:	6038      	str	r0, [r7, #0]
 8007d6e:	4629      	mov	r1, r5
 8007d70:	4630      	mov	r0, r6
 8007d72:	f000 fcc9 	bl	8008708 <_sbrk_r>
 8007d76:	1c43      	adds	r3, r0, #1
 8007d78:	d123      	bne.n	8007dc2 <_malloc_r+0x92>
 8007d7a:	230c      	movs	r3, #12
 8007d7c:	6033      	str	r3, [r6, #0]
 8007d7e:	4630      	mov	r0, r6
 8007d80:	f000 ffee 	bl	8008d60 <__malloc_unlock>
 8007d84:	e7e3      	b.n	8007d4e <_malloc_r+0x1e>
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	1b5b      	subs	r3, r3, r5
 8007d8a:	d417      	bmi.n	8007dbc <_malloc_r+0x8c>
 8007d8c:	2b0b      	cmp	r3, #11
 8007d8e:	d903      	bls.n	8007d98 <_malloc_r+0x68>
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	441c      	add	r4, r3
 8007d94:	6025      	str	r5, [r4, #0]
 8007d96:	e004      	b.n	8007da2 <_malloc_r+0x72>
 8007d98:	6863      	ldr	r3, [r4, #4]
 8007d9a:	42a2      	cmp	r2, r4
 8007d9c:	bf0c      	ite	eq
 8007d9e:	600b      	streq	r3, [r1, #0]
 8007da0:	6053      	strne	r3, [r2, #4]
 8007da2:	4630      	mov	r0, r6
 8007da4:	f000 ffdc 	bl	8008d60 <__malloc_unlock>
 8007da8:	f104 000b 	add.w	r0, r4, #11
 8007dac:	1d23      	adds	r3, r4, #4
 8007dae:	f020 0007 	bic.w	r0, r0, #7
 8007db2:	1ac2      	subs	r2, r0, r3
 8007db4:	d0cc      	beq.n	8007d50 <_malloc_r+0x20>
 8007db6:	1a1b      	subs	r3, r3, r0
 8007db8:	50a3      	str	r3, [r4, r2]
 8007dba:	e7c9      	b.n	8007d50 <_malloc_r+0x20>
 8007dbc:	4622      	mov	r2, r4
 8007dbe:	6864      	ldr	r4, [r4, #4]
 8007dc0:	e7cc      	b.n	8007d5c <_malloc_r+0x2c>
 8007dc2:	1cc4      	adds	r4, r0, #3
 8007dc4:	f024 0403 	bic.w	r4, r4, #3
 8007dc8:	42a0      	cmp	r0, r4
 8007dca:	d0e3      	beq.n	8007d94 <_malloc_r+0x64>
 8007dcc:	1a21      	subs	r1, r4, r0
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f000 fc9a 	bl	8008708 <_sbrk_r>
 8007dd4:	3001      	adds	r0, #1
 8007dd6:	d1dd      	bne.n	8007d94 <_malloc_r+0x64>
 8007dd8:	e7cf      	b.n	8007d7a <_malloc_r+0x4a>
 8007dda:	bf00      	nop
 8007ddc:	200003d8 	.word	0x200003d8
 8007de0:	200003dc 	.word	0x200003dc

08007de4 <__ssputs_r>:
 8007de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de8:	688e      	ldr	r6, [r1, #8]
 8007dea:	429e      	cmp	r6, r3
 8007dec:	4682      	mov	sl, r0
 8007dee:	460c      	mov	r4, r1
 8007df0:	4690      	mov	r8, r2
 8007df2:	461f      	mov	r7, r3
 8007df4:	d838      	bhi.n	8007e68 <__ssputs_r+0x84>
 8007df6:	898a      	ldrh	r2, [r1, #12]
 8007df8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007dfc:	d032      	beq.n	8007e64 <__ssputs_r+0x80>
 8007dfe:	6825      	ldr	r5, [r4, #0]
 8007e00:	6909      	ldr	r1, [r1, #16]
 8007e02:	eba5 0901 	sub.w	r9, r5, r1
 8007e06:	6965      	ldr	r5, [r4, #20]
 8007e08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e10:	3301      	adds	r3, #1
 8007e12:	444b      	add	r3, r9
 8007e14:	106d      	asrs	r5, r5, #1
 8007e16:	429d      	cmp	r5, r3
 8007e18:	bf38      	it	cc
 8007e1a:	461d      	movcc	r5, r3
 8007e1c:	0553      	lsls	r3, r2, #21
 8007e1e:	d531      	bpl.n	8007e84 <__ssputs_r+0xa0>
 8007e20:	4629      	mov	r1, r5
 8007e22:	f7ff ff85 	bl	8007d30 <_malloc_r>
 8007e26:	4606      	mov	r6, r0
 8007e28:	b950      	cbnz	r0, 8007e40 <__ssputs_r+0x5c>
 8007e2a:	230c      	movs	r3, #12
 8007e2c:	f8ca 3000 	str.w	r3, [sl]
 8007e30:	89a3      	ldrh	r3, [r4, #12]
 8007e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e36:	81a3      	strh	r3, [r4, #12]
 8007e38:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e40:	6921      	ldr	r1, [r4, #16]
 8007e42:	464a      	mov	r2, r9
 8007e44:	f7ff fa56 	bl	80072f4 <memcpy>
 8007e48:	89a3      	ldrh	r3, [r4, #12]
 8007e4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e52:	81a3      	strh	r3, [r4, #12]
 8007e54:	6126      	str	r6, [r4, #16]
 8007e56:	6165      	str	r5, [r4, #20]
 8007e58:	444e      	add	r6, r9
 8007e5a:	eba5 0509 	sub.w	r5, r5, r9
 8007e5e:	6026      	str	r6, [r4, #0]
 8007e60:	60a5      	str	r5, [r4, #8]
 8007e62:	463e      	mov	r6, r7
 8007e64:	42be      	cmp	r6, r7
 8007e66:	d900      	bls.n	8007e6a <__ssputs_r+0x86>
 8007e68:	463e      	mov	r6, r7
 8007e6a:	4632      	mov	r2, r6
 8007e6c:	6820      	ldr	r0, [r4, #0]
 8007e6e:	4641      	mov	r1, r8
 8007e70:	f000 ff56 	bl	8008d20 <memmove>
 8007e74:	68a3      	ldr	r3, [r4, #8]
 8007e76:	6822      	ldr	r2, [r4, #0]
 8007e78:	1b9b      	subs	r3, r3, r6
 8007e7a:	4432      	add	r2, r6
 8007e7c:	60a3      	str	r3, [r4, #8]
 8007e7e:	6022      	str	r2, [r4, #0]
 8007e80:	2000      	movs	r0, #0
 8007e82:	e7db      	b.n	8007e3c <__ssputs_r+0x58>
 8007e84:	462a      	mov	r2, r5
 8007e86:	f000 ff71 	bl	8008d6c <_realloc_r>
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d1e1      	bne.n	8007e54 <__ssputs_r+0x70>
 8007e90:	6921      	ldr	r1, [r4, #16]
 8007e92:	4650      	mov	r0, sl
 8007e94:	f7ff fefe 	bl	8007c94 <_free_r>
 8007e98:	e7c7      	b.n	8007e2a <__ssputs_r+0x46>
	...

08007e9c <_svfiprintf_r>:
 8007e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea0:	4698      	mov	r8, r3
 8007ea2:	898b      	ldrh	r3, [r1, #12]
 8007ea4:	061b      	lsls	r3, r3, #24
 8007ea6:	b09d      	sub	sp, #116	; 0x74
 8007ea8:	4607      	mov	r7, r0
 8007eaa:	460d      	mov	r5, r1
 8007eac:	4614      	mov	r4, r2
 8007eae:	d50e      	bpl.n	8007ece <_svfiprintf_r+0x32>
 8007eb0:	690b      	ldr	r3, [r1, #16]
 8007eb2:	b963      	cbnz	r3, 8007ece <_svfiprintf_r+0x32>
 8007eb4:	2140      	movs	r1, #64	; 0x40
 8007eb6:	f7ff ff3b 	bl	8007d30 <_malloc_r>
 8007eba:	6028      	str	r0, [r5, #0]
 8007ebc:	6128      	str	r0, [r5, #16]
 8007ebe:	b920      	cbnz	r0, 8007eca <_svfiprintf_r+0x2e>
 8007ec0:	230c      	movs	r3, #12
 8007ec2:	603b      	str	r3, [r7, #0]
 8007ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec8:	e0d1      	b.n	800806e <_svfiprintf_r+0x1d2>
 8007eca:	2340      	movs	r3, #64	; 0x40
 8007ecc:	616b      	str	r3, [r5, #20]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ed2:	2320      	movs	r3, #32
 8007ed4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ed8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007edc:	2330      	movs	r3, #48	; 0x30
 8007ede:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008088 <_svfiprintf_r+0x1ec>
 8007ee2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ee6:	f04f 0901 	mov.w	r9, #1
 8007eea:	4623      	mov	r3, r4
 8007eec:	469a      	mov	sl, r3
 8007eee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ef2:	b10a      	cbz	r2, 8007ef8 <_svfiprintf_r+0x5c>
 8007ef4:	2a25      	cmp	r2, #37	; 0x25
 8007ef6:	d1f9      	bne.n	8007eec <_svfiprintf_r+0x50>
 8007ef8:	ebba 0b04 	subs.w	fp, sl, r4
 8007efc:	d00b      	beq.n	8007f16 <_svfiprintf_r+0x7a>
 8007efe:	465b      	mov	r3, fp
 8007f00:	4622      	mov	r2, r4
 8007f02:	4629      	mov	r1, r5
 8007f04:	4638      	mov	r0, r7
 8007f06:	f7ff ff6d 	bl	8007de4 <__ssputs_r>
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	f000 80aa 	beq.w	8008064 <_svfiprintf_r+0x1c8>
 8007f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f12:	445a      	add	r2, fp
 8007f14:	9209      	str	r2, [sp, #36]	; 0x24
 8007f16:	f89a 3000 	ldrb.w	r3, [sl]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f000 80a2 	beq.w	8008064 <_svfiprintf_r+0x1c8>
 8007f20:	2300      	movs	r3, #0
 8007f22:	f04f 32ff 	mov.w	r2, #4294967295
 8007f26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f2a:	f10a 0a01 	add.w	sl, sl, #1
 8007f2e:	9304      	str	r3, [sp, #16]
 8007f30:	9307      	str	r3, [sp, #28]
 8007f32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f36:	931a      	str	r3, [sp, #104]	; 0x68
 8007f38:	4654      	mov	r4, sl
 8007f3a:	2205      	movs	r2, #5
 8007f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f40:	4851      	ldr	r0, [pc, #324]	; (8008088 <_svfiprintf_r+0x1ec>)
 8007f42:	f7f8 f965 	bl	8000210 <memchr>
 8007f46:	9a04      	ldr	r2, [sp, #16]
 8007f48:	b9d8      	cbnz	r0, 8007f82 <_svfiprintf_r+0xe6>
 8007f4a:	06d0      	lsls	r0, r2, #27
 8007f4c:	bf44      	itt	mi
 8007f4e:	2320      	movmi	r3, #32
 8007f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f54:	0711      	lsls	r1, r2, #28
 8007f56:	bf44      	itt	mi
 8007f58:	232b      	movmi	r3, #43	; 0x2b
 8007f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8007f62:	2b2a      	cmp	r3, #42	; 0x2a
 8007f64:	d015      	beq.n	8007f92 <_svfiprintf_r+0xf6>
 8007f66:	9a07      	ldr	r2, [sp, #28]
 8007f68:	4654      	mov	r4, sl
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	f04f 0c0a 	mov.w	ip, #10
 8007f70:	4621      	mov	r1, r4
 8007f72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f76:	3b30      	subs	r3, #48	; 0x30
 8007f78:	2b09      	cmp	r3, #9
 8007f7a:	d94e      	bls.n	800801a <_svfiprintf_r+0x17e>
 8007f7c:	b1b0      	cbz	r0, 8007fac <_svfiprintf_r+0x110>
 8007f7e:	9207      	str	r2, [sp, #28]
 8007f80:	e014      	b.n	8007fac <_svfiprintf_r+0x110>
 8007f82:	eba0 0308 	sub.w	r3, r0, r8
 8007f86:	fa09 f303 	lsl.w	r3, r9, r3
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	9304      	str	r3, [sp, #16]
 8007f8e:	46a2      	mov	sl, r4
 8007f90:	e7d2      	b.n	8007f38 <_svfiprintf_r+0x9c>
 8007f92:	9b03      	ldr	r3, [sp, #12]
 8007f94:	1d19      	adds	r1, r3, #4
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	9103      	str	r1, [sp, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	bfbb      	ittet	lt
 8007f9e:	425b      	neglt	r3, r3
 8007fa0:	f042 0202 	orrlt.w	r2, r2, #2
 8007fa4:	9307      	strge	r3, [sp, #28]
 8007fa6:	9307      	strlt	r3, [sp, #28]
 8007fa8:	bfb8      	it	lt
 8007faa:	9204      	strlt	r2, [sp, #16]
 8007fac:	7823      	ldrb	r3, [r4, #0]
 8007fae:	2b2e      	cmp	r3, #46	; 0x2e
 8007fb0:	d10c      	bne.n	8007fcc <_svfiprintf_r+0x130>
 8007fb2:	7863      	ldrb	r3, [r4, #1]
 8007fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8007fb6:	d135      	bne.n	8008024 <_svfiprintf_r+0x188>
 8007fb8:	9b03      	ldr	r3, [sp, #12]
 8007fba:	1d1a      	adds	r2, r3, #4
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	9203      	str	r2, [sp, #12]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	bfb8      	it	lt
 8007fc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fc8:	3402      	adds	r4, #2
 8007fca:	9305      	str	r3, [sp, #20]
 8007fcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008098 <_svfiprintf_r+0x1fc>
 8007fd0:	7821      	ldrb	r1, [r4, #0]
 8007fd2:	2203      	movs	r2, #3
 8007fd4:	4650      	mov	r0, sl
 8007fd6:	f7f8 f91b 	bl	8000210 <memchr>
 8007fda:	b140      	cbz	r0, 8007fee <_svfiprintf_r+0x152>
 8007fdc:	2340      	movs	r3, #64	; 0x40
 8007fde:	eba0 000a 	sub.w	r0, r0, sl
 8007fe2:	fa03 f000 	lsl.w	r0, r3, r0
 8007fe6:	9b04      	ldr	r3, [sp, #16]
 8007fe8:	4303      	orrs	r3, r0
 8007fea:	3401      	adds	r4, #1
 8007fec:	9304      	str	r3, [sp, #16]
 8007fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff2:	4826      	ldr	r0, [pc, #152]	; (800808c <_svfiprintf_r+0x1f0>)
 8007ff4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ff8:	2206      	movs	r2, #6
 8007ffa:	f7f8 f909 	bl	8000210 <memchr>
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d038      	beq.n	8008074 <_svfiprintf_r+0x1d8>
 8008002:	4b23      	ldr	r3, [pc, #140]	; (8008090 <_svfiprintf_r+0x1f4>)
 8008004:	bb1b      	cbnz	r3, 800804e <_svfiprintf_r+0x1b2>
 8008006:	9b03      	ldr	r3, [sp, #12]
 8008008:	3307      	adds	r3, #7
 800800a:	f023 0307 	bic.w	r3, r3, #7
 800800e:	3308      	adds	r3, #8
 8008010:	9303      	str	r3, [sp, #12]
 8008012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008014:	4433      	add	r3, r6
 8008016:	9309      	str	r3, [sp, #36]	; 0x24
 8008018:	e767      	b.n	8007eea <_svfiprintf_r+0x4e>
 800801a:	fb0c 3202 	mla	r2, ip, r2, r3
 800801e:	460c      	mov	r4, r1
 8008020:	2001      	movs	r0, #1
 8008022:	e7a5      	b.n	8007f70 <_svfiprintf_r+0xd4>
 8008024:	2300      	movs	r3, #0
 8008026:	3401      	adds	r4, #1
 8008028:	9305      	str	r3, [sp, #20]
 800802a:	4619      	mov	r1, r3
 800802c:	f04f 0c0a 	mov.w	ip, #10
 8008030:	4620      	mov	r0, r4
 8008032:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008036:	3a30      	subs	r2, #48	; 0x30
 8008038:	2a09      	cmp	r2, #9
 800803a:	d903      	bls.n	8008044 <_svfiprintf_r+0x1a8>
 800803c:	2b00      	cmp	r3, #0
 800803e:	d0c5      	beq.n	8007fcc <_svfiprintf_r+0x130>
 8008040:	9105      	str	r1, [sp, #20]
 8008042:	e7c3      	b.n	8007fcc <_svfiprintf_r+0x130>
 8008044:	fb0c 2101 	mla	r1, ip, r1, r2
 8008048:	4604      	mov	r4, r0
 800804a:	2301      	movs	r3, #1
 800804c:	e7f0      	b.n	8008030 <_svfiprintf_r+0x194>
 800804e:	ab03      	add	r3, sp, #12
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	462a      	mov	r2, r5
 8008054:	4b0f      	ldr	r3, [pc, #60]	; (8008094 <_svfiprintf_r+0x1f8>)
 8008056:	a904      	add	r1, sp, #16
 8008058:	4638      	mov	r0, r7
 800805a:	f7fc fa17 	bl	800448c <_printf_float>
 800805e:	1c42      	adds	r2, r0, #1
 8008060:	4606      	mov	r6, r0
 8008062:	d1d6      	bne.n	8008012 <_svfiprintf_r+0x176>
 8008064:	89ab      	ldrh	r3, [r5, #12]
 8008066:	065b      	lsls	r3, r3, #25
 8008068:	f53f af2c 	bmi.w	8007ec4 <_svfiprintf_r+0x28>
 800806c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800806e:	b01d      	add	sp, #116	; 0x74
 8008070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008074:	ab03      	add	r3, sp, #12
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	462a      	mov	r2, r5
 800807a:	4b06      	ldr	r3, [pc, #24]	; (8008094 <_svfiprintf_r+0x1f8>)
 800807c:	a904      	add	r1, sp, #16
 800807e:	4638      	mov	r0, r7
 8008080:	f7fc fc9c 	bl	80049bc <_printf_i>
 8008084:	e7eb      	b.n	800805e <_svfiprintf_r+0x1c2>
 8008086:	bf00      	nop
 8008088:	08009f3c 	.word	0x08009f3c
 800808c:	08009f46 	.word	0x08009f46
 8008090:	0800448d 	.word	0x0800448d
 8008094:	08007de5 	.word	0x08007de5
 8008098:	08009f42 	.word	0x08009f42

0800809c <_sungetc_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	1c4b      	adds	r3, r1, #1
 80080a0:	4614      	mov	r4, r2
 80080a2:	d103      	bne.n	80080ac <_sungetc_r+0x10>
 80080a4:	f04f 35ff 	mov.w	r5, #4294967295
 80080a8:	4628      	mov	r0, r5
 80080aa:	bd38      	pop	{r3, r4, r5, pc}
 80080ac:	8993      	ldrh	r3, [r2, #12]
 80080ae:	f023 0320 	bic.w	r3, r3, #32
 80080b2:	8193      	strh	r3, [r2, #12]
 80080b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080b6:	6852      	ldr	r2, [r2, #4]
 80080b8:	b2cd      	uxtb	r5, r1
 80080ba:	b18b      	cbz	r3, 80080e0 <_sungetc_r+0x44>
 80080bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80080be:	4293      	cmp	r3, r2
 80080c0:	dd08      	ble.n	80080d4 <_sungetc_r+0x38>
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	1e5a      	subs	r2, r3, #1
 80080c6:	6022      	str	r2, [r4, #0]
 80080c8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80080cc:	6863      	ldr	r3, [r4, #4]
 80080ce:	3301      	adds	r3, #1
 80080d0:	6063      	str	r3, [r4, #4]
 80080d2:	e7e9      	b.n	80080a8 <_sungetc_r+0xc>
 80080d4:	4621      	mov	r1, r4
 80080d6:	f000 fbf1 	bl	80088bc <__submore>
 80080da:	2800      	cmp	r0, #0
 80080dc:	d0f1      	beq.n	80080c2 <_sungetc_r+0x26>
 80080de:	e7e1      	b.n	80080a4 <_sungetc_r+0x8>
 80080e0:	6921      	ldr	r1, [r4, #16]
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	b151      	cbz	r1, 80080fc <_sungetc_r+0x60>
 80080e6:	4299      	cmp	r1, r3
 80080e8:	d208      	bcs.n	80080fc <_sungetc_r+0x60>
 80080ea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80080ee:	42a9      	cmp	r1, r5
 80080f0:	d104      	bne.n	80080fc <_sungetc_r+0x60>
 80080f2:	3b01      	subs	r3, #1
 80080f4:	3201      	adds	r2, #1
 80080f6:	6023      	str	r3, [r4, #0]
 80080f8:	6062      	str	r2, [r4, #4]
 80080fa:	e7d5      	b.n	80080a8 <_sungetc_r+0xc>
 80080fc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008104:	6363      	str	r3, [r4, #52]	; 0x34
 8008106:	2303      	movs	r3, #3
 8008108:	63a3      	str	r3, [r4, #56]	; 0x38
 800810a:	4623      	mov	r3, r4
 800810c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	2301      	movs	r3, #1
 8008114:	e7dc      	b.n	80080d0 <_sungetc_r+0x34>

08008116 <__ssrefill_r>:
 8008116:	b510      	push	{r4, lr}
 8008118:	460c      	mov	r4, r1
 800811a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800811c:	b169      	cbz	r1, 800813a <__ssrefill_r+0x24>
 800811e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008122:	4299      	cmp	r1, r3
 8008124:	d001      	beq.n	800812a <__ssrefill_r+0x14>
 8008126:	f7ff fdb5 	bl	8007c94 <_free_r>
 800812a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800812c:	6063      	str	r3, [r4, #4]
 800812e:	2000      	movs	r0, #0
 8008130:	6360      	str	r0, [r4, #52]	; 0x34
 8008132:	b113      	cbz	r3, 800813a <__ssrefill_r+0x24>
 8008134:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008136:	6023      	str	r3, [r4, #0]
 8008138:	bd10      	pop	{r4, pc}
 800813a:	6923      	ldr	r3, [r4, #16]
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	2300      	movs	r3, #0
 8008140:	6063      	str	r3, [r4, #4]
 8008142:	89a3      	ldrh	r3, [r4, #12]
 8008144:	f043 0320 	orr.w	r3, r3, #32
 8008148:	81a3      	strh	r3, [r4, #12]
 800814a:	f04f 30ff 	mov.w	r0, #4294967295
 800814e:	e7f3      	b.n	8008138 <__ssrefill_r+0x22>

08008150 <__ssvfiscanf_r>:
 8008150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008154:	460c      	mov	r4, r1
 8008156:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800815a:	2100      	movs	r1, #0
 800815c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008160:	49b2      	ldr	r1, [pc, #712]	; (800842c <__ssvfiscanf_r+0x2dc>)
 8008162:	91a0      	str	r1, [sp, #640]	; 0x280
 8008164:	f10d 0804 	add.w	r8, sp, #4
 8008168:	49b1      	ldr	r1, [pc, #708]	; (8008430 <__ssvfiscanf_r+0x2e0>)
 800816a:	4fb2      	ldr	r7, [pc, #712]	; (8008434 <__ssvfiscanf_r+0x2e4>)
 800816c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8008438 <__ssvfiscanf_r+0x2e8>
 8008170:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008174:	4606      	mov	r6, r0
 8008176:	91a1      	str	r1, [sp, #644]	; 0x284
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	f892 a000 	ldrb.w	sl, [r2]
 800817e:	f1ba 0f00 	cmp.w	sl, #0
 8008182:	f000 8151 	beq.w	8008428 <__ssvfiscanf_r+0x2d8>
 8008186:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800818a:	f013 0308 	ands.w	r3, r3, #8
 800818e:	f102 0501 	add.w	r5, r2, #1
 8008192:	d019      	beq.n	80081c8 <__ssvfiscanf_r+0x78>
 8008194:	6863      	ldr	r3, [r4, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	dd0f      	ble.n	80081ba <__ssvfiscanf_r+0x6a>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	781a      	ldrb	r2, [r3, #0]
 800819e:	5cba      	ldrb	r2, [r7, r2]
 80081a0:	0712      	lsls	r2, r2, #28
 80081a2:	d401      	bmi.n	80081a8 <__ssvfiscanf_r+0x58>
 80081a4:	462a      	mov	r2, r5
 80081a6:	e7e8      	b.n	800817a <__ssvfiscanf_r+0x2a>
 80081a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80081aa:	3201      	adds	r2, #1
 80081ac:	9245      	str	r2, [sp, #276]	; 0x114
 80081ae:	6862      	ldr	r2, [r4, #4]
 80081b0:	3301      	adds	r3, #1
 80081b2:	3a01      	subs	r2, #1
 80081b4:	6062      	str	r2, [r4, #4]
 80081b6:	6023      	str	r3, [r4, #0]
 80081b8:	e7ec      	b.n	8008194 <__ssvfiscanf_r+0x44>
 80081ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80081bc:	4621      	mov	r1, r4
 80081be:	4630      	mov	r0, r6
 80081c0:	4798      	blx	r3
 80081c2:	2800      	cmp	r0, #0
 80081c4:	d0e9      	beq.n	800819a <__ssvfiscanf_r+0x4a>
 80081c6:	e7ed      	b.n	80081a4 <__ssvfiscanf_r+0x54>
 80081c8:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80081cc:	f040 8083 	bne.w	80082d6 <__ssvfiscanf_r+0x186>
 80081d0:	9341      	str	r3, [sp, #260]	; 0x104
 80081d2:	9343      	str	r3, [sp, #268]	; 0x10c
 80081d4:	7853      	ldrb	r3, [r2, #1]
 80081d6:	2b2a      	cmp	r3, #42	; 0x2a
 80081d8:	bf02      	ittt	eq
 80081da:	2310      	moveq	r3, #16
 80081dc:	1c95      	addeq	r5, r2, #2
 80081de:	9341      	streq	r3, [sp, #260]	; 0x104
 80081e0:	220a      	movs	r2, #10
 80081e2:	46ab      	mov	fp, r5
 80081e4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80081e8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80081ec:	2b09      	cmp	r3, #9
 80081ee:	d91d      	bls.n	800822c <__ssvfiscanf_r+0xdc>
 80081f0:	4891      	ldr	r0, [pc, #580]	; (8008438 <__ssvfiscanf_r+0x2e8>)
 80081f2:	2203      	movs	r2, #3
 80081f4:	f7f8 f80c 	bl	8000210 <memchr>
 80081f8:	b140      	cbz	r0, 800820c <__ssvfiscanf_r+0xbc>
 80081fa:	2301      	movs	r3, #1
 80081fc:	eba0 0009 	sub.w	r0, r0, r9
 8008200:	fa03 f000 	lsl.w	r0, r3, r0
 8008204:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008206:	4318      	orrs	r0, r3
 8008208:	9041      	str	r0, [sp, #260]	; 0x104
 800820a:	465d      	mov	r5, fp
 800820c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008210:	2b78      	cmp	r3, #120	; 0x78
 8008212:	d806      	bhi.n	8008222 <__ssvfiscanf_r+0xd2>
 8008214:	2b57      	cmp	r3, #87	; 0x57
 8008216:	d810      	bhi.n	800823a <__ssvfiscanf_r+0xea>
 8008218:	2b25      	cmp	r3, #37	; 0x25
 800821a:	d05c      	beq.n	80082d6 <__ssvfiscanf_r+0x186>
 800821c:	d856      	bhi.n	80082cc <__ssvfiscanf_r+0x17c>
 800821e:	2b00      	cmp	r3, #0
 8008220:	d074      	beq.n	800830c <__ssvfiscanf_r+0x1bc>
 8008222:	2303      	movs	r3, #3
 8008224:	9347      	str	r3, [sp, #284]	; 0x11c
 8008226:	230a      	movs	r3, #10
 8008228:	9342      	str	r3, [sp, #264]	; 0x108
 800822a:	e081      	b.n	8008330 <__ssvfiscanf_r+0x1e0>
 800822c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800822e:	fb02 1303 	mla	r3, r2, r3, r1
 8008232:	3b30      	subs	r3, #48	; 0x30
 8008234:	9343      	str	r3, [sp, #268]	; 0x10c
 8008236:	465d      	mov	r5, fp
 8008238:	e7d3      	b.n	80081e2 <__ssvfiscanf_r+0x92>
 800823a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800823e:	2a20      	cmp	r2, #32
 8008240:	d8ef      	bhi.n	8008222 <__ssvfiscanf_r+0xd2>
 8008242:	a101      	add	r1, pc, #4	; (adr r1, 8008248 <__ssvfiscanf_r+0xf8>)
 8008244:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008248:	0800831b 	.word	0x0800831b
 800824c:	08008223 	.word	0x08008223
 8008250:	08008223 	.word	0x08008223
 8008254:	08008379 	.word	0x08008379
 8008258:	08008223 	.word	0x08008223
 800825c:	08008223 	.word	0x08008223
 8008260:	08008223 	.word	0x08008223
 8008264:	08008223 	.word	0x08008223
 8008268:	08008223 	.word	0x08008223
 800826c:	08008223 	.word	0x08008223
 8008270:	08008223 	.word	0x08008223
 8008274:	0800838f 	.word	0x0800838f
 8008278:	08008365 	.word	0x08008365
 800827c:	080082d3 	.word	0x080082d3
 8008280:	080082d3 	.word	0x080082d3
 8008284:	080082d3 	.word	0x080082d3
 8008288:	08008223 	.word	0x08008223
 800828c:	08008369 	.word	0x08008369
 8008290:	08008223 	.word	0x08008223
 8008294:	08008223 	.word	0x08008223
 8008298:	08008223 	.word	0x08008223
 800829c:	08008223 	.word	0x08008223
 80082a0:	0800839f 	.word	0x0800839f
 80082a4:	08008371 	.word	0x08008371
 80082a8:	08008313 	.word	0x08008313
 80082ac:	08008223 	.word	0x08008223
 80082b0:	08008223 	.word	0x08008223
 80082b4:	0800839b 	.word	0x0800839b
 80082b8:	08008223 	.word	0x08008223
 80082bc:	08008365 	.word	0x08008365
 80082c0:	08008223 	.word	0x08008223
 80082c4:	08008223 	.word	0x08008223
 80082c8:	0800831b 	.word	0x0800831b
 80082cc:	3b45      	subs	r3, #69	; 0x45
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d8a7      	bhi.n	8008222 <__ssvfiscanf_r+0xd2>
 80082d2:	2305      	movs	r3, #5
 80082d4:	e02b      	b.n	800832e <__ssvfiscanf_r+0x1de>
 80082d6:	6863      	ldr	r3, [r4, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	dd0d      	ble.n	80082f8 <__ssvfiscanf_r+0x1a8>
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	781a      	ldrb	r2, [r3, #0]
 80082e0:	4552      	cmp	r2, sl
 80082e2:	f040 80a1 	bne.w	8008428 <__ssvfiscanf_r+0x2d8>
 80082e6:	3301      	adds	r3, #1
 80082e8:	6862      	ldr	r2, [r4, #4]
 80082ea:	6023      	str	r3, [r4, #0]
 80082ec:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80082ee:	3a01      	subs	r2, #1
 80082f0:	3301      	adds	r3, #1
 80082f2:	6062      	str	r2, [r4, #4]
 80082f4:	9345      	str	r3, [sp, #276]	; 0x114
 80082f6:	e755      	b.n	80081a4 <__ssvfiscanf_r+0x54>
 80082f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80082fa:	4621      	mov	r1, r4
 80082fc:	4630      	mov	r0, r6
 80082fe:	4798      	blx	r3
 8008300:	2800      	cmp	r0, #0
 8008302:	d0eb      	beq.n	80082dc <__ssvfiscanf_r+0x18c>
 8008304:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008306:	2800      	cmp	r0, #0
 8008308:	f040 8084 	bne.w	8008414 <__ssvfiscanf_r+0x2c4>
 800830c:	f04f 30ff 	mov.w	r0, #4294967295
 8008310:	e086      	b.n	8008420 <__ssvfiscanf_r+0x2d0>
 8008312:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008314:	f042 0220 	orr.w	r2, r2, #32
 8008318:	9241      	str	r2, [sp, #260]	; 0x104
 800831a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800831c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008320:	9241      	str	r2, [sp, #260]	; 0x104
 8008322:	2210      	movs	r2, #16
 8008324:	2b6f      	cmp	r3, #111	; 0x6f
 8008326:	9242      	str	r2, [sp, #264]	; 0x108
 8008328:	bf34      	ite	cc
 800832a:	2303      	movcc	r3, #3
 800832c:	2304      	movcs	r3, #4
 800832e:	9347      	str	r3, [sp, #284]	; 0x11c
 8008330:	6863      	ldr	r3, [r4, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	dd41      	ble.n	80083ba <__ssvfiscanf_r+0x26a>
 8008336:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008338:	0659      	lsls	r1, r3, #25
 800833a:	d404      	bmi.n	8008346 <__ssvfiscanf_r+0x1f6>
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	781a      	ldrb	r2, [r3, #0]
 8008340:	5cba      	ldrb	r2, [r7, r2]
 8008342:	0712      	lsls	r2, r2, #28
 8008344:	d440      	bmi.n	80083c8 <__ssvfiscanf_r+0x278>
 8008346:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008348:	2b02      	cmp	r3, #2
 800834a:	dc4f      	bgt.n	80083ec <__ssvfiscanf_r+0x29c>
 800834c:	466b      	mov	r3, sp
 800834e:	4622      	mov	r2, r4
 8008350:	a941      	add	r1, sp, #260	; 0x104
 8008352:	4630      	mov	r0, r6
 8008354:	f000 f874 	bl	8008440 <_scanf_chars>
 8008358:	2801      	cmp	r0, #1
 800835a:	d065      	beq.n	8008428 <__ssvfiscanf_r+0x2d8>
 800835c:	2802      	cmp	r0, #2
 800835e:	f47f af21 	bne.w	80081a4 <__ssvfiscanf_r+0x54>
 8008362:	e7cf      	b.n	8008304 <__ssvfiscanf_r+0x1b4>
 8008364:	220a      	movs	r2, #10
 8008366:	e7dd      	b.n	8008324 <__ssvfiscanf_r+0x1d4>
 8008368:	2300      	movs	r3, #0
 800836a:	9342      	str	r3, [sp, #264]	; 0x108
 800836c:	2303      	movs	r3, #3
 800836e:	e7de      	b.n	800832e <__ssvfiscanf_r+0x1de>
 8008370:	2308      	movs	r3, #8
 8008372:	9342      	str	r3, [sp, #264]	; 0x108
 8008374:	2304      	movs	r3, #4
 8008376:	e7da      	b.n	800832e <__ssvfiscanf_r+0x1de>
 8008378:	4629      	mov	r1, r5
 800837a:	4640      	mov	r0, r8
 800837c:	f000 f9d4 	bl	8008728 <__sccl>
 8008380:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008386:	9341      	str	r3, [sp, #260]	; 0x104
 8008388:	4605      	mov	r5, r0
 800838a:	2301      	movs	r3, #1
 800838c:	e7cf      	b.n	800832e <__ssvfiscanf_r+0x1de>
 800838e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008394:	9341      	str	r3, [sp, #260]	; 0x104
 8008396:	2300      	movs	r3, #0
 8008398:	e7c9      	b.n	800832e <__ssvfiscanf_r+0x1de>
 800839a:	2302      	movs	r3, #2
 800839c:	e7c7      	b.n	800832e <__ssvfiscanf_r+0x1de>
 800839e:	9841      	ldr	r0, [sp, #260]	; 0x104
 80083a0:	06c3      	lsls	r3, r0, #27
 80083a2:	f53f aeff 	bmi.w	80081a4 <__ssvfiscanf_r+0x54>
 80083a6:	9b00      	ldr	r3, [sp, #0]
 80083a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80083aa:	1d19      	adds	r1, r3, #4
 80083ac:	9100      	str	r1, [sp, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	07c0      	lsls	r0, r0, #31
 80083b2:	bf4c      	ite	mi
 80083b4:	801a      	strhmi	r2, [r3, #0]
 80083b6:	601a      	strpl	r2, [r3, #0]
 80083b8:	e6f4      	b.n	80081a4 <__ssvfiscanf_r+0x54>
 80083ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80083bc:	4621      	mov	r1, r4
 80083be:	4630      	mov	r0, r6
 80083c0:	4798      	blx	r3
 80083c2:	2800      	cmp	r0, #0
 80083c4:	d0b7      	beq.n	8008336 <__ssvfiscanf_r+0x1e6>
 80083c6:	e79d      	b.n	8008304 <__ssvfiscanf_r+0x1b4>
 80083c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80083ca:	3201      	adds	r2, #1
 80083cc:	9245      	str	r2, [sp, #276]	; 0x114
 80083ce:	6862      	ldr	r2, [r4, #4]
 80083d0:	3a01      	subs	r2, #1
 80083d2:	2a00      	cmp	r2, #0
 80083d4:	6062      	str	r2, [r4, #4]
 80083d6:	dd02      	ble.n	80083de <__ssvfiscanf_r+0x28e>
 80083d8:	3301      	adds	r3, #1
 80083da:	6023      	str	r3, [r4, #0]
 80083dc:	e7ae      	b.n	800833c <__ssvfiscanf_r+0x1ec>
 80083de:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80083e0:	4621      	mov	r1, r4
 80083e2:	4630      	mov	r0, r6
 80083e4:	4798      	blx	r3
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d0a8      	beq.n	800833c <__ssvfiscanf_r+0x1ec>
 80083ea:	e78b      	b.n	8008304 <__ssvfiscanf_r+0x1b4>
 80083ec:	2b04      	cmp	r3, #4
 80083ee:	dc06      	bgt.n	80083fe <__ssvfiscanf_r+0x2ae>
 80083f0:	466b      	mov	r3, sp
 80083f2:	4622      	mov	r2, r4
 80083f4:	a941      	add	r1, sp, #260	; 0x104
 80083f6:	4630      	mov	r0, r6
 80083f8:	f000 f87a 	bl	80084f0 <_scanf_i>
 80083fc:	e7ac      	b.n	8008358 <__ssvfiscanf_r+0x208>
 80083fe:	4b0f      	ldr	r3, [pc, #60]	; (800843c <__ssvfiscanf_r+0x2ec>)
 8008400:	2b00      	cmp	r3, #0
 8008402:	f43f aecf 	beq.w	80081a4 <__ssvfiscanf_r+0x54>
 8008406:	466b      	mov	r3, sp
 8008408:	4622      	mov	r2, r4
 800840a:	a941      	add	r1, sp, #260	; 0x104
 800840c:	4630      	mov	r0, r6
 800840e:	f7fc fbfb 	bl	8004c08 <_scanf_float>
 8008412:	e7a1      	b.n	8008358 <__ssvfiscanf_r+0x208>
 8008414:	89a3      	ldrh	r3, [r4, #12]
 8008416:	f013 0f40 	tst.w	r3, #64	; 0x40
 800841a:	bf18      	it	ne
 800841c:	f04f 30ff 	movne.w	r0, #4294967295
 8008420:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008428:	9844      	ldr	r0, [sp, #272]	; 0x110
 800842a:	e7f9      	b.n	8008420 <__ssvfiscanf_r+0x2d0>
 800842c:	0800809d 	.word	0x0800809d
 8008430:	08008117 	.word	0x08008117
 8008434:	08009bc9 	.word	0x08009bc9
 8008438:	08009f42 	.word	0x08009f42
 800843c:	08004c09 	.word	0x08004c09

08008440 <_scanf_chars>:
 8008440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008444:	4615      	mov	r5, r2
 8008446:	688a      	ldr	r2, [r1, #8]
 8008448:	4680      	mov	r8, r0
 800844a:	460c      	mov	r4, r1
 800844c:	b932      	cbnz	r2, 800845c <_scanf_chars+0x1c>
 800844e:	698a      	ldr	r2, [r1, #24]
 8008450:	2a00      	cmp	r2, #0
 8008452:	bf0c      	ite	eq
 8008454:	2201      	moveq	r2, #1
 8008456:	f04f 32ff 	movne.w	r2, #4294967295
 800845a:	608a      	str	r2, [r1, #8]
 800845c:	6822      	ldr	r2, [r4, #0]
 800845e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80084ec <_scanf_chars+0xac>
 8008462:	06d1      	lsls	r1, r2, #27
 8008464:	bf5f      	itttt	pl
 8008466:	681a      	ldrpl	r2, [r3, #0]
 8008468:	1d11      	addpl	r1, r2, #4
 800846a:	6019      	strpl	r1, [r3, #0]
 800846c:	6816      	ldrpl	r6, [r2, #0]
 800846e:	2700      	movs	r7, #0
 8008470:	69a0      	ldr	r0, [r4, #24]
 8008472:	b188      	cbz	r0, 8008498 <_scanf_chars+0x58>
 8008474:	2801      	cmp	r0, #1
 8008476:	d107      	bne.n	8008488 <_scanf_chars+0x48>
 8008478:	682b      	ldr	r3, [r5, #0]
 800847a:	781a      	ldrb	r2, [r3, #0]
 800847c:	6963      	ldr	r3, [r4, #20]
 800847e:	5c9b      	ldrb	r3, [r3, r2]
 8008480:	b953      	cbnz	r3, 8008498 <_scanf_chars+0x58>
 8008482:	bb27      	cbnz	r7, 80084ce <_scanf_chars+0x8e>
 8008484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008488:	2802      	cmp	r0, #2
 800848a:	d120      	bne.n	80084ce <_scanf_chars+0x8e>
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008494:	071b      	lsls	r3, r3, #28
 8008496:	d41a      	bmi.n	80084ce <_scanf_chars+0x8e>
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	06da      	lsls	r2, r3, #27
 800849c:	bf5e      	ittt	pl
 800849e:	682b      	ldrpl	r3, [r5, #0]
 80084a0:	781b      	ldrbpl	r3, [r3, #0]
 80084a2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80084a6:	682a      	ldr	r2, [r5, #0]
 80084a8:	686b      	ldr	r3, [r5, #4]
 80084aa:	3201      	adds	r2, #1
 80084ac:	602a      	str	r2, [r5, #0]
 80084ae:	68a2      	ldr	r2, [r4, #8]
 80084b0:	3b01      	subs	r3, #1
 80084b2:	3a01      	subs	r2, #1
 80084b4:	606b      	str	r3, [r5, #4]
 80084b6:	3701      	adds	r7, #1
 80084b8:	60a2      	str	r2, [r4, #8]
 80084ba:	b142      	cbz	r2, 80084ce <_scanf_chars+0x8e>
 80084bc:	2b00      	cmp	r3, #0
 80084be:	dcd7      	bgt.n	8008470 <_scanf_chars+0x30>
 80084c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80084c4:	4629      	mov	r1, r5
 80084c6:	4640      	mov	r0, r8
 80084c8:	4798      	blx	r3
 80084ca:	2800      	cmp	r0, #0
 80084cc:	d0d0      	beq.n	8008470 <_scanf_chars+0x30>
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	f013 0310 	ands.w	r3, r3, #16
 80084d4:	d105      	bne.n	80084e2 <_scanf_chars+0xa2>
 80084d6:	68e2      	ldr	r2, [r4, #12]
 80084d8:	3201      	adds	r2, #1
 80084da:	60e2      	str	r2, [r4, #12]
 80084dc:	69a2      	ldr	r2, [r4, #24]
 80084de:	b102      	cbz	r2, 80084e2 <_scanf_chars+0xa2>
 80084e0:	7033      	strb	r3, [r6, #0]
 80084e2:	6923      	ldr	r3, [r4, #16]
 80084e4:	441f      	add	r7, r3
 80084e6:	6127      	str	r7, [r4, #16]
 80084e8:	2000      	movs	r0, #0
 80084ea:	e7cb      	b.n	8008484 <_scanf_chars+0x44>
 80084ec:	08009bc9 	.word	0x08009bc9

080084f0 <_scanf_i>:
 80084f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f4:	4698      	mov	r8, r3
 80084f6:	4b74      	ldr	r3, [pc, #464]	; (80086c8 <_scanf_i+0x1d8>)
 80084f8:	460c      	mov	r4, r1
 80084fa:	4682      	mov	sl, r0
 80084fc:	4616      	mov	r6, r2
 80084fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008502:	b087      	sub	sp, #28
 8008504:	ab03      	add	r3, sp, #12
 8008506:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800850a:	4b70      	ldr	r3, [pc, #448]	; (80086cc <_scanf_i+0x1dc>)
 800850c:	69a1      	ldr	r1, [r4, #24]
 800850e:	4a70      	ldr	r2, [pc, #448]	; (80086d0 <_scanf_i+0x1e0>)
 8008510:	2903      	cmp	r1, #3
 8008512:	bf18      	it	ne
 8008514:	461a      	movne	r2, r3
 8008516:	68a3      	ldr	r3, [r4, #8]
 8008518:	9201      	str	r2, [sp, #4]
 800851a:	1e5a      	subs	r2, r3, #1
 800851c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008520:	bf88      	it	hi
 8008522:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008526:	4627      	mov	r7, r4
 8008528:	bf82      	ittt	hi
 800852a:	eb03 0905 	addhi.w	r9, r3, r5
 800852e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008532:	60a3      	strhi	r3, [r4, #8]
 8008534:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008538:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800853c:	bf98      	it	ls
 800853e:	f04f 0900 	movls.w	r9, #0
 8008542:	6023      	str	r3, [r4, #0]
 8008544:	463d      	mov	r5, r7
 8008546:	f04f 0b00 	mov.w	fp, #0
 800854a:	6831      	ldr	r1, [r6, #0]
 800854c:	ab03      	add	r3, sp, #12
 800854e:	7809      	ldrb	r1, [r1, #0]
 8008550:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008554:	2202      	movs	r2, #2
 8008556:	f7f7 fe5b 	bl	8000210 <memchr>
 800855a:	b328      	cbz	r0, 80085a8 <_scanf_i+0xb8>
 800855c:	f1bb 0f01 	cmp.w	fp, #1
 8008560:	d159      	bne.n	8008616 <_scanf_i+0x126>
 8008562:	6862      	ldr	r2, [r4, #4]
 8008564:	b92a      	cbnz	r2, 8008572 <_scanf_i+0x82>
 8008566:	6822      	ldr	r2, [r4, #0]
 8008568:	2308      	movs	r3, #8
 800856a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800856e:	6063      	str	r3, [r4, #4]
 8008570:	6022      	str	r2, [r4, #0]
 8008572:	6822      	ldr	r2, [r4, #0]
 8008574:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008578:	6022      	str	r2, [r4, #0]
 800857a:	68a2      	ldr	r2, [r4, #8]
 800857c:	1e51      	subs	r1, r2, #1
 800857e:	60a1      	str	r1, [r4, #8]
 8008580:	b192      	cbz	r2, 80085a8 <_scanf_i+0xb8>
 8008582:	6832      	ldr	r2, [r6, #0]
 8008584:	1c51      	adds	r1, r2, #1
 8008586:	6031      	str	r1, [r6, #0]
 8008588:	7812      	ldrb	r2, [r2, #0]
 800858a:	f805 2b01 	strb.w	r2, [r5], #1
 800858e:	6872      	ldr	r2, [r6, #4]
 8008590:	3a01      	subs	r2, #1
 8008592:	2a00      	cmp	r2, #0
 8008594:	6072      	str	r2, [r6, #4]
 8008596:	dc07      	bgt.n	80085a8 <_scanf_i+0xb8>
 8008598:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800859c:	4631      	mov	r1, r6
 800859e:	4650      	mov	r0, sl
 80085a0:	4790      	blx	r2
 80085a2:	2800      	cmp	r0, #0
 80085a4:	f040 8085 	bne.w	80086b2 <_scanf_i+0x1c2>
 80085a8:	f10b 0b01 	add.w	fp, fp, #1
 80085ac:	f1bb 0f03 	cmp.w	fp, #3
 80085b0:	d1cb      	bne.n	800854a <_scanf_i+0x5a>
 80085b2:	6863      	ldr	r3, [r4, #4]
 80085b4:	b90b      	cbnz	r3, 80085ba <_scanf_i+0xca>
 80085b6:	230a      	movs	r3, #10
 80085b8:	6063      	str	r3, [r4, #4]
 80085ba:	6863      	ldr	r3, [r4, #4]
 80085bc:	4945      	ldr	r1, [pc, #276]	; (80086d4 <_scanf_i+0x1e4>)
 80085be:	6960      	ldr	r0, [r4, #20]
 80085c0:	1ac9      	subs	r1, r1, r3
 80085c2:	f000 f8b1 	bl	8008728 <__sccl>
 80085c6:	f04f 0b00 	mov.w	fp, #0
 80085ca:	68a3      	ldr	r3, [r4, #8]
 80085cc:	6822      	ldr	r2, [r4, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d03d      	beq.n	800864e <_scanf_i+0x15e>
 80085d2:	6831      	ldr	r1, [r6, #0]
 80085d4:	6960      	ldr	r0, [r4, #20]
 80085d6:	f891 c000 	ldrb.w	ip, [r1]
 80085da:	f810 000c 	ldrb.w	r0, [r0, ip]
 80085de:	2800      	cmp	r0, #0
 80085e0:	d035      	beq.n	800864e <_scanf_i+0x15e>
 80085e2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80085e6:	d124      	bne.n	8008632 <_scanf_i+0x142>
 80085e8:	0510      	lsls	r0, r2, #20
 80085ea:	d522      	bpl.n	8008632 <_scanf_i+0x142>
 80085ec:	f10b 0b01 	add.w	fp, fp, #1
 80085f0:	f1b9 0f00 	cmp.w	r9, #0
 80085f4:	d003      	beq.n	80085fe <_scanf_i+0x10e>
 80085f6:	3301      	adds	r3, #1
 80085f8:	f109 39ff 	add.w	r9, r9, #4294967295
 80085fc:	60a3      	str	r3, [r4, #8]
 80085fe:	6873      	ldr	r3, [r6, #4]
 8008600:	3b01      	subs	r3, #1
 8008602:	2b00      	cmp	r3, #0
 8008604:	6073      	str	r3, [r6, #4]
 8008606:	dd1b      	ble.n	8008640 <_scanf_i+0x150>
 8008608:	6833      	ldr	r3, [r6, #0]
 800860a:	3301      	adds	r3, #1
 800860c:	6033      	str	r3, [r6, #0]
 800860e:	68a3      	ldr	r3, [r4, #8]
 8008610:	3b01      	subs	r3, #1
 8008612:	60a3      	str	r3, [r4, #8]
 8008614:	e7d9      	b.n	80085ca <_scanf_i+0xda>
 8008616:	f1bb 0f02 	cmp.w	fp, #2
 800861a:	d1ae      	bne.n	800857a <_scanf_i+0x8a>
 800861c:	6822      	ldr	r2, [r4, #0]
 800861e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008622:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008626:	d1bf      	bne.n	80085a8 <_scanf_i+0xb8>
 8008628:	2310      	movs	r3, #16
 800862a:	6063      	str	r3, [r4, #4]
 800862c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008630:	e7a2      	b.n	8008578 <_scanf_i+0x88>
 8008632:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008636:	6022      	str	r2, [r4, #0]
 8008638:	780b      	ldrb	r3, [r1, #0]
 800863a:	f805 3b01 	strb.w	r3, [r5], #1
 800863e:	e7de      	b.n	80085fe <_scanf_i+0x10e>
 8008640:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008644:	4631      	mov	r1, r6
 8008646:	4650      	mov	r0, sl
 8008648:	4798      	blx	r3
 800864a:	2800      	cmp	r0, #0
 800864c:	d0df      	beq.n	800860e <_scanf_i+0x11e>
 800864e:	6823      	ldr	r3, [r4, #0]
 8008650:	05d9      	lsls	r1, r3, #23
 8008652:	d50d      	bpl.n	8008670 <_scanf_i+0x180>
 8008654:	42bd      	cmp	r5, r7
 8008656:	d909      	bls.n	800866c <_scanf_i+0x17c>
 8008658:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800865c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008660:	4632      	mov	r2, r6
 8008662:	4650      	mov	r0, sl
 8008664:	4798      	blx	r3
 8008666:	f105 39ff 	add.w	r9, r5, #4294967295
 800866a:	464d      	mov	r5, r9
 800866c:	42bd      	cmp	r5, r7
 800866e:	d028      	beq.n	80086c2 <_scanf_i+0x1d2>
 8008670:	6822      	ldr	r2, [r4, #0]
 8008672:	f012 0210 	ands.w	r2, r2, #16
 8008676:	d113      	bne.n	80086a0 <_scanf_i+0x1b0>
 8008678:	702a      	strb	r2, [r5, #0]
 800867a:	6863      	ldr	r3, [r4, #4]
 800867c:	9e01      	ldr	r6, [sp, #4]
 800867e:	4639      	mov	r1, r7
 8008680:	4650      	mov	r0, sl
 8008682:	47b0      	blx	r6
 8008684:	f8d8 3000 	ldr.w	r3, [r8]
 8008688:	6821      	ldr	r1, [r4, #0]
 800868a:	1d1a      	adds	r2, r3, #4
 800868c:	f8c8 2000 	str.w	r2, [r8]
 8008690:	f011 0f20 	tst.w	r1, #32
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	d00f      	beq.n	80086b8 <_scanf_i+0x1c8>
 8008698:	6018      	str	r0, [r3, #0]
 800869a:	68e3      	ldr	r3, [r4, #12]
 800869c:	3301      	adds	r3, #1
 800869e:	60e3      	str	r3, [r4, #12]
 80086a0:	1bed      	subs	r5, r5, r7
 80086a2:	44ab      	add	fp, r5
 80086a4:	6925      	ldr	r5, [r4, #16]
 80086a6:	445d      	add	r5, fp
 80086a8:	6125      	str	r5, [r4, #16]
 80086aa:	2000      	movs	r0, #0
 80086ac:	b007      	add	sp, #28
 80086ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b2:	f04f 0b00 	mov.w	fp, #0
 80086b6:	e7ca      	b.n	800864e <_scanf_i+0x15e>
 80086b8:	07ca      	lsls	r2, r1, #31
 80086ba:	bf4c      	ite	mi
 80086bc:	8018      	strhmi	r0, [r3, #0]
 80086be:	6018      	strpl	r0, [r3, #0]
 80086c0:	e7eb      	b.n	800869a <_scanf_i+0x1aa>
 80086c2:	2001      	movs	r0, #1
 80086c4:	e7f2      	b.n	80086ac <_scanf_i+0x1bc>
 80086c6:	bf00      	nop
 80086c8:	08009b2c 	.word	0x08009b2c
 80086cc:	080088b9 	.word	0x080088b9
 80086d0:	08005e91 	.word	0x08005e91
 80086d4:	08009f66 	.word	0x08009f66

080086d8 <_read_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4d07      	ldr	r5, [pc, #28]	; (80086f8 <_read_r+0x20>)
 80086dc:	4604      	mov	r4, r0
 80086de:	4608      	mov	r0, r1
 80086e0:	4611      	mov	r1, r2
 80086e2:	2200      	movs	r2, #0
 80086e4:	602a      	str	r2, [r5, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	f7f9 fac1 	bl	8001c6e <_read>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	d102      	bne.n	80086f6 <_read_r+0x1e>
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	b103      	cbz	r3, 80086f6 <_read_r+0x1e>
 80086f4:	6023      	str	r3, [r4, #0]
 80086f6:	bd38      	pop	{r3, r4, r5, pc}
 80086f8:	200004a4 	.word	0x200004a4

080086fc <nan>:
 80086fc:	4901      	ldr	r1, [pc, #4]	; (8008704 <nan+0x8>)
 80086fe:	2000      	movs	r0, #0
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	7ff80000 	.word	0x7ff80000

08008708 <_sbrk_r>:
 8008708:	b538      	push	{r3, r4, r5, lr}
 800870a:	4d06      	ldr	r5, [pc, #24]	; (8008724 <_sbrk_r+0x1c>)
 800870c:	2300      	movs	r3, #0
 800870e:	4604      	mov	r4, r0
 8008710:	4608      	mov	r0, r1
 8008712:	602b      	str	r3, [r5, #0]
 8008714:	f7f9 fb14 	bl	8001d40 <_sbrk>
 8008718:	1c43      	adds	r3, r0, #1
 800871a:	d102      	bne.n	8008722 <_sbrk_r+0x1a>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	b103      	cbz	r3, 8008722 <_sbrk_r+0x1a>
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	200004a4 	.word	0x200004a4

08008728 <__sccl>:
 8008728:	b570      	push	{r4, r5, r6, lr}
 800872a:	780b      	ldrb	r3, [r1, #0]
 800872c:	4604      	mov	r4, r0
 800872e:	2b5e      	cmp	r3, #94	; 0x5e
 8008730:	bf0b      	itete	eq
 8008732:	784b      	ldrbeq	r3, [r1, #1]
 8008734:	1c48      	addne	r0, r1, #1
 8008736:	1c88      	addeq	r0, r1, #2
 8008738:	2200      	movne	r2, #0
 800873a:	bf08      	it	eq
 800873c:	2201      	moveq	r2, #1
 800873e:	1e61      	subs	r1, r4, #1
 8008740:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008744:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008748:	42a9      	cmp	r1, r5
 800874a:	d1fb      	bne.n	8008744 <__sccl+0x1c>
 800874c:	b90b      	cbnz	r3, 8008752 <__sccl+0x2a>
 800874e:	3801      	subs	r0, #1
 8008750:	bd70      	pop	{r4, r5, r6, pc}
 8008752:	f082 0101 	eor.w	r1, r2, #1
 8008756:	54e1      	strb	r1, [r4, r3]
 8008758:	1c42      	adds	r2, r0, #1
 800875a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800875e:	2d2d      	cmp	r5, #45	; 0x2d
 8008760:	f102 36ff 	add.w	r6, r2, #4294967295
 8008764:	4610      	mov	r0, r2
 8008766:	d006      	beq.n	8008776 <__sccl+0x4e>
 8008768:	2d5d      	cmp	r5, #93	; 0x5d
 800876a:	d0f1      	beq.n	8008750 <__sccl+0x28>
 800876c:	b90d      	cbnz	r5, 8008772 <__sccl+0x4a>
 800876e:	4630      	mov	r0, r6
 8008770:	e7ee      	b.n	8008750 <__sccl+0x28>
 8008772:	462b      	mov	r3, r5
 8008774:	e7ef      	b.n	8008756 <__sccl+0x2e>
 8008776:	7816      	ldrb	r6, [r2, #0]
 8008778:	2e5d      	cmp	r6, #93	; 0x5d
 800877a:	d0fa      	beq.n	8008772 <__sccl+0x4a>
 800877c:	42b3      	cmp	r3, r6
 800877e:	dcf8      	bgt.n	8008772 <__sccl+0x4a>
 8008780:	4618      	mov	r0, r3
 8008782:	3001      	adds	r0, #1
 8008784:	4286      	cmp	r6, r0
 8008786:	5421      	strb	r1, [r4, r0]
 8008788:	dcfb      	bgt.n	8008782 <__sccl+0x5a>
 800878a:	43d8      	mvns	r0, r3
 800878c:	4430      	add	r0, r6
 800878e:	1c5d      	adds	r5, r3, #1
 8008790:	42b3      	cmp	r3, r6
 8008792:	bfa8      	it	ge
 8008794:	2000      	movge	r0, #0
 8008796:	182b      	adds	r3, r5, r0
 8008798:	3202      	adds	r2, #2
 800879a:	e7de      	b.n	800875a <__sccl+0x32>

0800879c <strncmp>:
 800879c:	b510      	push	{r4, lr}
 800879e:	b16a      	cbz	r2, 80087bc <strncmp+0x20>
 80087a0:	3901      	subs	r1, #1
 80087a2:	1884      	adds	r4, r0, r2
 80087a4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80087a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d103      	bne.n	80087b8 <strncmp+0x1c>
 80087b0:	42a0      	cmp	r0, r4
 80087b2:	d001      	beq.n	80087b8 <strncmp+0x1c>
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1f5      	bne.n	80087a4 <strncmp+0x8>
 80087b8:	1a98      	subs	r0, r3, r2
 80087ba:	bd10      	pop	{r4, pc}
 80087bc:	4610      	mov	r0, r2
 80087be:	e7fc      	b.n	80087ba <strncmp+0x1e>

080087c0 <_strtoul_l.isra.0>:
 80087c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087c4:	4e3b      	ldr	r6, [pc, #236]	; (80088b4 <_strtoul_l.isra.0+0xf4>)
 80087c6:	4686      	mov	lr, r0
 80087c8:	468c      	mov	ip, r1
 80087ca:	4660      	mov	r0, ip
 80087cc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80087d0:	5da5      	ldrb	r5, [r4, r6]
 80087d2:	f015 0508 	ands.w	r5, r5, #8
 80087d6:	d1f8      	bne.n	80087ca <_strtoul_l.isra.0+0xa>
 80087d8:	2c2d      	cmp	r4, #45	; 0x2d
 80087da:	d134      	bne.n	8008846 <_strtoul_l.isra.0+0x86>
 80087dc:	f89c 4000 	ldrb.w	r4, [ip]
 80087e0:	f04f 0801 	mov.w	r8, #1
 80087e4:	f100 0c02 	add.w	ip, r0, #2
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d05e      	beq.n	80088aa <_strtoul_l.isra.0+0xea>
 80087ec:	2b10      	cmp	r3, #16
 80087ee:	d10c      	bne.n	800880a <_strtoul_l.isra.0+0x4a>
 80087f0:	2c30      	cmp	r4, #48	; 0x30
 80087f2:	d10a      	bne.n	800880a <_strtoul_l.isra.0+0x4a>
 80087f4:	f89c 0000 	ldrb.w	r0, [ip]
 80087f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80087fc:	2858      	cmp	r0, #88	; 0x58
 80087fe:	d14f      	bne.n	80088a0 <_strtoul_l.isra.0+0xe0>
 8008800:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8008804:	2310      	movs	r3, #16
 8008806:	f10c 0c02 	add.w	ip, ip, #2
 800880a:	f04f 37ff 	mov.w	r7, #4294967295
 800880e:	2500      	movs	r5, #0
 8008810:	fbb7 f7f3 	udiv	r7, r7, r3
 8008814:	fb03 f907 	mul.w	r9, r3, r7
 8008818:	ea6f 0909 	mvn.w	r9, r9
 800881c:	4628      	mov	r0, r5
 800881e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8008822:	2e09      	cmp	r6, #9
 8008824:	d818      	bhi.n	8008858 <_strtoul_l.isra.0+0x98>
 8008826:	4634      	mov	r4, r6
 8008828:	42a3      	cmp	r3, r4
 800882a:	dd24      	ble.n	8008876 <_strtoul_l.isra.0+0xb6>
 800882c:	2d00      	cmp	r5, #0
 800882e:	db1f      	blt.n	8008870 <_strtoul_l.isra.0+0xb0>
 8008830:	4287      	cmp	r7, r0
 8008832:	d31d      	bcc.n	8008870 <_strtoul_l.isra.0+0xb0>
 8008834:	d101      	bne.n	800883a <_strtoul_l.isra.0+0x7a>
 8008836:	45a1      	cmp	r9, r4
 8008838:	db1a      	blt.n	8008870 <_strtoul_l.isra.0+0xb0>
 800883a:	fb00 4003 	mla	r0, r0, r3, r4
 800883e:	2501      	movs	r5, #1
 8008840:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008844:	e7eb      	b.n	800881e <_strtoul_l.isra.0+0x5e>
 8008846:	2c2b      	cmp	r4, #43	; 0x2b
 8008848:	bf08      	it	eq
 800884a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800884e:	46a8      	mov	r8, r5
 8008850:	bf08      	it	eq
 8008852:	f100 0c02 	addeq.w	ip, r0, #2
 8008856:	e7c7      	b.n	80087e8 <_strtoul_l.isra.0+0x28>
 8008858:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800885c:	2e19      	cmp	r6, #25
 800885e:	d801      	bhi.n	8008864 <_strtoul_l.isra.0+0xa4>
 8008860:	3c37      	subs	r4, #55	; 0x37
 8008862:	e7e1      	b.n	8008828 <_strtoul_l.isra.0+0x68>
 8008864:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8008868:	2e19      	cmp	r6, #25
 800886a:	d804      	bhi.n	8008876 <_strtoul_l.isra.0+0xb6>
 800886c:	3c57      	subs	r4, #87	; 0x57
 800886e:	e7db      	b.n	8008828 <_strtoul_l.isra.0+0x68>
 8008870:	f04f 35ff 	mov.w	r5, #4294967295
 8008874:	e7e4      	b.n	8008840 <_strtoul_l.isra.0+0x80>
 8008876:	2d00      	cmp	r5, #0
 8008878:	da07      	bge.n	800888a <_strtoul_l.isra.0+0xca>
 800887a:	2322      	movs	r3, #34	; 0x22
 800887c:	f8ce 3000 	str.w	r3, [lr]
 8008880:	f04f 30ff 	mov.w	r0, #4294967295
 8008884:	b942      	cbnz	r2, 8008898 <_strtoul_l.isra.0+0xd8>
 8008886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800888a:	f1b8 0f00 	cmp.w	r8, #0
 800888e:	d000      	beq.n	8008892 <_strtoul_l.isra.0+0xd2>
 8008890:	4240      	negs	r0, r0
 8008892:	2a00      	cmp	r2, #0
 8008894:	d0f7      	beq.n	8008886 <_strtoul_l.isra.0+0xc6>
 8008896:	b10d      	cbz	r5, 800889c <_strtoul_l.isra.0+0xdc>
 8008898:	f10c 31ff 	add.w	r1, ip, #4294967295
 800889c:	6011      	str	r1, [r2, #0]
 800889e:	e7f2      	b.n	8008886 <_strtoul_l.isra.0+0xc6>
 80088a0:	2430      	movs	r4, #48	; 0x30
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1b1      	bne.n	800880a <_strtoul_l.isra.0+0x4a>
 80088a6:	2308      	movs	r3, #8
 80088a8:	e7af      	b.n	800880a <_strtoul_l.isra.0+0x4a>
 80088aa:	2c30      	cmp	r4, #48	; 0x30
 80088ac:	d0a2      	beq.n	80087f4 <_strtoul_l.isra.0+0x34>
 80088ae:	230a      	movs	r3, #10
 80088b0:	e7ab      	b.n	800880a <_strtoul_l.isra.0+0x4a>
 80088b2:	bf00      	nop
 80088b4:	08009bc9 	.word	0x08009bc9

080088b8 <_strtoul_r>:
 80088b8:	f7ff bf82 	b.w	80087c0 <_strtoul_l.isra.0>

080088bc <__submore>:
 80088bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c0:	460c      	mov	r4, r1
 80088c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80088c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088c8:	4299      	cmp	r1, r3
 80088ca:	d11d      	bne.n	8008908 <__submore+0x4c>
 80088cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80088d0:	f7ff fa2e 	bl	8007d30 <_malloc_r>
 80088d4:	b918      	cbnz	r0, 80088de <__submore+0x22>
 80088d6:	f04f 30ff 	mov.w	r0, #4294967295
 80088da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088e2:	63a3      	str	r3, [r4, #56]	; 0x38
 80088e4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80088e8:	6360      	str	r0, [r4, #52]	; 0x34
 80088ea:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80088ee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80088f2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80088f6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80088fa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80088fe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008902:	6020      	str	r0, [r4, #0]
 8008904:	2000      	movs	r0, #0
 8008906:	e7e8      	b.n	80088da <__submore+0x1e>
 8008908:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800890a:	0077      	lsls	r7, r6, #1
 800890c:	463a      	mov	r2, r7
 800890e:	f000 fa2d 	bl	8008d6c <_realloc_r>
 8008912:	4605      	mov	r5, r0
 8008914:	2800      	cmp	r0, #0
 8008916:	d0de      	beq.n	80088d6 <__submore+0x1a>
 8008918:	eb00 0806 	add.w	r8, r0, r6
 800891c:	4601      	mov	r1, r0
 800891e:	4632      	mov	r2, r6
 8008920:	4640      	mov	r0, r8
 8008922:	f7fe fce7 	bl	80072f4 <memcpy>
 8008926:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800892a:	f8c4 8000 	str.w	r8, [r4]
 800892e:	e7e9      	b.n	8008904 <__submore+0x48>

08008930 <__ascii_wctomb>:
 8008930:	4603      	mov	r3, r0
 8008932:	4608      	mov	r0, r1
 8008934:	b141      	cbz	r1, 8008948 <__ascii_wctomb+0x18>
 8008936:	2aff      	cmp	r2, #255	; 0xff
 8008938:	d904      	bls.n	8008944 <__ascii_wctomb+0x14>
 800893a:	228a      	movs	r2, #138	; 0x8a
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	f04f 30ff 	mov.w	r0, #4294967295
 8008942:	4770      	bx	lr
 8008944:	700a      	strb	r2, [r1, #0]
 8008946:	2001      	movs	r0, #1
 8008948:	4770      	bx	lr
	...

0800894c <__assert_func>:
 800894c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800894e:	4614      	mov	r4, r2
 8008950:	461a      	mov	r2, r3
 8008952:	4b09      	ldr	r3, [pc, #36]	; (8008978 <__assert_func+0x2c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4605      	mov	r5, r0
 8008958:	68d8      	ldr	r0, [r3, #12]
 800895a:	b14c      	cbz	r4, 8008970 <__assert_func+0x24>
 800895c:	4b07      	ldr	r3, [pc, #28]	; (800897c <__assert_func+0x30>)
 800895e:	9100      	str	r1, [sp, #0]
 8008960:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008964:	4906      	ldr	r1, [pc, #24]	; (8008980 <__assert_func+0x34>)
 8008966:	462b      	mov	r3, r5
 8008968:	f000 f9a6 	bl	8008cb8 <fiprintf>
 800896c:	f000 fc3c 	bl	80091e8 <abort>
 8008970:	4b04      	ldr	r3, [pc, #16]	; (8008984 <__assert_func+0x38>)
 8008972:	461c      	mov	r4, r3
 8008974:	e7f3      	b.n	800895e <__assert_func+0x12>
 8008976:	bf00      	nop
 8008978:	20000000 	.word	0x20000000
 800897c:	08009f68 	.word	0x08009f68
 8008980:	08009f75 	.word	0x08009f75
 8008984:	08009fa3 	.word	0x08009fa3

08008988 <__sflush_r>:
 8008988:	898a      	ldrh	r2, [r1, #12]
 800898a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800898e:	4605      	mov	r5, r0
 8008990:	0710      	lsls	r0, r2, #28
 8008992:	460c      	mov	r4, r1
 8008994:	d458      	bmi.n	8008a48 <__sflush_r+0xc0>
 8008996:	684b      	ldr	r3, [r1, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	dc05      	bgt.n	80089a8 <__sflush_r+0x20>
 800899c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800899e:	2b00      	cmp	r3, #0
 80089a0:	dc02      	bgt.n	80089a8 <__sflush_r+0x20>
 80089a2:	2000      	movs	r0, #0
 80089a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089aa:	2e00      	cmp	r6, #0
 80089ac:	d0f9      	beq.n	80089a2 <__sflush_r+0x1a>
 80089ae:	2300      	movs	r3, #0
 80089b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089b4:	682f      	ldr	r7, [r5, #0]
 80089b6:	602b      	str	r3, [r5, #0]
 80089b8:	d032      	beq.n	8008a20 <__sflush_r+0x98>
 80089ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	075a      	lsls	r2, r3, #29
 80089c0:	d505      	bpl.n	80089ce <__sflush_r+0x46>
 80089c2:	6863      	ldr	r3, [r4, #4]
 80089c4:	1ac0      	subs	r0, r0, r3
 80089c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089c8:	b10b      	cbz	r3, 80089ce <__sflush_r+0x46>
 80089ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089cc:	1ac0      	subs	r0, r0, r3
 80089ce:	2300      	movs	r3, #0
 80089d0:	4602      	mov	r2, r0
 80089d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089d4:	6a21      	ldr	r1, [r4, #32]
 80089d6:	4628      	mov	r0, r5
 80089d8:	47b0      	blx	r6
 80089da:	1c43      	adds	r3, r0, #1
 80089dc:	89a3      	ldrh	r3, [r4, #12]
 80089de:	d106      	bne.n	80089ee <__sflush_r+0x66>
 80089e0:	6829      	ldr	r1, [r5, #0]
 80089e2:	291d      	cmp	r1, #29
 80089e4:	d82c      	bhi.n	8008a40 <__sflush_r+0xb8>
 80089e6:	4a2a      	ldr	r2, [pc, #168]	; (8008a90 <__sflush_r+0x108>)
 80089e8:	40ca      	lsrs	r2, r1
 80089ea:	07d6      	lsls	r6, r2, #31
 80089ec:	d528      	bpl.n	8008a40 <__sflush_r+0xb8>
 80089ee:	2200      	movs	r2, #0
 80089f0:	6062      	str	r2, [r4, #4]
 80089f2:	04d9      	lsls	r1, r3, #19
 80089f4:	6922      	ldr	r2, [r4, #16]
 80089f6:	6022      	str	r2, [r4, #0]
 80089f8:	d504      	bpl.n	8008a04 <__sflush_r+0x7c>
 80089fa:	1c42      	adds	r2, r0, #1
 80089fc:	d101      	bne.n	8008a02 <__sflush_r+0x7a>
 80089fe:	682b      	ldr	r3, [r5, #0]
 8008a00:	b903      	cbnz	r3, 8008a04 <__sflush_r+0x7c>
 8008a02:	6560      	str	r0, [r4, #84]	; 0x54
 8008a04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a06:	602f      	str	r7, [r5, #0]
 8008a08:	2900      	cmp	r1, #0
 8008a0a:	d0ca      	beq.n	80089a2 <__sflush_r+0x1a>
 8008a0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a10:	4299      	cmp	r1, r3
 8008a12:	d002      	beq.n	8008a1a <__sflush_r+0x92>
 8008a14:	4628      	mov	r0, r5
 8008a16:	f7ff f93d 	bl	8007c94 <_free_r>
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	6360      	str	r0, [r4, #52]	; 0x34
 8008a1e:	e7c1      	b.n	80089a4 <__sflush_r+0x1c>
 8008a20:	6a21      	ldr	r1, [r4, #32]
 8008a22:	2301      	movs	r3, #1
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b0      	blx	r6
 8008a28:	1c41      	adds	r1, r0, #1
 8008a2a:	d1c7      	bne.n	80089bc <__sflush_r+0x34>
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0c4      	beq.n	80089bc <__sflush_r+0x34>
 8008a32:	2b1d      	cmp	r3, #29
 8008a34:	d001      	beq.n	8008a3a <__sflush_r+0xb2>
 8008a36:	2b16      	cmp	r3, #22
 8008a38:	d101      	bne.n	8008a3e <__sflush_r+0xb6>
 8008a3a:	602f      	str	r7, [r5, #0]
 8008a3c:	e7b1      	b.n	80089a2 <__sflush_r+0x1a>
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a44:	81a3      	strh	r3, [r4, #12]
 8008a46:	e7ad      	b.n	80089a4 <__sflush_r+0x1c>
 8008a48:	690f      	ldr	r7, [r1, #16]
 8008a4a:	2f00      	cmp	r7, #0
 8008a4c:	d0a9      	beq.n	80089a2 <__sflush_r+0x1a>
 8008a4e:	0793      	lsls	r3, r2, #30
 8008a50:	680e      	ldr	r6, [r1, #0]
 8008a52:	bf08      	it	eq
 8008a54:	694b      	ldreq	r3, [r1, #20]
 8008a56:	600f      	str	r7, [r1, #0]
 8008a58:	bf18      	it	ne
 8008a5a:	2300      	movne	r3, #0
 8008a5c:	eba6 0807 	sub.w	r8, r6, r7
 8008a60:	608b      	str	r3, [r1, #8]
 8008a62:	f1b8 0f00 	cmp.w	r8, #0
 8008a66:	dd9c      	ble.n	80089a2 <__sflush_r+0x1a>
 8008a68:	6a21      	ldr	r1, [r4, #32]
 8008a6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a6c:	4643      	mov	r3, r8
 8008a6e:	463a      	mov	r2, r7
 8008a70:	4628      	mov	r0, r5
 8008a72:	47b0      	blx	r6
 8008a74:	2800      	cmp	r0, #0
 8008a76:	dc06      	bgt.n	8008a86 <__sflush_r+0xfe>
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a7e:	81a3      	strh	r3, [r4, #12]
 8008a80:	f04f 30ff 	mov.w	r0, #4294967295
 8008a84:	e78e      	b.n	80089a4 <__sflush_r+0x1c>
 8008a86:	4407      	add	r7, r0
 8008a88:	eba8 0800 	sub.w	r8, r8, r0
 8008a8c:	e7e9      	b.n	8008a62 <__sflush_r+0xda>
 8008a8e:	bf00      	nop
 8008a90:	20400001 	.word	0x20400001

08008a94 <_fflush_r>:
 8008a94:	b538      	push	{r3, r4, r5, lr}
 8008a96:	690b      	ldr	r3, [r1, #16]
 8008a98:	4605      	mov	r5, r0
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	b913      	cbnz	r3, 8008aa4 <_fflush_r+0x10>
 8008a9e:	2500      	movs	r5, #0
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	bd38      	pop	{r3, r4, r5, pc}
 8008aa4:	b118      	cbz	r0, 8008aae <_fflush_r+0x1a>
 8008aa6:	6983      	ldr	r3, [r0, #24]
 8008aa8:	b90b      	cbnz	r3, 8008aae <_fflush_r+0x1a>
 8008aaa:	f000 f887 	bl	8008bbc <__sinit>
 8008aae:	4b14      	ldr	r3, [pc, #80]	; (8008b00 <_fflush_r+0x6c>)
 8008ab0:	429c      	cmp	r4, r3
 8008ab2:	d11b      	bne.n	8008aec <_fflush_r+0x58>
 8008ab4:	686c      	ldr	r4, [r5, #4]
 8008ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d0ef      	beq.n	8008a9e <_fflush_r+0xa>
 8008abe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ac0:	07d0      	lsls	r0, r2, #31
 8008ac2:	d404      	bmi.n	8008ace <_fflush_r+0x3a>
 8008ac4:	0599      	lsls	r1, r3, #22
 8008ac6:	d402      	bmi.n	8008ace <_fflush_r+0x3a>
 8008ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aca:	f000 f927 	bl	8008d1c <__retarget_lock_acquire_recursive>
 8008ace:	4628      	mov	r0, r5
 8008ad0:	4621      	mov	r1, r4
 8008ad2:	f7ff ff59 	bl	8008988 <__sflush_r>
 8008ad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ad8:	07da      	lsls	r2, r3, #31
 8008ada:	4605      	mov	r5, r0
 8008adc:	d4e0      	bmi.n	8008aa0 <_fflush_r+0xc>
 8008ade:	89a3      	ldrh	r3, [r4, #12]
 8008ae0:	059b      	lsls	r3, r3, #22
 8008ae2:	d4dd      	bmi.n	8008aa0 <_fflush_r+0xc>
 8008ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ae6:	f000 f91a 	bl	8008d1e <__retarget_lock_release_recursive>
 8008aea:	e7d9      	b.n	8008aa0 <_fflush_r+0xc>
 8008aec:	4b05      	ldr	r3, [pc, #20]	; (8008b04 <_fflush_r+0x70>)
 8008aee:	429c      	cmp	r4, r3
 8008af0:	d101      	bne.n	8008af6 <_fflush_r+0x62>
 8008af2:	68ac      	ldr	r4, [r5, #8]
 8008af4:	e7df      	b.n	8008ab6 <_fflush_r+0x22>
 8008af6:	4b04      	ldr	r3, [pc, #16]	; (8008b08 <_fflush_r+0x74>)
 8008af8:	429c      	cmp	r4, r3
 8008afa:	bf08      	it	eq
 8008afc:	68ec      	ldreq	r4, [r5, #12]
 8008afe:	e7da      	b.n	8008ab6 <_fflush_r+0x22>
 8008b00:	08009fc4 	.word	0x08009fc4
 8008b04:	08009fe4 	.word	0x08009fe4
 8008b08:	08009fa4 	.word	0x08009fa4

08008b0c <std>:
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	b510      	push	{r4, lr}
 8008b10:	4604      	mov	r4, r0
 8008b12:	e9c0 3300 	strd	r3, r3, [r0]
 8008b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b1a:	6083      	str	r3, [r0, #8]
 8008b1c:	8181      	strh	r1, [r0, #12]
 8008b1e:	6643      	str	r3, [r0, #100]	; 0x64
 8008b20:	81c2      	strh	r2, [r0, #14]
 8008b22:	6183      	str	r3, [r0, #24]
 8008b24:	4619      	mov	r1, r3
 8008b26:	2208      	movs	r2, #8
 8008b28:	305c      	adds	r0, #92	; 0x5c
 8008b2a:	f7fb fc09 	bl	8004340 <memset>
 8008b2e:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <std+0x38>)
 8008b30:	6263      	str	r3, [r4, #36]	; 0x24
 8008b32:	4b05      	ldr	r3, [pc, #20]	; (8008b48 <std+0x3c>)
 8008b34:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b36:	4b05      	ldr	r3, [pc, #20]	; (8008b4c <std+0x40>)
 8008b38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b3a:	4b05      	ldr	r3, [pc, #20]	; (8008b50 <std+0x44>)
 8008b3c:	6224      	str	r4, [r4, #32]
 8008b3e:	6323      	str	r3, [r4, #48]	; 0x30
 8008b40:	bd10      	pop	{r4, pc}
 8008b42:	bf00      	nop
 8008b44:	080050c5 	.word	0x080050c5
 8008b48:	080050eb 	.word	0x080050eb
 8008b4c:	08005123 	.word	0x08005123
 8008b50:	08005147 	.word	0x08005147

08008b54 <_cleanup_r>:
 8008b54:	4901      	ldr	r1, [pc, #4]	; (8008b5c <_cleanup_r+0x8>)
 8008b56:	f000 b8c1 	b.w	8008cdc <_fwalk_reent>
 8008b5a:	bf00      	nop
 8008b5c:	08008a95 	.word	0x08008a95

08008b60 <__sfmoreglue>:
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	1e4a      	subs	r2, r1, #1
 8008b64:	2568      	movs	r5, #104	; 0x68
 8008b66:	4355      	muls	r5, r2
 8008b68:	460e      	mov	r6, r1
 8008b6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b6e:	f7ff f8df 	bl	8007d30 <_malloc_r>
 8008b72:	4604      	mov	r4, r0
 8008b74:	b140      	cbz	r0, 8008b88 <__sfmoreglue+0x28>
 8008b76:	2100      	movs	r1, #0
 8008b78:	e9c0 1600 	strd	r1, r6, [r0]
 8008b7c:	300c      	adds	r0, #12
 8008b7e:	60a0      	str	r0, [r4, #8]
 8008b80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b84:	f7fb fbdc 	bl	8004340 <memset>
 8008b88:	4620      	mov	r0, r4
 8008b8a:	bd70      	pop	{r4, r5, r6, pc}

08008b8c <__sfp_lock_acquire>:
 8008b8c:	4801      	ldr	r0, [pc, #4]	; (8008b94 <__sfp_lock_acquire+0x8>)
 8008b8e:	f000 b8c5 	b.w	8008d1c <__retarget_lock_acquire_recursive>
 8008b92:	bf00      	nop
 8008b94:	200004b0 	.word	0x200004b0

08008b98 <__sfp_lock_release>:
 8008b98:	4801      	ldr	r0, [pc, #4]	; (8008ba0 <__sfp_lock_release+0x8>)
 8008b9a:	f000 b8c0 	b.w	8008d1e <__retarget_lock_release_recursive>
 8008b9e:	bf00      	nop
 8008ba0:	200004b0 	.word	0x200004b0

08008ba4 <__sinit_lock_acquire>:
 8008ba4:	4801      	ldr	r0, [pc, #4]	; (8008bac <__sinit_lock_acquire+0x8>)
 8008ba6:	f000 b8b9 	b.w	8008d1c <__retarget_lock_acquire_recursive>
 8008baa:	bf00      	nop
 8008bac:	200004ab 	.word	0x200004ab

08008bb0 <__sinit_lock_release>:
 8008bb0:	4801      	ldr	r0, [pc, #4]	; (8008bb8 <__sinit_lock_release+0x8>)
 8008bb2:	f000 b8b4 	b.w	8008d1e <__retarget_lock_release_recursive>
 8008bb6:	bf00      	nop
 8008bb8:	200004ab 	.word	0x200004ab

08008bbc <__sinit>:
 8008bbc:	b510      	push	{r4, lr}
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	f7ff fff0 	bl	8008ba4 <__sinit_lock_acquire>
 8008bc4:	69a3      	ldr	r3, [r4, #24]
 8008bc6:	b11b      	cbz	r3, 8008bd0 <__sinit+0x14>
 8008bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bcc:	f7ff bff0 	b.w	8008bb0 <__sinit_lock_release>
 8008bd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008bd4:	6523      	str	r3, [r4, #80]	; 0x50
 8008bd6:	4b13      	ldr	r3, [pc, #76]	; (8008c24 <__sinit+0x68>)
 8008bd8:	4a13      	ldr	r2, [pc, #76]	; (8008c28 <__sinit+0x6c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	62a2      	str	r2, [r4, #40]	; 0x28
 8008bde:	42a3      	cmp	r3, r4
 8008be0:	bf04      	itt	eq
 8008be2:	2301      	moveq	r3, #1
 8008be4:	61a3      	streq	r3, [r4, #24]
 8008be6:	4620      	mov	r0, r4
 8008be8:	f000 f820 	bl	8008c2c <__sfp>
 8008bec:	6060      	str	r0, [r4, #4]
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f000 f81c 	bl	8008c2c <__sfp>
 8008bf4:	60a0      	str	r0, [r4, #8]
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f000 f818 	bl	8008c2c <__sfp>
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	60e0      	str	r0, [r4, #12]
 8008c00:	2104      	movs	r1, #4
 8008c02:	6860      	ldr	r0, [r4, #4]
 8008c04:	f7ff ff82 	bl	8008b0c <std>
 8008c08:	68a0      	ldr	r0, [r4, #8]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	2109      	movs	r1, #9
 8008c0e:	f7ff ff7d 	bl	8008b0c <std>
 8008c12:	68e0      	ldr	r0, [r4, #12]
 8008c14:	2202      	movs	r2, #2
 8008c16:	2112      	movs	r1, #18
 8008c18:	f7ff ff78 	bl	8008b0c <std>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	61a3      	str	r3, [r4, #24]
 8008c20:	e7d2      	b.n	8008bc8 <__sinit+0xc>
 8008c22:	bf00      	nop
 8008c24:	08009b38 	.word	0x08009b38
 8008c28:	08008b55 	.word	0x08008b55

08008c2c <__sfp>:
 8008c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2e:	4607      	mov	r7, r0
 8008c30:	f7ff ffac 	bl	8008b8c <__sfp_lock_acquire>
 8008c34:	4b1e      	ldr	r3, [pc, #120]	; (8008cb0 <__sfp+0x84>)
 8008c36:	681e      	ldr	r6, [r3, #0]
 8008c38:	69b3      	ldr	r3, [r6, #24]
 8008c3a:	b913      	cbnz	r3, 8008c42 <__sfp+0x16>
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f7ff ffbd 	bl	8008bbc <__sinit>
 8008c42:	3648      	adds	r6, #72	; 0x48
 8008c44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	d503      	bpl.n	8008c54 <__sfp+0x28>
 8008c4c:	6833      	ldr	r3, [r6, #0]
 8008c4e:	b30b      	cbz	r3, 8008c94 <__sfp+0x68>
 8008c50:	6836      	ldr	r6, [r6, #0]
 8008c52:	e7f7      	b.n	8008c44 <__sfp+0x18>
 8008c54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c58:	b9d5      	cbnz	r5, 8008c90 <__sfp+0x64>
 8008c5a:	4b16      	ldr	r3, [pc, #88]	; (8008cb4 <__sfp+0x88>)
 8008c5c:	60e3      	str	r3, [r4, #12]
 8008c5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c62:	6665      	str	r5, [r4, #100]	; 0x64
 8008c64:	f000 f859 	bl	8008d1a <__retarget_lock_init_recursive>
 8008c68:	f7ff ff96 	bl	8008b98 <__sfp_lock_release>
 8008c6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c74:	6025      	str	r5, [r4, #0]
 8008c76:	61a5      	str	r5, [r4, #24]
 8008c78:	2208      	movs	r2, #8
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c80:	f7fb fb5e 	bl	8004340 <memset>
 8008c84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c90:	3468      	adds	r4, #104	; 0x68
 8008c92:	e7d9      	b.n	8008c48 <__sfp+0x1c>
 8008c94:	2104      	movs	r1, #4
 8008c96:	4638      	mov	r0, r7
 8008c98:	f7ff ff62 	bl	8008b60 <__sfmoreglue>
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	6030      	str	r0, [r6, #0]
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	d1d5      	bne.n	8008c50 <__sfp+0x24>
 8008ca4:	f7ff ff78 	bl	8008b98 <__sfp_lock_release>
 8008ca8:	230c      	movs	r3, #12
 8008caa:	603b      	str	r3, [r7, #0]
 8008cac:	e7ee      	b.n	8008c8c <__sfp+0x60>
 8008cae:	bf00      	nop
 8008cb0:	08009b38 	.word	0x08009b38
 8008cb4:	ffff0001 	.word	0xffff0001

08008cb8 <fiprintf>:
 8008cb8:	b40e      	push	{r1, r2, r3}
 8008cba:	b503      	push	{r0, r1, lr}
 8008cbc:	4601      	mov	r1, r0
 8008cbe:	ab03      	add	r3, sp, #12
 8008cc0:	4805      	ldr	r0, [pc, #20]	; (8008cd8 <fiprintf+0x20>)
 8008cc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cc6:	6800      	ldr	r0, [r0, #0]
 8008cc8:	9301      	str	r3, [sp, #4]
 8008cca:	f000 f89d 	bl	8008e08 <_vfiprintf_r>
 8008cce:	b002      	add	sp, #8
 8008cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cd4:	b003      	add	sp, #12
 8008cd6:	4770      	bx	lr
 8008cd8:	20000000 	.word	0x20000000

08008cdc <_fwalk_reent>:
 8008cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ce0:	4606      	mov	r6, r0
 8008ce2:	4688      	mov	r8, r1
 8008ce4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ce8:	2700      	movs	r7, #0
 8008cea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cee:	f1b9 0901 	subs.w	r9, r9, #1
 8008cf2:	d505      	bpl.n	8008d00 <_fwalk_reent+0x24>
 8008cf4:	6824      	ldr	r4, [r4, #0]
 8008cf6:	2c00      	cmp	r4, #0
 8008cf8:	d1f7      	bne.n	8008cea <_fwalk_reent+0xe>
 8008cfa:	4638      	mov	r0, r7
 8008cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d00:	89ab      	ldrh	r3, [r5, #12]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d907      	bls.n	8008d16 <_fwalk_reent+0x3a>
 8008d06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	d003      	beq.n	8008d16 <_fwalk_reent+0x3a>
 8008d0e:	4629      	mov	r1, r5
 8008d10:	4630      	mov	r0, r6
 8008d12:	47c0      	blx	r8
 8008d14:	4307      	orrs	r7, r0
 8008d16:	3568      	adds	r5, #104	; 0x68
 8008d18:	e7e9      	b.n	8008cee <_fwalk_reent+0x12>

08008d1a <__retarget_lock_init_recursive>:
 8008d1a:	4770      	bx	lr

08008d1c <__retarget_lock_acquire_recursive>:
 8008d1c:	4770      	bx	lr

08008d1e <__retarget_lock_release_recursive>:
 8008d1e:	4770      	bx	lr

08008d20 <memmove>:
 8008d20:	4288      	cmp	r0, r1
 8008d22:	b510      	push	{r4, lr}
 8008d24:	eb01 0402 	add.w	r4, r1, r2
 8008d28:	d902      	bls.n	8008d30 <memmove+0x10>
 8008d2a:	4284      	cmp	r4, r0
 8008d2c:	4623      	mov	r3, r4
 8008d2e:	d807      	bhi.n	8008d40 <memmove+0x20>
 8008d30:	1e43      	subs	r3, r0, #1
 8008d32:	42a1      	cmp	r1, r4
 8008d34:	d008      	beq.n	8008d48 <memmove+0x28>
 8008d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d3e:	e7f8      	b.n	8008d32 <memmove+0x12>
 8008d40:	4402      	add	r2, r0
 8008d42:	4601      	mov	r1, r0
 8008d44:	428a      	cmp	r2, r1
 8008d46:	d100      	bne.n	8008d4a <memmove+0x2a>
 8008d48:	bd10      	pop	{r4, pc}
 8008d4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d52:	e7f7      	b.n	8008d44 <memmove+0x24>

08008d54 <__malloc_lock>:
 8008d54:	4801      	ldr	r0, [pc, #4]	; (8008d5c <__malloc_lock+0x8>)
 8008d56:	f7ff bfe1 	b.w	8008d1c <__retarget_lock_acquire_recursive>
 8008d5a:	bf00      	nop
 8008d5c:	200004ac 	.word	0x200004ac

08008d60 <__malloc_unlock>:
 8008d60:	4801      	ldr	r0, [pc, #4]	; (8008d68 <__malloc_unlock+0x8>)
 8008d62:	f7ff bfdc 	b.w	8008d1e <__retarget_lock_release_recursive>
 8008d66:	bf00      	nop
 8008d68:	200004ac 	.word	0x200004ac

08008d6c <_realloc_r>:
 8008d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6e:	4607      	mov	r7, r0
 8008d70:	4614      	mov	r4, r2
 8008d72:	460e      	mov	r6, r1
 8008d74:	b921      	cbnz	r1, 8008d80 <_realloc_r+0x14>
 8008d76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d7a:	4611      	mov	r1, r2
 8008d7c:	f7fe bfd8 	b.w	8007d30 <_malloc_r>
 8008d80:	b922      	cbnz	r2, 8008d8c <_realloc_r+0x20>
 8008d82:	f7fe ff87 	bl	8007c94 <_free_r>
 8008d86:	4625      	mov	r5, r4
 8008d88:	4628      	mov	r0, r5
 8008d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d8c:	f000 fa98 	bl	80092c0 <_malloc_usable_size_r>
 8008d90:	42a0      	cmp	r0, r4
 8008d92:	d20f      	bcs.n	8008db4 <_realloc_r+0x48>
 8008d94:	4621      	mov	r1, r4
 8008d96:	4638      	mov	r0, r7
 8008d98:	f7fe ffca 	bl	8007d30 <_malloc_r>
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	d0f2      	beq.n	8008d88 <_realloc_r+0x1c>
 8008da2:	4631      	mov	r1, r6
 8008da4:	4622      	mov	r2, r4
 8008da6:	f7fe faa5 	bl	80072f4 <memcpy>
 8008daa:	4631      	mov	r1, r6
 8008dac:	4638      	mov	r0, r7
 8008dae:	f7fe ff71 	bl	8007c94 <_free_r>
 8008db2:	e7e9      	b.n	8008d88 <_realloc_r+0x1c>
 8008db4:	4635      	mov	r5, r6
 8008db6:	e7e7      	b.n	8008d88 <_realloc_r+0x1c>

08008db8 <__sfputc_r>:
 8008db8:	6893      	ldr	r3, [r2, #8]
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	b410      	push	{r4}
 8008dc0:	6093      	str	r3, [r2, #8]
 8008dc2:	da07      	bge.n	8008dd4 <__sfputc_r+0x1c>
 8008dc4:	6994      	ldr	r4, [r2, #24]
 8008dc6:	42a3      	cmp	r3, r4
 8008dc8:	db01      	blt.n	8008dce <__sfputc_r+0x16>
 8008dca:	290a      	cmp	r1, #10
 8008dcc:	d102      	bne.n	8008dd4 <__sfputc_r+0x1c>
 8008dce:	bc10      	pop	{r4}
 8008dd0:	f000 b94a 	b.w	8009068 <__swbuf_r>
 8008dd4:	6813      	ldr	r3, [r2, #0]
 8008dd6:	1c58      	adds	r0, r3, #1
 8008dd8:	6010      	str	r0, [r2, #0]
 8008dda:	7019      	strb	r1, [r3, #0]
 8008ddc:	4608      	mov	r0, r1
 8008dde:	bc10      	pop	{r4}
 8008de0:	4770      	bx	lr

08008de2 <__sfputs_r>:
 8008de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de4:	4606      	mov	r6, r0
 8008de6:	460f      	mov	r7, r1
 8008de8:	4614      	mov	r4, r2
 8008dea:	18d5      	adds	r5, r2, r3
 8008dec:	42ac      	cmp	r4, r5
 8008dee:	d101      	bne.n	8008df4 <__sfputs_r+0x12>
 8008df0:	2000      	movs	r0, #0
 8008df2:	e007      	b.n	8008e04 <__sfputs_r+0x22>
 8008df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008df8:	463a      	mov	r2, r7
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	f7ff ffdc 	bl	8008db8 <__sfputc_r>
 8008e00:	1c43      	adds	r3, r0, #1
 8008e02:	d1f3      	bne.n	8008dec <__sfputs_r+0xa>
 8008e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e08 <_vfiprintf_r>:
 8008e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0c:	460d      	mov	r5, r1
 8008e0e:	b09d      	sub	sp, #116	; 0x74
 8008e10:	4614      	mov	r4, r2
 8008e12:	4698      	mov	r8, r3
 8008e14:	4606      	mov	r6, r0
 8008e16:	b118      	cbz	r0, 8008e20 <_vfiprintf_r+0x18>
 8008e18:	6983      	ldr	r3, [r0, #24]
 8008e1a:	b90b      	cbnz	r3, 8008e20 <_vfiprintf_r+0x18>
 8008e1c:	f7ff fece 	bl	8008bbc <__sinit>
 8008e20:	4b89      	ldr	r3, [pc, #548]	; (8009048 <_vfiprintf_r+0x240>)
 8008e22:	429d      	cmp	r5, r3
 8008e24:	d11b      	bne.n	8008e5e <_vfiprintf_r+0x56>
 8008e26:	6875      	ldr	r5, [r6, #4]
 8008e28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e2a:	07d9      	lsls	r1, r3, #31
 8008e2c:	d405      	bmi.n	8008e3a <_vfiprintf_r+0x32>
 8008e2e:	89ab      	ldrh	r3, [r5, #12]
 8008e30:	059a      	lsls	r2, r3, #22
 8008e32:	d402      	bmi.n	8008e3a <_vfiprintf_r+0x32>
 8008e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e36:	f7ff ff71 	bl	8008d1c <__retarget_lock_acquire_recursive>
 8008e3a:	89ab      	ldrh	r3, [r5, #12]
 8008e3c:	071b      	lsls	r3, r3, #28
 8008e3e:	d501      	bpl.n	8008e44 <_vfiprintf_r+0x3c>
 8008e40:	692b      	ldr	r3, [r5, #16]
 8008e42:	b9eb      	cbnz	r3, 8008e80 <_vfiprintf_r+0x78>
 8008e44:	4629      	mov	r1, r5
 8008e46:	4630      	mov	r0, r6
 8008e48:	f000 f960 	bl	800910c <__swsetup_r>
 8008e4c:	b1c0      	cbz	r0, 8008e80 <_vfiprintf_r+0x78>
 8008e4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e50:	07dc      	lsls	r4, r3, #31
 8008e52:	d50e      	bpl.n	8008e72 <_vfiprintf_r+0x6a>
 8008e54:	f04f 30ff 	mov.w	r0, #4294967295
 8008e58:	b01d      	add	sp, #116	; 0x74
 8008e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5e:	4b7b      	ldr	r3, [pc, #492]	; (800904c <_vfiprintf_r+0x244>)
 8008e60:	429d      	cmp	r5, r3
 8008e62:	d101      	bne.n	8008e68 <_vfiprintf_r+0x60>
 8008e64:	68b5      	ldr	r5, [r6, #8]
 8008e66:	e7df      	b.n	8008e28 <_vfiprintf_r+0x20>
 8008e68:	4b79      	ldr	r3, [pc, #484]	; (8009050 <_vfiprintf_r+0x248>)
 8008e6a:	429d      	cmp	r5, r3
 8008e6c:	bf08      	it	eq
 8008e6e:	68f5      	ldreq	r5, [r6, #12]
 8008e70:	e7da      	b.n	8008e28 <_vfiprintf_r+0x20>
 8008e72:	89ab      	ldrh	r3, [r5, #12]
 8008e74:	0598      	lsls	r0, r3, #22
 8008e76:	d4ed      	bmi.n	8008e54 <_vfiprintf_r+0x4c>
 8008e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e7a:	f7ff ff50 	bl	8008d1e <__retarget_lock_release_recursive>
 8008e7e:	e7e9      	b.n	8008e54 <_vfiprintf_r+0x4c>
 8008e80:	2300      	movs	r3, #0
 8008e82:	9309      	str	r3, [sp, #36]	; 0x24
 8008e84:	2320      	movs	r3, #32
 8008e86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e8e:	2330      	movs	r3, #48	; 0x30
 8008e90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009054 <_vfiprintf_r+0x24c>
 8008e94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e98:	f04f 0901 	mov.w	r9, #1
 8008e9c:	4623      	mov	r3, r4
 8008e9e:	469a      	mov	sl, r3
 8008ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ea4:	b10a      	cbz	r2, 8008eaa <_vfiprintf_r+0xa2>
 8008ea6:	2a25      	cmp	r2, #37	; 0x25
 8008ea8:	d1f9      	bne.n	8008e9e <_vfiprintf_r+0x96>
 8008eaa:	ebba 0b04 	subs.w	fp, sl, r4
 8008eae:	d00b      	beq.n	8008ec8 <_vfiprintf_r+0xc0>
 8008eb0:	465b      	mov	r3, fp
 8008eb2:	4622      	mov	r2, r4
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	f7ff ff93 	bl	8008de2 <__sfputs_r>
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	f000 80aa 	beq.w	8009016 <_vfiprintf_r+0x20e>
 8008ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ec4:	445a      	add	r2, fp
 8008ec6:	9209      	str	r2, [sp, #36]	; 0x24
 8008ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 80a2 	beq.w	8009016 <_vfiprintf_r+0x20e>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008edc:	f10a 0a01 	add.w	sl, sl, #1
 8008ee0:	9304      	str	r3, [sp, #16]
 8008ee2:	9307      	str	r3, [sp, #28]
 8008ee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ee8:	931a      	str	r3, [sp, #104]	; 0x68
 8008eea:	4654      	mov	r4, sl
 8008eec:	2205      	movs	r2, #5
 8008eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef2:	4858      	ldr	r0, [pc, #352]	; (8009054 <_vfiprintf_r+0x24c>)
 8008ef4:	f7f7 f98c 	bl	8000210 <memchr>
 8008ef8:	9a04      	ldr	r2, [sp, #16]
 8008efa:	b9d8      	cbnz	r0, 8008f34 <_vfiprintf_r+0x12c>
 8008efc:	06d1      	lsls	r1, r2, #27
 8008efe:	bf44      	itt	mi
 8008f00:	2320      	movmi	r3, #32
 8008f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f06:	0713      	lsls	r3, r2, #28
 8008f08:	bf44      	itt	mi
 8008f0a:	232b      	movmi	r3, #43	; 0x2b
 8008f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f10:	f89a 3000 	ldrb.w	r3, [sl]
 8008f14:	2b2a      	cmp	r3, #42	; 0x2a
 8008f16:	d015      	beq.n	8008f44 <_vfiprintf_r+0x13c>
 8008f18:	9a07      	ldr	r2, [sp, #28]
 8008f1a:	4654      	mov	r4, sl
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	f04f 0c0a 	mov.w	ip, #10
 8008f22:	4621      	mov	r1, r4
 8008f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f28:	3b30      	subs	r3, #48	; 0x30
 8008f2a:	2b09      	cmp	r3, #9
 8008f2c:	d94e      	bls.n	8008fcc <_vfiprintf_r+0x1c4>
 8008f2e:	b1b0      	cbz	r0, 8008f5e <_vfiprintf_r+0x156>
 8008f30:	9207      	str	r2, [sp, #28]
 8008f32:	e014      	b.n	8008f5e <_vfiprintf_r+0x156>
 8008f34:	eba0 0308 	sub.w	r3, r0, r8
 8008f38:	fa09 f303 	lsl.w	r3, r9, r3
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	9304      	str	r3, [sp, #16]
 8008f40:	46a2      	mov	sl, r4
 8008f42:	e7d2      	b.n	8008eea <_vfiprintf_r+0xe2>
 8008f44:	9b03      	ldr	r3, [sp, #12]
 8008f46:	1d19      	adds	r1, r3, #4
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	9103      	str	r1, [sp, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	bfbb      	ittet	lt
 8008f50:	425b      	neglt	r3, r3
 8008f52:	f042 0202 	orrlt.w	r2, r2, #2
 8008f56:	9307      	strge	r3, [sp, #28]
 8008f58:	9307      	strlt	r3, [sp, #28]
 8008f5a:	bfb8      	it	lt
 8008f5c:	9204      	strlt	r2, [sp, #16]
 8008f5e:	7823      	ldrb	r3, [r4, #0]
 8008f60:	2b2e      	cmp	r3, #46	; 0x2e
 8008f62:	d10c      	bne.n	8008f7e <_vfiprintf_r+0x176>
 8008f64:	7863      	ldrb	r3, [r4, #1]
 8008f66:	2b2a      	cmp	r3, #42	; 0x2a
 8008f68:	d135      	bne.n	8008fd6 <_vfiprintf_r+0x1ce>
 8008f6a:	9b03      	ldr	r3, [sp, #12]
 8008f6c:	1d1a      	adds	r2, r3, #4
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	9203      	str	r2, [sp, #12]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	bfb8      	it	lt
 8008f76:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f7a:	3402      	adds	r4, #2
 8008f7c:	9305      	str	r3, [sp, #20]
 8008f7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009064 <_vfiprintf_r+0x25c>
 8008f82:	7821      	ldrb	r1, [r4, #0]
 8008f84:	2203      	movs	r2, #3
 8008f86:	4650      	mov	r0, sl
 8008f88:	f7f7 f942 	bl	8000210 <memchr>
 8008f8c:	b140      	cbz	r0, 8008fa0 <_vfiprintf_r+0x198>
 8008f8e:	2340      	movs	r3, #64	; 0x40
 8008f90:	eba0 000a 	sub.w	r0, r0, sl
 8008f94:	fa03 f000 	lsl.w	r0, r3, r0
 8008f98:	9b04      	ldr	r3, [sp, #16]
 8008f9a:	4303      	orrs	r3, r0
 8008f9c:	3401      	adds	r4, #1
 8008f9e:	9304      	str	r3, [sp, #16]
 8008fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa4:	482c      	ldr	r0, [pc, #176]	; (8009058 <_vfiprintf_r+0x250>)
 8008fa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008faa:	2206      	movs	r2, #6
 8008fac:	f7f7 f930 	bl	8000210 <memchr>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d03f      	beq.n	8009034 <_vfiprintf_r+0x22c>
 8008fb4:	4b29      	ldr	r3, [pc, #164]	; (800905c <_vfiprintf_r+0x254>)
 8008fb6:	bb1b      	cbnz	r3, 8009000 <_vfiprintf_r+0x1f8>
 8008fb8:	9b03      	ldr	r3, [sp, #12]
 8008fba:	3307      	adds	r3, #7
 8008fbc:	f023 0307 	bic.w	r3, r3, #7
 8008fc0:	3308      	adds	r3, #8
 8008fc2:	9303      	str	r3, [sp, #12]
 8008fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fc6:	443b      	add	r3, r7
 8008fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8008fca:	e767      	b.n	8008e9c <_vfiprintf_r+0x94>
 8008fcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fd0:	460c      	mov	r4, r1
 8008fd2:	2001      	movs	r0, #1
 8008fd4:	e7a5      	b.n	8008f22 <_vfiprintf_r+0x11a>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	3401      	adds	r4, #1
 8008fda:	9305      	str	r3, [sp, #20]
 8008fdc:	4619      	mov	r1, r3
 8008fde:	f04f 0c0a 	mov.w	ip, #10
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fe8:	3a30      	subs	r2, #48	; 0x30
 8008fea:	2a09      	cmp	r2, #9
 8008fec:	d903      	bls.n	8008ff6 <_vfiprintf_r+0x1ee>
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d0c5      	beq.n	8008f7e <_vfiprintf_r+0x176>
 8008ff2:	9105      	str	r1, [sp, #20]
 8008ff4:	e7c3      	b.n	8008f7e <_vfiprintf_r+0x176>
 8008ff6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e7f0      	b.n	8008fe2 <_vfiprintf_r+0x1da>
 8009000:	ab03      	add	r3, sp, #12
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	462a      	mov	r2, r5
 8009006:	4b16      	ldr	r3, [pc, #88]	; (8009060 <_vfiprintf_r+0x258>)
 8009008:	a904      	add	r1, sp, #16
 800900a:	4630      	mov	r0, r6
 800900c:	f7fb fa3e 	bl	800448c <_printf_float>
 8009010:	4607      	mov	r7, r0
 8009012:	1c78      	adds	r0, r7, #1
 8009014:	d1d6      	bne.n	8008fc4 <_vfiprintf_r+0x1bc>
 8009016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009018:	07d9      	lsls	r1, r3, #31
 800901a:	d405      	bmi.n	8009028 <_vfiprintf_r+0x220>
 800901c:	89ab      	ldrh	r3, [r5, #12]
 800901e:	059a      	lsls	r2, r3, #22
 8009020:	d402      	bmi.n	8009028 <_vfiprintf_r+0x220>
 8009022:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009024:	f7ff fe7b 	bl	8008d1e <__retarget_lock_release_recursive>
 8009028:	89ab      	ldrh	r3, [r5, #12]
 800902a:	065b      	lsls	r3, r3, #25
 800902c:	f53f af12 	bmi.w	8008e54 <_vfiprintf_r+0x4c>
 8009030:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009032:	e711      	b.n	8008e58 <_vfiprintf_r+0x50>
 8009034:	ab03      	add	r3, sp, #12
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	462a      	mov	r2, r5
 800903a:	4b09      	ldr	r3, [pc, #36]	; (8009060 <_vfiprintf_r+0x258>)
 800903c:	a904      	add	r1, sp, #16
 800903e:	4630      	mov	r0, r6
 8009040:	f7fb fcbc 	bl	80049bc <_printf_i>
 8009044:	e7e4      	b.n	8009010 <_vfiprintf_r+0x208>
 8009046:	bf00      	nop
 8009048:	08009fc4 	.word	0x08009fc4
 800904c:	08009fe4 	.word	0x08009fe4
 8009050:	08009fa4 	.word	0x08009fa4
 8009054:	08009f3c 	.word	0x08009f3c
 8009058:	08009f46 	.word	0x08009f46
 800905c:	0800448d 	.word	0x0800448d
 8009060:	08008de3 	.word	0x08008de3
 8009064:	08009f42 	.word	0x08009f42

08009068 <__swbuf_r>:
 8009068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906a:	460e      	mov	r6, r1
 800906c:	4614      	mov	r4, r2
 800906e:	4605      	mov	r5, r0
 8009070:	b118      	cbz	r0, 800907a <__swbuf_r+0x12>
 8009072:	6983      	ldr	r3, [r0, #24]
 8009074:	b90b      	cbnz	r3, 800907a <__swbuf_r+0x12>
 8009076:	f7ff fda1 	bl	8008bbc <__sinit>
 800907a:	4b21      	ldr	r3, [pc, #132]	; (8009100 <__swbuf_r+0x98>)
 800907c:	429c      	cmp	r4, r3
 800907e:	d12b      	bne.n	80090d8 <__swbuf_r+0x70>
 8009080:	686c      	ldr	r4, [r5, #4]
 8009082:	69a3      	ldr	r3, [r4, #24]
 8009084:	60a3      	str	r3, [r4, #8]
 8009086:	89a3      	ldrh	r3, [r4, #12]
 8009088:	071a      	lsls	r2, r3, #28
 800908a:	d52f      	bpl.n	80090ec <__swbuf_r+0x84>
 800908c:	6923      	ldr	r3, [r4, #16]
 800908e:	b36b      	cbz	r3, 80090ec <__swbuf_r+0x84>
 8009090:	6923      	ldr	r3, [r4, #16]
 8009092:	6820      	ldr	r0, [r4, #0]
 8009094:	1ac0      	subs	r0, r0, r3
 8009096:	6963      	ldr	r3, [r4, #20]
 8009098:	b2f6      	uxtb	r6, r6
 800909a:	4283      	cmp	r3, r0
 800909c:	4637      	mov	r7, r6
 800909e:	dc04      	bgt.n	80090aa <__swbuf_r+0x42>
 80090a0:	4621      	mov	r1, r4
 80090a2:	4628      	mov	r0, r5
 80090a4:	f7ff fcf6 	bl	8008a94 <_fflush_r>
 80090a8:	bb30      	cbnz	r0, 80090f8 <__swbuf_r+0x90>
 80090aa:	68a3      	ldr	r3, [r4, #8]
 80090ac:	3b01      	subs	r3, #1
 80090ae:	60a3      	str	r3, [r4, #8]
 80090b0:	6823      	ldr	r3, [r4, #0]
 80090b2:	1c5a      	adds	r2, r3, #1
 80090b4:	6022      	str	r2, [r4, #0]
 80090b6:	701e      	strb	r6, [r3, #0]
 80090b8:	6963      	ldr	r3, [r4, #20]
 80090ba:	3001      	adds	r0, #1
 80090bc:	4283      	cmp	r3, r0
 80090be:	d004      	beq.n	80090ca <__swbuf_r+0x62>
 80090c0:	89a3      	ldrh	r3, [r4, #12]
 80090c2:	07db      	lsls	r3, r3, #31
 80090c4:	d506      	bpl.n	80090d4 <__swbuf_r+0x6c>
 80090c6:	2e0a      	cmp	r6, #10
 80090c8:	d104      	bne.n	80090d4 <__swbuf_r+0x6c>
 80090ca:	4621      	mov	r1, r4
 80090cc:	4628      	mov	r0, r5
 80090ce:	f7ff fce1 	bl	8008a94 <_fflush_r>
 80090d2:	b988      	cbnz	r0, 80090f8 <__swbuf_r+0x90>
 80090d4:	4638      	mov	r0, r7
 80090d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090d8:	4b0a      	ldr	r3, [pc, #40]	; (8009104 <__swbuf_r+0x9c>)
 80090da:	429c      	cmp	r4, r3
 80090dc:	d101      	bne.n	80090e2 <__swbuf_r+0x7a>
 80090de:	68ac      	ldr	r4, [r5, #8]
 80090e0:	e7cf      	b.n	8009082 <__swbuf_r+0x1a>
 80090e2:	4b09      	ldr	r3, [pc, #36]	; (8009108 <__swbuf_r+0xa0>)
 80090e4:	429c      	cmp	r4, r3
 80090e6:	bf08      	it	eq
 80090e8:	68ec      	ldreq	r4, [r5, #12]
 80090ea:	e7ca      	b.n	8009082 <__swbuf_r+0x1a>
 80090ec:	4621      	mov	r1, r4
 80090ee:	4628      	mov	r0, r5
 80090f0:	f000 f80c 	bl	800910c <__swsetup_r>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	d0cb      	beq.n	8009090 <__swbuf_r+0x28>
 80090f8:	f04f 37ff 	mov.w	r7, #4294967295
 80090fc:	e7ea      	b.n	80090d4 <__swbuf_r+0x6c>
 80090fe:	bf00      	nop
 8009100:	08009fc4 	.word	0x08009fc4
 8009104:	08009fe4 	.word	0x08009fe4
 8009108:	08009fa4 	.word	0x08009fa4

0800910c <__swsetup_r>:
 800910c:	4b32      	ldr	r3, [pc, #200]	; (80091d8 <__swsetup_r+0xcc>)
 800910e:	b570      	push	{r4, r5, r6, lr}
 8009110:	681d      	ldr	r5, [r3, #0]
 8009112:	4606      	mov	r6, r0
 8009114:	460c      	mov	r4, r1
 8009116:	b125      	cbz	r5, 8009122 <__swsetup_r+0x16>
 8009118:	69ab      	ldr	r3, [r5, #24]
 800911a:	b913      	cbnz	r3, 8009122 <__swsetup_r+0x16>
 800911c:	4628      	mov	r0, r5
 800911e:	f7ff fd4d 	bl	8008bbc <__sinit>
 8009122:	4b2e      	ldr	r3, [pc, #184]	; (80091dc <__swsetup_r+0xd0>)
 8009124:	429c      	cmp	r4, r3
 8009126:	d10f      	bne.n	8009148 <__swsetup_r+0x3c>
 8009128:	686c      	ldr	r4, [r5, #4]
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009130:	0719      	lsls	r1, r3, #28
 8009132:	d42c      	bmi.n	800918e <__swsetup_r+0x82>
 8009134:	06dd      	lsls	r5, r3, #27
 8009136:	d411      	bmi.n	800915c <__swsetup_r+0x50>
 8009138:	2309      	movs	r3, #9
 800913a:	6033      	str	r3, [r6, #0]
 800913c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009140:	81a3      	strh	r3, [r4, #12]
 8009142:	f04f 30ff 	mov.w	r0, #4294967295
 8009146:	e03e      	b.n	80091c6 <__swsetup_r+0xba>
 8009148:	4b25      	ldr	r3, [pc, #148]	; (80091e0 <__swsetup_r+0xd4>)
 800914a:	429c      	cmp	r4, r3
 800914c:	d101      	bne.n	8009152 <__swsetup_r+0x46>
 800914e:	68ac      	ldr	r4, [r5, #8]
 8009150:	e7eb      	b.n	800912a <__swsetup_r+0x1e>
 8009152:	4b24      	ldr	r3, [pc, #144]	; (80091e4 <__swsetup_r+0xd8>)
 8009154:	429c      	cmp	r4, r3
 8009156:	bf08      	it	eq
 8009158:	68ec      	ldreq	r4, [r5, #12]
 800915a:	e7e6      	b.n	800912a <__swsetup_r+0x1e>
 800915c:	0758      	lsls	r0, r3, #29
 800915e:	d512      	bpl.n	8009186 <__swsetup_r+0x7a>
 8009160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009162:	b141      	cbz	r1, 8009176 <__swsetup_r+0x6a>
 8009164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009168:	4299      	cmp	r1, r3
 800916a:	d002      	beq.n	8009172 <__swsetup_r+0x66>
 800916c:	4630      	mov	r0, r6
 800916e:	f7fe fd91 	bl	8007c94 <_free_r>
 8009172:	2300      	movs	r3, #0
 8009174:	6363      	str	r3, [r4, #52]	; 0x34
 8009176:	89a3      	ldrh	r3, [r4, #12]
 8009178:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800917c:	81a3      	strh	r3, [r4, #12]
 800917e:	2300      	movs	r3, #0
 8009180:	6063      	str	r3, [r4, #4]
 8009182:	6923      	ldr	r3, [r4, #16]
 8009184:	6023      	str	r3, [r4, #0]
 8009186:	89a3      	ldrh	r3, [r4, #12]
 8009188:	f043 0308 	orr.w	r3, r3, #8
 800918c:	81a3      	strh	r3, [r4, #12]
 800918e:	6923      	ldr	r3, [r4, #16]
 8009190:	b94b      	cbnz	r3, 80091a6 <__swsetup_r+0x9a>
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800919c:	d003      	beq.n	80091a6 <__swsetup_r+0x9a>
 800919e:	4621      	mov	r1, r4
 80091a0:	4630      	mov	r0, r6
 80091a2:	f000 f84d 	bl	8009240 <__smakebuf_r>
 80091a6:	89a0      	ldrh	r0, [r4, #12]
 80091a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091ac:	f010 0301 	ands.w	r3, r0, #1
 80091b0:	d00a      	beq.n	80091c8 <__swsetup_r+0xbc>
 80091b2:	2300      	movs	r3, #0
 80091b4:	60a3      	str	r3, [r4, #8]
 80091b6:	6963      	ldr	r3, [r4, #20]
 80091b8:	425b      	negs	r3, r3
 80091ba:	61a3      	str	r3, [r4, #24]
 80091bc:	6923      	ldr	r3, [r4, #16]
 80091be:	b943      	cbnz	r3, 80091d2 <__swsetup_r+0xc6>
 80091c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091c4:	d1ba      	bne.n	800913c <__swsetup_r+0x30>
 80091c6:	bd70      	pop	{r4, r5, r6, pc}
 80091c8:	0781      	lsls	r1, r0, #30
 80091ca:	bf58      	it	pl
 80091cc:	6963      	ldrpl	r3, [r4, #20]
 80091ce:	60a3      	str	r3, [r4, #8]
 80091d0:	e7f4      	b.n	80091bc <__swsetup_r+0xb0>
 80091d2:	2000      	movs	r0, #0
 80091d4:	e7f7      	b.n	80091c6 <__swsetup_r+0xba>
 80091d6:	bf00      	nop
 80091d8:	20000000 	.word	0x20000000
 80091dc:	08009fc4 	.word	0x08009fc4
 80091e0:	08009fe4 	.word	0x08009fe4
 80091e4:	08009fa4 	.word	0x08009fa4

080091e8 <abort>:
 80091e8:	b508      	push	{r3, lr}
 80091ea:	2006      	movs	r0, #6
 80091ec:	f000 f898 	bl	8009320 <raise>
 80091f0:	2001      	movs	r0, #1
 80091f2:	f7f8 fd32 	bl	8001c5a <_exit>

080091f6 <__swhatbuf_r>:
 80091f6:	b570      	push	{r4, r5, r6, lr}
 80091f8:	460e      	mov	r6, r1
 80091fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091fe:	2900      	cmp	r1, #0
 8009200:	b096      	sub	sp, #88	; 0x58
 8009202:	4614      	mov	r4, r2
 8009204:	461d      	mov	r5, r3
 8009206:	da07      	bge.n	8009218 <__swhatbuf_r+0x22>
 8009208:	2300      	movs	r3, #0
 800920a:	602b      	str	r3, [r5, #0]
 800920c:	89b3      	ldrh	r3, [r6, #12]
 800920e:	061a      	lsls	r2, r3, #24
 8009210:	d410      	bmi.n	8009234 <__swhatbuf_r+0x3e>
 8009212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009216:	e00e      	b.n	8009236 <__swhatbuf_r+0x40>
 8009218:	466a      	mov	r2, sp
 800921a:	f000 f89d 	bl	8009358 <_fstat_r>
 800921e:	2800      	cmp	r0, #0
 8009220:	dbf2      	blt.n	8009208 <__swhatbuf_r+0x12>
 8009222:	9a01      	ldr	r2, [sp, #4]
 8009224:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009228:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800922c:	425a      	negs	r2, r3
 800922e:	415a      	adcs	r2, r3
 8009230:	602a      	str	r2, [r5, #0]
 8009232:	e7ee      	b.n	8009212 <__swhatbuf_r+0x1c>
 8009234:	2340      	movs	r3, #64	; 0x40
 8009236:	2000      	movs	r0, #0
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	b016      	add	sp, #88	; 0x58
 800923c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009240 <__smakebuf_r>:
 8009240:	898b      	ldrh	r3, [r1, #12]
 8009242:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009244:	079d      	lsls	r5, r3, #30
 8009246:	4606      	mov	r6, r0
 8009248:	460c      	mov	r4, r1
 800924a:	d507      	bpl.n	800925c <__smakebuf_r+0x1c>
 800924c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	6123      	str	r3, [r4, #16]
 8009254:	2301      	movs	r3, #1
 8009256:	6163      	str	r3, [r4, #20]
 8009258:	b002      	add	sp, #8
 800925a:	bd70      	pop	{r4, r5, r6, pc}
 800925c:	ab01      	add	r3, sp, #4
 800925e:	466a      	mov	r2, sp
 8009260:	f7ff ffc9 	bl	80091f6 <__swhatbuf_r>
 8009264:	9900      	ldr	r1, [sp, #0]
 8009266:	4605      	mov	r5, r0
 8009268:	4630      	mov	r0, r6
 800926a:	f7fe fd61 	bl	8007d30 <_malloc_r>
 800926e:	b948      	cbnz	r0, 8009284 <__smakebuf_r+0x44>
 8009270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009274:	059a      	lsls	r2, r3, #22
 8009276:	d4ef      	bmi.n	8009258 <__smakebuf_r+0x18>
 8009278:	f023 0303 	bic.w	r3, r3, #3
 800927c:	f043 0302 	orr.w	r3, r3, #2
 8009280:	81a3      	strh	r3, [r4, #12]
 8009282:	e7e3      	b.n	800924c <__smakebuf_r+0xc>
 8009284:	4b0d      	ldr	r3, [pc, #52]	; (80092bc <__smakebuf_r+0x7c>)
 8009286:	62b3      	str	r3, [r6, #40]	; 0x28
 8009288:	89a3      	ldrh	r3, [r4, #12]
 800928a:	6020      	str	r0, [r4, #0]
 800928c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009290:	81a3      	strh	r3, [r4, #12]
 8009292:	9b00      	ldr	r3, [sp, #0]
 8009294:	6163      	str	r3, [r4, #20]
 8009296:	9b01      	ldr	r3, [sp, #4]
 8009298:	6120      	str	r0, [r4, #16]
 800929a:	b15b      	cbz	r3, 80092b4 <__smakebuf_r+0x74>
 800929c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092a0:	4630      	mov	r0, r6
 80092a2:	f000 f86b 	bl	800937c <_isatty_r>
 80092a6:	b128      	cbz	r0, 80092b4 <__smakebuf_r+0x74>
 80092a8:	89a3      	ldrh	r3, [r4, #12]
 80092aa:	f023 0303 	bic.w	r3, r3, #3
 80092ae:	f043 0301 	orr.w	r3, r3, #1
 80092b2:	81a3      	strh	r3, [r4, #12]
 80092b4:	89a0      	ldrh	r0, [r4, #12]
 80092b6:	4305      	orrs	r5, r0
 80092b8:	81a5      	strh	r5, [r4, #12]
 80092ba:	e7cd      	b.n	8009258 <__smakebuf_r+0x18>
 80092bc:	08008b55 	.word	0x08008b55

080092c0 <_malloc_usable_size_r>:
 80092c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092c4:	1f18      	subs	r0, r3, #4
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	bfbc      	itt	lt
 80092ca:	580b      	ldrlt	r3, [r1, r0]
 80092cc:	18c0      	addlt	r0, r0, r3
 80092ce:	4770      	bx	lr

080092d0 <_raise_r>:
 80092d0:	291f      	cmp	r1, #31
 80092d2:	b538      	push	{r3, r4, r5, lr}
 80092d4:	4604      	mov	r4, r0
 80092d6:	460d      	mov	r5, r1
 80092d8:	d904      	bls.n	80092e4 <_raise_r+0x14>
 80092da:	2316      	movs	r3, #22
 80092dc:	6003      	str	r3, [r0, #0]
 80092de:	f04f 30ff 	mov.w	r0, #4294967295
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80092e6:	b112      	cbz	r2, 80092ee <_raise_r+0x1e>
 80092e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092ec:	b94b      	cbnz	r3, 8009302 <_raise_r+0x32>
 80092ee:	4620      	mov	r0, r4
 80092f0:	f000 f830 	bl	8009354 <_getpid_r>
 80092f4:	462a      	mov	r2, r5
 80092f6:	4601      	mov	r1, r0
 80092f8:	4620      	mov	r0, r4
 80092fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092fe:	f000 b817 	b.w	8009330 <_kill_r>
 8009302:	2b01      	cmp	r3, #1
 8009304:	d00a      	beq.n	800931c <_raise_r+0x4c>
 8009306:	1c59      	adds	r1, r3, #1
 8009308:	d103      	bne.n	8009312 <_raise_r+0x42>
 800930a:	2316      	movs	r3, #22
 800930c:	6003      	str	r3, [r0, #0]
 800930e:	2001      	movs	r0, #1
 8009310:	e7e7      	b.n	80092e2 <_raise_r+0x12>
 8009312:	2400      	movs	r4, #0
 8009314:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009318:	4628      	mov	r0, r5
 800931a:	4798      	blx	r3
 800931c:	2000      	movs	r0, #0
 800931e:	e7e0      	b.n	80092e2 <_raise_r+0x12>

08009320 <raise>:
 8009320:	4b02      	ldr	r3, [pc, #8]	; (800932c <raise+0xc>)
 8009322:	4601      	mov	r1, r0
 8009324:	6818      	ldr	r0, [r3, #0]
 8009326:	f7ff bfd3 	b.w	80092d0 <_raise_r>
 800932a:	bf00      	nop
 800932c:	20000000 	.word	0x20000000

08009330 <_kill_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	4d07      	ldr	r5, [pc, #28]	; (8009350 <_kill_r+0x20>)
 8009334:	2300      	movs	r3, #0
 8009336:	4604      	mov	r4, r0
 8009338:	4608      	mov	r0, r1
 800933a:	4611      	mov	r1, r2
 800933c:	602b      	str	r3, [r5, #0]
 800933e:	f7f8 fc7c 	bl	8001c3a <_kill>
 8009342:	1c43      	adds	r3, r0, #1
 8009344:	d102      	bne.n	800934c <_kill_r+0x1c>
 8009346:	682b      	ldr	r3, [r5, #0]
 8009348:	b103      	cbz	r3, 800934c <_kill_r+0x1c>
 800934a:	6023      	str	r3, [r4, #0]
 800934c:	bd38      	pop	{r3, r4, r5, pc}
 800934e:	bf00      	nop
 8009350:	200004a4 	.word	0x200004a4

08009354 <_getpid_r>:
 8009354:	f7f8 bc6a 	b.w	8001c2c <_getpid>

08009358 <_fstat_r>:
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	4d07      	ldr	r5, [pc, #28]	; (8009378 <_fstat_r+0x20>)
 800935c:	2300      	movs	r3, #0
 800935e:	4604      	mov	r4, r0
 8009360:	4608      	mov	r0, r1
 8009362:	4611      	mov	r1, r2
 8009364:	602b      	str	r3, [r5, #0]
 8009366:	f7f8 fcc6 	bl	8001cf6 <_fstat>
 800936a:	1c43      	adds	r3, r0, #1
 800936c:	d102      	bne.n	8009374 <_fstat_r+0x1c>
 800936e:	682b      	ldr	r3, [r5, #0]
 8009370:	b103      	cbz	r3, 8009374 <_fstat_r+0x1c>
 8009372:	6023      	str	r3, [r4, #0]
 8009374:	bd38      	pop	{r3, r4, r5, pc}
 8009376:	bf00      	nop
 8009378:	200004a4 	.word	0x200004a4

0800937c <_isatty_r>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	4d06      	ldr	r5, [pc, #24]	; (8009398 <_isatty_r+0x1c>)
 8009380:	2300      	movs	r3, #0
 8009382:	4604      	mov	r4, r0
 8009384:	4608      	mov	r0, r1
 8009386:	602b      	str	r3, [r5, #0]
 8009388:	f7f8 fcc4 	bl	8001d14 <_isatty>
 800938c:	1c43      	adds	r3, r0, #1
 800938e:	d102      	bne.n	8009396 <_isatty_r+0x1a>
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	b103      	cbz	r3, 8009396 <_isatty_r+0x1a>
 8009394:	6023      	str	r3, [r4, #0]
 8009396:	bd38      	pop	{r3, r4, r5, pc}
 8009398:	200004a4 	.word	0x200004a4

0800939c <atan2>:
 800939c:	f000 b800 	b.w	80093a0 <__ieee754_atan2>

080093a0 <__ieee754_atan2>:
 80093a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a4:	4692      	mov	sl, r2
 80093a6:	4699      	mov	r9, r3
 80093a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80093ac:	461f      	mov	r7, r3
 80093ae:	f1ca 0300 	rsb	r3, sl, #0
 80093b2:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8009540 <__ieee754_atan2+0x1a0>
 80093b6:	ea43 030a 	orr.w	r3, r3, sl
 80093ba:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80093be:	4573      	cmp	r3, lr
 80093c0:	4604      	mov	r4, r0
 80093c2:	460d      	mov	r5, r1
 80093c4:	d808      	bhi.n	80093d8 <__ieee754_atan2+0x38>
 80093c6:	4246      	negs	r6, r0
 80093c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80093cc:	4306      	orrs	r6, r0
 80093ce:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80093d2:	4576      	cmp	r6, lr
 80093d4:	468c      	mov	ip, r1
 80093d6:	d908      	bls.n	80093ea <__ieee754_atan2+0x4a>
 80093d8:	4652      	mov	r2, sl
 80093da:	464b      	mov	r3, r9
 80093dc:	4620      	mov	r0, r4
 80093de:	4629      	mov	r1, r5
 80093e0:	f7f6 ff6c 	bl	80002bc <__adddf3>
 80093e4:	4604      	mov	r4, r0
 80093e6:	460d      	mov	r5, r1
 80093e8:	e019      	b.n	800941e <__ieee754_atan2+0x7e>
 80093ea:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 80093ee:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80093f2:	ea56 060a 	orrs.w	r6, r6, sl
 80093f6:	d103      	bne.n	8009400 <__ieee754_atan2+0x60>
 80093f8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fc:	f000 b8a4 	b.w	8009548 <atan>
 8009400:	17be      	asrs	r6, r7, #30
 8009402:	f006 0602 	and.w	r6, r6, #2
 8009406:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800940a:	ea53 0100 	orrs.w	r1, r3, r0
 800940e:	d10a      	bne.n	8009426 <__ieee754_atan2+0x86>
 8009410:	2e02      	cmp	r6, #2
 8009412:	d067      	beq.n	80094e4 <__ieee754_atan2+0x144>
 8009414:	2e03      	cmp	r6, #3
 8009416:	d102      	bne.n	800941e <__ieee754_atan2+0x7e>
 8009418:	a53b      	add	r5, pc, #236	; (adr r5, 8009508 <__ieee754_atan2+0x168>)
 800941a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800941e:	4620      	mov	r0, r4
 8009420:	4629      	mov	r1, r5
 8009422:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009426:	ea52 010a 	orrs.w	r1, r2, sl
 800942a:	d106      	bne.n	800943a <__ieee754_atan2+0x9a>
 800942c:	f1bc 0f00 	cmp.w	ip, #0
 8009430:	da63      	bge.n	80094fa <__ieee754_atan2+0x15a>
 8009432:	a537      	add	r5, pc, #220	; (adr r5, 8009510 <__ieee754_atan2+0x170>)
 8009434:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009438:	e7f1      	b.n	800941e <__ieee754_atan2+0x7e>
 800943a:	4572      	cmp	r2, lr
 800943c:	d10f      	bne.n	800945e <__ieee754_atan2+0xbe>
 800943e:	4293      	cmp	r3, r2
 8009440:	f106 36ff 	add.w	r6, r6, #4294967295
 8009444:	d107      	bne.n	8009456 <__ieee754_atan2+0xb6>
 8009446:	2e02      	cmp	r6, #2
 8009448:	d850      	bhi.n	80094ec <__ieee754_atan2+0x14c>
 800944a:	4b3b      	ldr	r3, [pc, #236]	; (8009538 <__ieee754_atan2+0x198>)
 800944c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009450:	e9d6 4500 	ldrd	r4, r5, [r6]
 8009454:	e7e3      	b.n	800941e <__ieee754_atan2+0x7e>
 8009456:	2e02      	cmp	r6, #2
 8009458:	d84c      	bhi.n	80094f4 <__ieee754_atan2+0x154>
 800945a:	4b38      	ldr	r3, [pc, #224]	; (800953c <__ieee754_atan2+0x19c>)
 800945c:	e7f6      	b.n	800944c <__ieee754_atan2+0xac>
 800945e:	4573      	cmp	r3, lr
 8009460:	d0e4      	beq.n	800942c <__ieee754_atan2+0x8c>
 8009462:	1a9b      	subs	r3, r3, r2
 8009464:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009468:	ea4f 5223 	mov.w	r2, r3, asr #20
 800946c:	da20      	bge.n	80094b0 <__ieee754_atan2+0x110>
 800946e:	2f00      	cmp	r7, #0
 8009470:	da01      	bge.n	8009476 <__ieee754_atan2+0xd6>
 8009472:	323c      	adds	r2, #60	; 0x3c
 8009474:	db20      	blt.n	80094b8 <__ieee754_atan2+0x118>
 8009476:	4652      	mov	r2, sl
 8009478:	464b      	mov	r3, r9
 800947a:	4620      	mov	r0, r4
 800947c:	4629      	mov	r1, r5
 800947e:	f7f7 f9fd 	bl	800087c <__aeabi_ddiv>
 8009482:	f000 f9eb 	bl	800985c <fabs>
 8009486:	f000 f85f 	bl	8009548 <atan>
 800948a:	4604      	mov	r4, r0
 800948c:	460d      	mov	r5, r1
 800948e:	2e01      	cmp	r6, #1
 8009490:	d015      	beq.n	80094be <__ieee754_atan2+0x11e>
 8009492:	2e02      	cmp	r6, #2
 8009494:	d017      	beq.n	80094c6 <__ieee754_atan2+0x126>
 8009496:	2e00      	cmp	r6, #0
 8009498:	d0c1      	beq.n	800941e <__ieee754_atan2+0x7e>
 800949a:	a31f      	add	r3, pc, #124	; (adr r3, 8009518 <__ieee754_atan2+0x178>)
 800949c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a0:	4620      	mov	r0, r4
 80094a2:	4629      	mov	r1, r5
 80094a4:	f7f6 ff08 	bl	80002b8 <__aeabi_dsub>
 80094a8:	a31d      	add	r3, pc, #116	; (adr r3, 8009520 <__ieee754_atan2+0x180>)
 80094aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ae:	e016      	b.n	80094de <__ieee754_atan2+0x13e>
 80094b0:	a51d      	add	r5, pc, #116	; (adr r5, 8009528 <__ieee754_atan2+0x188>)
 80094b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80094b6:	e7ea      	b.n	800948e <__ieee754_atan2+0xee>
 80094b8:	2400      	movs	r4, #0
 80094ba:	2500      	movs	r5, #0
 80094bc:	e7e7      	b.n	800948e <__ieee754_atan2+0xee>
 80094be:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80094c2:	461d      	mov	r5, r3
 80094c4:	e7ab      	b.n	800941e <__ieee754_atan2+0x7e>
 80094c6:	a314      	add	r3, pc, #80	; (adr r3, 8009518 <__ieee754_atan2+0x178>)
 80094c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094cc:	4620      	mov	r0, r4
 80094ce:	4629      	mov	r1, r5
 80094d0:	f7f6 fef2 	bl	80002b8 <__aeabi_dsub>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	a111      	add	r1, pc, #68	; (adr r1, 8009520 <__ieee754_atan2+0x180>)
 80094da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094de:	f7f6 feeb 	bl	80002b8 <__aeabi_dsub>
 80094e2:	e77f      	b.n	80093e4 <__ieee754_atan2+0x44>
 80094e4:	a50e      	add	r5, pc, #56	; (adr r5, 8009520 <__ieee754_atan2+0x180>)
 80094e6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80094ea:	e798      	b.n	800941e <__ieee754_atan2+0x7e>
 80094ec:	a510      	add	r5, pc, #64	; (adr r5, 8009530 <__ieee754_atan2+0x190>)
 80094ee:	e9d5 4500 	ldrd	r4, r5, [r5]
 80094f2:	e794      	b.n	800941e <__ieee754_atan2+0x7e>
 80094f4:	2400      	movs	r4, #0
 80094f6:	2500      	movs	r5, #0
 80094f8:	e791      	b.n	800941e <__ieee754_atan2+0x7e>
 80094fa:	a50b      	add	r5, pc, #44	; (adr r5, 8009528 <__ieee754_atan2+0x188>)
 80094fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009500:	e78d      	b.n	800941e <__ieee754_atan2+0x7e>
 8009502:	bf00      	nop
 8009504:	f3af 8000 	nop.w
 8009508:	54442d18 	.word	0x54442d18
 800950c:	c00921fb 	.word	0xc00921fb
 8009510:	54442d18 	.word	0x54442d18
 8009514:	bff921fb 	.word	0xbff921fb
 8009518:	33145c07 	.word	0x33145c07
 800951c:	3ca1a626 	.word	0x3ca1a626
 8009520:	54442d18 	.word	0x54442d18
 8009524:	400921fb 	.word	0x400921fb
 8009528:	54442d18 	.word	0x54442d18
 800952c:	3ff921fb 	.word	0x3ff921fb
 8009530:	54442d18 	.word	0x54442d18
 8009534:	3fe921fb 	.word	0x3fe921fb
 8009538:	0800a008 	.word	0x0800a008
 800953c:	0800a020 	.word	0x0800a020
 8009540:	7ff00000 	.word	0x7ff00000
 8009544:	00000000 	.word	0x00000000

08009548 <atan>:
 8009548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954c:	4bb6      	ldr	r3, [pc, #728]	; (8009828 <atan+0x2e0>)
 800954e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009552:	429e      	cmp	r6, r3
 8009554:	4604      	mov	r4, r0
 8009556:	460d      	mov	r5, r1
 8009558:	468b      	mov	fp, r1
 800955a:	dd17      	ble.n	800958c <atan+0x44>
 800955c:	4bb3      	ldr	r3, [pc, #716]	; (800982c <atan+0x2e4>)
 800955e:	429e      	cmp	r6, r3
 8009560:	dc01      	bgt.n	8009566 <atan+0x1e>
 8009562:	d109      	bne.n	8009578 <atan+0x30>
 8009564:	b140      	cbz	r0, 8009578 <atan+0x30>
 8009566:	4622      	mov	r2, r4
 8009568:	462b      	mov	r3, r5
 800956a:	4620      	mov	r0, r4
 800956c:	4629      	mov	r1, r5
 800956e:	f7f6 fea5 	bl	80002bc <__adddf3>
 8009572:	4604      	mov	r4, r0
 8009574:	460d      	mov	r5, r1
 8009576:	e005      	b.n	8009584 <atan+0x3c>
 8009578:	f1bb 0f00 	cmp.w	fp, #0
 800957c:	4cac      	ldr	r4, [pc, #688]	; (8009830 <atan+0x2e8>)
 800957e:	f300 8121 	bgt.w	80097c4 <atan+0x27c>
 8009582:	4dac      	ldr	r5, [pc, #688]	; (8009834 <atan+0x2ec>)
 8009584:	4620      	mov	r0, r4
 8009586:	4629      	mov	r1, r5
 8009588:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800958c:	4baa      	ldr	r3, [pc, #680]	; (8009838 <atan+0x2f0>)
 800958e:	429e      	cmp	r6, r3
 8009590:	dc11      	bgt.n	80095b6 <atan+0x6e>
 8009592:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009596:	429e      	cmp	r6, r3
 8009598:	dc0a      	bgt.n	80095b0 <atan+0x68>
 800959a:	a38b      	add	r3, pc, #556	; (adr r3, 80097c8 <atan+0x280>)
 800959c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a0:	f7f6 fe8c 	bl	80002bc <__adddf3>
 80095a4:	4ba5      	ldr	r3, [pc, #660]	; (800983c <atan+0x2f4>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	f7f7 face 	bl	8000b48 <__aeabi_dcmpgt>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d1e9      	bne.n	8009584 <atan+0x3c>
 80095b0:	f04f 3aff 	mov.w	sl, #4294967295
 80095b4:	e027      	b.n	8009606 <atan+0xbe>
 80095b6:	f000 f951 	bl	800985c <fabs>
 80095ba:	4ba1      	ldr	r3, [pc, #644]	; (8009840 <atan+0x2f8>)
 80095bc:	429e      	cmp	r6, r3
 80095be:	4604      	mov	r4, r0
 80095c0:	460d      	mov	r5, r1
 80095c2:	f300 80b8 	bgt.w	8009736 <atan+0x1ee>
 80095c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80095ca:	429e      	cmp	r6, r3
 80095cc:	f300 809c 	bgt.w	8009708 <atan+0x1c0>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	f7f6 fe72 	bl	80002bc <__adddf3>
 80095d8:	4b98      	ldr	r3, [pc, #608]	; (800983c <atan+0x2f4>)
 80095da:	2200      	movs	r2, #0
 80095dc:	f7f6 fe6c 	bl	80002b8 <__aeabi_dsub>
 80095e0:	2200      	movs	r2, #0
 80095e2:	4606      	mov	r6, r0
 80095e4:	460f      	mov	r7, r1
 80095e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095ea:	4620      	mov	r0, r4
 80095ec:	4629      	mov	r1, r5
 80095ee:	f7f6 fe65 	bl	80002bc <__adddf3>
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	4630      	mov	r0, r6
 80095f8:	4639      	mov	r1, r7
 80095fa:	f7f7 f93f 	bl	800087c <__aeabi_ddiv>
 80095fe:	f04f 0a00 	mov.w	sl, #0
 8009602:	4604      	mov	r4, r0
 8009604:	460d      	mov	r5, r1
 8009606:	4622      	mov	r2, r4
 8009608:	462b      	mov	r3, r5
 800960a:	4620      	mov	r0, r4
 800960c:	4629      	mov	r1, r5
 800960e:	f7f7 f80b 	bl	8000628 <__aeabi_dmul>
 8009612:	4602      	mov	r2, r0
 8009614:	460b      	mov	r3, r1
 8009616:	4680      	mov	r8, r0
 8009618:	4689      	mov	r9, r1
 800961a:	f7f7 f805 	bl	8000628 <__aeabi_dmul>
 800961e:	a36c      	add	r3, pc, #432	; (adr r3, 80097d0 <atan+0x288>)
 8009620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009624:	4606      	mov	r6, r0
 8009626:	460f      	mov	r7, r1
 8009628:	f7f6 fffe 	bl	8000628 <__aeabi_dmul>
 800962c:	a36a      	add	r3, pc, #424	; (adr r3, 80097d8 <atan+0x290>)
 800962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009632:	f7f6 fe43 	bl	80002bc <__adddf3>
 8009636:	4632      	mov	r2, r6
 8009638:	463b      	mov	r3, r7
 800963a:	f7f6 fff5 	bl	8000628 <__aeabi_dmul>
 800963e:	a368      	add	r3, pc, #416	; (adr r3, 80097e0 <atan+0x298>)
 8009640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009644:	f7f6 fe3a 	bl	80002bc <__adddf3>
 8009648:	4632      	mov	r2, r6
 800964a:	463b      	mov	r3, r7
 800964c:	f7f6 ffec 	bl	8000628 <__aeabi_dmul>
 8009650:	a365      	add	r3, pc, #404	; (adr r3, 80097e8 <atan+0x2a0>)
 8009652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009656:	f7f6 fe31 	bl	80002bc <__adddf3>
 800965a:	4632      	mov	r2, r6
 800965c:	463b      	mov	r3, r7
 800965e:	f7f6 ffe3 	bl	8000628 <__aeabi_dmul>
 8009662:	a363      	add	r3, pc, #396	; (adr r3, 80097f0 <atan+0x2a8>)
 8009664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009668:	f7f6 fe28 	bl	80002bc <__adddf3>
 800966c:	4632      	mov	r2, r6
 800966e:	463b      	mov	r3, r7
 8009670:	f7f6 ffda 	bl	8000628 <__aeabi_dmul>
 8009674:	a360      	add	r3, pc, #384	; (adr r3, 80097f8 <atan+0x2b0>)
 8009676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967a:	f7f6 fe1f 	bl	80002bc <__adddf3>
 800967e:	4642      	mov	r2, r8
 8009680:	464b      	mov	r3, r9
 8009682:	f7f6 ffd1 	bl	8000628 <__aeabi_dmul>
 8009686:	a35e      	add	r3, pc, #376	; (adr r3, 8009800 <atan+0x2b8>)
 8009688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968c:	4680      	mov	r8, r0
 800968e:	4689      	mov	r9, r1
 8009690:	4630      	mov	r0, r6
 8009692:	4639      	mov	r1, r7
 8009694:	f7f6 ffc8 	bl	8000628 <__aeabi_dmul>
 8009698:	a35b      	add	r3, pc, #364	; (adr r3, 8009808 <atan+0x2c0>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f7f6 fe0b 	bl	80002b8 <__aeabi_dsub>
 80096a2:	4632      	mov	r2, r6
 80096a4:	463b      	mov	r3, r7
 80096a6:	f7f6 ffbf 	bl	8000628 <__aeabi_dmul>
 80096aa:	a359      	add	r3, pc, #356	; (adr r3, 8009810 <atan+0x2c8>)
 80096ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b0:	f7f6 fe02 	bl	80002b8 <__aeabi_dsub>
 80096b4:	4632      	mov	r2, r6
 80096b6:	463b      	mov	r3, r7
 80096b8:	f7f6 ffb6 	bl	8000628 <__aeabi_dmul>
 80096bc:	a356      	add	r3, pc, #344	; (adr r3, 8009818 <atan+0x2d0>)
 80096be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c2:	f7f6 fdf9 	bl	80002b8 <__aeabi_dsub>
 80096c6:	4632      	mov	r2, r6
 80096c8:	463b      	mov	r3, r7
 80096ca:	f7f6 ffad 	bl	8000628 <__aeabi_dmul>
 80096ce:	a354      	add	r3, pc, #336	; (adr r3, 8009820 <atan+0x2d8>)
 80096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d4:	f7f6 fdf0 	bl	80002b8 <__aeabi_dsub>
 80096d8:	4632      	mov	r2, r6
 80096da:	463b      	mov	r3, r7
 80096dc:	f7f6 ffa4 	bl	8000628 <__aeabi_dmul>
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	4640      	mov	r0, r8
 80096e6:	4649      	mov	r1, r9
 80096e8:	f7f6 fde8 	bl	80002bc <__adddf3>
 80096ec:	4622      	mov	r2, r4
 80096ee:	462b      	mov	r3, r5
 80096f0:	f7f6 ff9a 	bl	8000628 <__aeabi_dmul>
 80096f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80096f8:	4602      	mov	r2, r0
 80096fa:	460b      	mov	r3, r1
 80096fc:	d144      	bne.n	8009788 <atan+0x240>
 80096fe:	4620      	mov	r0, r4
 8009700:	4629      	mov	r1, r5
 8009702:	f7f6 fdd9 	bl	80002b8 <__aeabi_dsub>
 8009706:	e734      	b.n	8009572 <atan+0x2a>
 8009708:	4b4c      	ldr	r3, [pc, #304]	; (800983c <atan+0x2f4>)
 800970a:	2200      	movs	r2, #0
 800970c:	f7f6 fdd4 	bl	80002b8 <__aeabi_dsub>
 8009710:	4b4a      	ldr	r3, [pc, #296]	; (800983c <atan+0x2f4>)
 8009712:	4606      	mov	r6, r0
 8009714:	460f      	mov	r7, r1
 8009716:	2200      	movs	r2, #0
 8009718:	4620      	mov	r0, r4
 800971a:	4629      	mov	r1, r5
 800971c:	f7f6 fdce 	bl	80002bc <__adddf3>
 8009720:	4602      	mov	r2, r0
 8009722:	460b      	mov	r3, r1
 8009724:	4630      	mov	r0, r6
 8009726:	4639      	mov	r1, r7
 8009728:	f7f7 f8a8 	bl	800087c <__aeabi_ddiv>
 800972c:	f04f 0a01 	mov.w	sl, #1
 8009730:	4604      	mov	r4, r0
 8009732:	460d      	mov	r5, r1
 8009734:	e767      	b.n	8009606 <atan+0xbe>
 8009736:	4b43      	ldr	r3, [pc, #268]	; (8009844 <atan+0x2fc>)
 8009738:	429e      	cmp	r6, r3
 800973a:	da1a      	bge.n	8009772 <atan+0x22a>
 800973c:	4b42      	ldr	r3, [pc, #264]	; (8009848 <atan+0x300>)
 800973e:	2200      	movs	r2, #0
 8009740:	f7f6 fdba 	bl	80002b8 <__aeabi_dsub>
 8009744:	4b40      	ldr	r3, [pc, #256]	; (8009848 <atan+0x300>)
 8009746:	4606      	mov	r6, r0
 8009748:	460f      	mov	r7, r1
 800974a:	2200      	movs	r2, #0
 800974c:	4620      	mov	r0, r4
 800974e:	4629      	mov	r1, r5
 8009750:	f7f6 ff6a 	bl	8000628 <__aeabi_dmul>
 8009754:	4b39      	ldr	r3, [pc, #228]	; (800983c <atan+0x2f4>)
 8009756:	2200      	movs	r2, #0
 8009758:	f7f6 fdb0 	bl	80002bc <__adddf3>
 800975c:	4602      	mov	r2, r0
 800975e:	460b      	mov	r3, r1
 8009760:	4630      	mov	r0, r6
 8009762:	4639      	mov	r1, r7
 8009764:	f7f7 f88a 	bl	800087c <__aeabi_ddiv>
 8009768:	f04f 0a02 	mov.w	sl, #2
 800976c:	4604      	mov	r4, r0
 800976e:	460d      	mov	r5, r1
 8009770:	e749      	b.n	8009606 <atan+0xbe>
 8009772:	4602      	mov	r2, r0
 8009774:	460b      	mov	r3, r1
 8009776:	2000      	movs	r0, #0
 8009778:	4934      	ldr	r1, [pc, #208]	; (800984c <atan+0x304>)
 800977a:	f7f7 f87f 	bl	800087c <__aeabi_ddiv>
 800977e:	f04f 0a03 	mov.w	sl, #3
 8009782:	4604      	mov	r4, r0
 8009784:	460d      	mov	r5, r1
 8009786:	e73e      	b.n	8009606 <atan+0xbe>
 8009788:	4b31      	ldr	r3, [pc, #196]	; (8009850 <atan+0x308>)
 800978a:	4e32      	ldr	r6, [pc, #200]	; (8009854 <atan+0x30c>)
 800978c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009790:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009794:	e9da 2300 	ldrd	r2, r3, [sl]
 8009798:	f7f6 fd8e 	bl	80002b8 <__aeabi_dsub>
 800979c:	4622      	mov	r2, r4
 800979e:	462b      	mov	r3, r5
 80097a0:	f7f6 fd8a 	bl	80002b8 <__aeabi_dsub>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80097ac:	f7f6 fd84 	bl	80002b8 <__aeabi_dsub>
 80097b0:	f1bb 0f00 	cmp.w	fp, #0
 80097b4:	4604      	mov	r4, r0
 80097b6:	460d      	mov	r5, r1
 80097b8:	f6bf aee4 	bge.w	8009584 <atan+0x3c>
 80097bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097c0:	461d      	mov	r5, r3
 80097c2:	e6df      	b.n	8009584 <atan+0x3c>
 80097c4:	4d24      	ldr	r5, [pc, #144]	; (8009858 <atan+0x310>)
 80097c6:	e6dd      	b.n	8009584 <atan+0x3c>
 80097c8:	8800759c 	.word	0x8800759c
 80097cc:	7e37e43c 	.word	0x7e37e43c
 80097d0:	e322da11 	.word	0xe322da11
 80097d4:	3f90ad3a 	.word	0x3f90ad3a
 80097d8:	24760deb 	.word	0x24760deb
 80097dc:	3fa97b4b 	.word	0x3fa97b4b
 80097e0:	a0d03d51 	.word	0xa0d03d51
 80097e4:	3fb10d66 	.word	0x3fb10d66
 80097e8:	c54c206e 	.word	0xc54c206e
 80097ec:	3fb745cd 	.word	0x3fb745cd
 80097f0:	920083ff 	.word	0x920083ff
 80097f4:	3fc24924 	.word	0x3fc24924
 80097f8:	5555550d 	.word	0x5555550d
 80097fc:	3fd55555 	.word	0x3fd55555
 8009800:	2c6a6c2f 	.word	0x2c6a6c2f
 8009804:	bfa2b444 	.word	0xbfa2b444
 8009808:	52defd9a 	.word	0x52defd9a
 800980c:	3fadde2d 	.word	0x3fadde2d
 8009810:	af749a6d 	.word	0xaf749a6d
 8009814:	3fb3b0f2 	.word	0x3fb3b0f2
 8009818:	fe231671 	.word	0xfe231671
 800981c:	3fbc71c6 	.word	0x3fbc71c6
 8009820:	9998ebc4 	.word	0x9998ebc4
 8009824:	3fc99999 	.word	0x3fc99999
 8009828:	440fffff 	.word	0x440fffff
 800982c:	7ff00000 	.word	0x7ff00000
 8009830:	54442d18 	.word	0x54442d18
 8009834:	bff921fb 	.word	0xbff921fb
 8009838:	3fdbffff 	.word	0x3fdbffff
 800983c:	3ff00000 	.word	0x3ff00000
 8009840:	3ff2ffff 	.word	0x3ff2ffff
 8009844:	40038000 	.word	0x40038000
 8009848:	3ff80000 	.word	0x3ff80000
 800984c:	bff00000 	.word	0xbff00000
 8009850:	0800a058 	.word	0x0800a058
 8009854:	0800a038 	.word	0x0800a038
 8009858:	3ff921fb 	.word	0x3ff921fb

0800985c <fabs>:
 800985c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009860:	4770      	bx	lr
	...

08009864 <_init>:
 8009864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009866:	bf00      	nop
 8009868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800986a:	bc08      	pop	{r3}
 800986c:	469e      	mov	lr, r3
 800986e:	4770      	bx	lr

08009870 <_fini>:
 8009870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009872:	bf00      	nop
 8009874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009876:	bc08      	pop	{r3}
 8009878:	469e      	mov	lr, r3
 800987a:	4770      	bx	lr
